#!/usr/bin/env perl

# Libraries
use FindBin;
use lib "$FindBin::RealBin/../perl/lib";
use Bio::TreeIO;
use Bio::Tree::TreeUtils;
use File::Basename;
use strict;
use warnings;

# MAIN PROGRAM: start

# Parse command line arguments
my $CONFIG = &parse_configuration();
my $tutil  = Bio::Tree::TreeUtils->new();

# Loading and processing
foreach my $file (@ARGV) {
    my $in = Bio::TreeIO->new(-file => "<$file", -format => $CONFIG->informat, %{ $CONFIG->inargs });
    my @trees = ();
    my $tnum = 0;

    while (my $t = $in->next_tree) {
	# Tree ID
	if (!defined $t->id) {
	    if (defined $CONFIG->treeid) {
		if (ref($CONFIG->treeid) eq "CODE") {
		    $t->id($CONFIG->treeid->($file));
		} else {
		    $t->id($CONFIG->treeid);
		}
		$t->id($t->id."_$tnum") if ($tnum > 0);
	    } else {
		$t->id($file);
	    }
	}
	$tnum++;

	#$t->move_id_to_bootstrap; # To avoid loosing these values
	my @nodes = ();

	# Renaming first
	$tutil->clean_leaf_names($t,@{ $CONFIG->clean }) if (scalar @{ $CONFIG->clean });
	$tutil->rename_nodes($t,$CONFIG->rename) if (scalar(keys %{$CONFIG->rename}));

	# Change node or branch tags/properties
	Increase_Branch_Lengths($t,$CONFIG->minimum) if (defined $CONFIG->minimum);

	# Change tree
	if (scalar @{ $CONFIG->reroot }) {
	    my ($lca) = $t->find_node(-id => $CONFIG->reroot->[0]);
	    ($lca) = $t->find_node(-internal_id => $CONFIG->reroot->[0]) if (!defined $lca);
	    if (scalar(@{ $CONFIG->reroot }) == 1 && defined $lca) {
		$lca = $lca->ancestor if ($lca->is_Leaf);
	    } else {
		($lca) = $t->get_lca(map { $t->find_node(-id => $_) } @{ $CONFIG->reroot });
	    }
	    if (defined $lca && defined $lca->ancestor) {
		my $support  = $lca->bootstrap;
		my $ancestor = $lca->ancestor;
		$t->reroot($lca);
		$ancestor->bootstrap($support) if (defined $support && !defined $ancestor->bootstrap);
	    }
	}
	$tutil->remove_nodes($t, [ 'bootstrap', $CONFIG->threshold ]) if (defined $CONFIG->threshold);
	$tutil->remove_nodes($t, $CONFIG->remove) if (scalar @{ $CONFIG->remove });
	$tutil->subtree($t, @{ $CONFIG->subtree }) if (scalar @{ $CONFIG->subtree });
	$t->contract_linear_paths($CONFIG->contract) if (defined $CONFIG->contract);

	# Tree traversal
	if (scalar @{ $CONFIG->traverse }) {
	    my $trav = $CONFIG->traverse;
	    for (my $i=0; $i<=$#{$trav}; $i++) {
		if ($trav->[$i] =~ /^(sub\s*\{.+\})\s*\,?\s*(.*)$/) {
		    my $method = $1;
		    my @args = defined $2 ? split(/\s*\,+\s*/,$2) : ();
		    $method = eval "$method";
		    die "Failed to compiled callback subroutine:\n$@" if ($@);
		    @nodes = $tutil->postorder_traversal($t, $method, undef, @args);
		} else {
		    my ($method, @args) = split(/\s*\,+\s*/, $trav->[$i]);
		  METHOD: {
		      # Perl code in a file
		      if ( -f "$method" ) {
			  $method = do "$method";
			  die "Failed to compiled callback subroutine:\n$@" if ($@);
			  @nodes = $tutil->postorder_traversal($t, $method, undef, @args);
			  next;
		      }

		      # Other methods
		      $_ = $method;
		      /^(depth|breadth)$/oi && do {
			  @nodes = $t->get_nodes($1);
			  # The user may want to execute a subroutine on each node...
			  if ($args[0] =~ /^\s*sub\s*\{/) {
			      my $code = join(",",@args);
			      my $coderef = eval "$code";
			      die "Failed to compile user defined code $code:\n$@" if ($@);
			      map { $coderef->($_, $t) } @nodes;
			  }
			  next;
		      };
		      /^name2taxa$/ && do {
			  @nodes = $tutil->postorder_traversal($t, \&name2taxa, undef, @args);
			  next;
		      };
		      /^postorder$/ && do {
			  @nodes = $tutil->postorder_traversal($t, undef, undef, @args);
			  next;
		      };
		      /^mapnodes$/ && do {
			  @nodes = $tutil->map_node_labels($t, @args);
			  next;
		      };
		      die "Unkown method name or argument format for traversal subroutine: ".$trav->[$i];
		    }
		}
	    } # for (my $i=0; $i<=$#{$trav}; $i++)
	} # if (scalar @{ $CONFIG->traverse })

	# Output
      OUTPUT: {
	  $_ = $CONFIG->outformat;
	  /^leaves$/oi && do {
	      print_node_table($CONFIG, $t, $t->get_leaf_nodes);
	      last OUTPUT;
	  };
	  /^nodes$/oi && do {
	      @nodes = $t->get_nodes unless (scalar @nodes);
	      die "When printing a table of nodes, the last callback subroutine should return the nodes to be printed.\n@nodes" 
		  if (grep { !(ref($_) && $_->isa("Bio::Tree::NodeI")) } @nodes);
	      print_node_table($CONFIG, $t, @nodes);
	      last OUTPUT;
	  };
	  /^none$/oi && do {
	      last OUTPUT;
	  };
	  push(@trees,$t); # Default action: print tree
	}
    } # while (my $t = $in->next_tree)
    $in->close;

    # Printing trees
    if (scalar @trees) {
	my $out = Bio::TreeIO->new(-fh => \*STDOUT, -format => $CONFIG->outformat, %{ $CONFIG->outargs });
	$out->write_tree(@trees);
	$out->close();
    }
}

# MAIN PROGRAM: end
exit 0;

###############
# Subroutines

sub map_labels {
    my ($n,$t) = @_;
    my %n = map { ($_->id,1) } $t->get_leaf_nodes;

    if ($n->is_Leaf) {
	(my $tax = $n->id) =~ s/\|.+$//;
	$n->add_tag_value("taxon",$tax);
    } else {
	my %d = (); 
	map { map { $d{$_} = 1 } map { split(":") } $_->get_tag_values("taxon") } $n->each_Descendent;
	$n->add_tag_value("taxon",join(":",sort keys %d));
    }

    return $n;
}

sub Increase_Branch_Lengths {
    my $tree   = shift;
    my $amount = shift;

    foreach my $node ($tree->get_nodes) {
	next if ($node->internal_id eq $tree->get_root_node->internal_id);
	my $branch_length = $node->branch_length();
	$node->branch_length($amount) 
	    if (!defined($branch_length) || $branch_length < $amount);
    }

    return 1;
}

sub name2taxa {
    my ($node, $tree, $table) = @_;
    my @children = $node->each_Descendent;
    if (@children) {
	my @taxa = (); my %seen = ();
	foreach my $child (@children) {
	    push(@taxa, grep { exists($seen{$_}) ? 0 : ++$seen{$_} } map { split(/:/) } $child->get_tag_values('descendents'));
	}
	$node->add_tag_value('descendents',join(":",sort @taxa));
	#$node->id(join(":",@taxa));
    } else {
	(my $taxid = $node->id) =~ s/\|.+$//;
	$node->add_tag_value('descendents',$taxid);
    }
    return $node;
}

sub print_node_table {
    my ($config, $tree, @nodes) = @_;

    # Load tag names
    my %tags = ();
    foreach my $node (@nodes) {
	map { $tags{$_} = 1 } grep { !/^_/ } $node->get_all_tags;
	if ($node->isa("Bio::Tree::AnnotatableNode")) {
	    map { delete $tags{$_} } qw(branch_length name property);
	} else {
	    delete $tags{"B"};
	}
    }
    my @tags = sort keys %tags;

    # Print
    print join("\t",qw(Name ID internalID length support children),@tags),"\n";
    foreach my $node (@nodes) {
	(my $nodeID = $node->id || "") =~ s/\'//g;
	print join("\t", 
		   $tree->id,
		   $nodeID,
		   $node->internal_id,
		   $node->branch_length || 1,
		   $node->bootstrap || "",
		   scalar($node->each_Descendent) ? join("|", map { $_->internal_id } $node->each_Descendent) : "",
		   get_node_annotation_values($node, @tags)
	    ),"\n";
    }

    return 1;
}

sub get_node_annotation_values {
    my ($node,@tags) = @_;
    my @values = ();
    foreach my $tag (@tags) {
	if (!$node->has_tag($tag)) {
	    push(@values,"");
	} else {
	    push(@values, join(",", $node->get_tag_values($tag)));
	}
    }
    return @values;
}

sub parse_configuration {
    use Application::Config qw(:argcount GetConfig);

    my $appconfig = GetConfig({},

			      # Processing nodes
			      "clean" => {
				  ALIAS    => "c",
				  ARGCOUNT => ARGCOUNT_LIST,
				  DEFAULT  => [],
				  SUMMARY  => "Remove <regexp> from leaf names",
			      },

			      "rename" => {
				  ACTION   => "EXPAND_FILES",
				  ALIAS    => "r",
				  ARGCOUNT => ARGCOUNT_HASH,
				  DEFAULT  => {},
				  SUMMARY  => "Rename tips. Input of a set of key=value pairs (e.g. --rename old=new) or a TAB-delimited text table where the first column if the old name and the second column is the new leaf name. When loading from a text table, add a 'file=' prefix to each table file name to activate file loading, e.g. --rename file=table.txt.",
			      },

			      # Branch and node properties
			      "minimum" => {
				  ALIAS    => "m",
				  ARGCOUNT => ARGCOUNT_ONE,
				  DEFAULT  => undef,
				  SUMMARY  => "Set all branch lengths to be greater or equal than a minimum value",
			      },

			      # Processing trees
			      "threshold" => {
				  ALIAS    => "t",
				  ARGCOUNT => ARGCOUNT_ONE,
				  DEFAULT  => undef,
				  SUMMARY  => "Set threshold to remove unsupported branches. Note that removal of unsupported branches generates politomies.",
			      },

			      "contract" => {
				  ALIAS    => "k",
				  ARGCOUNT => ARGCOUNT_NONE,
				  DEFAULT  => 0,
				  SUMMARY  => "Reduce linear paths in the tree, i.e. remove internal nodes with a single child",
			      },

			      "remove" => {
				  ALIAS    => "x",
				  ARGCOUNT => ARGCOUNT_LIST,
				  DEFAULT  => [],
				  SUMMARY  => "List of leafs to delete or method to choose leafs to remove. Method could be one among the following set of pre-defined subroutines:
\n=over
\n=item * inparalogs : remove every leaf whose sister branch is the longer then that of siblings from the same taxon. Taxon is supporsed to be the first part of the leaf name, peceeding a pipe, i.e. leafs should be named '<taxon>|<identifier>'.
\n=back",
			      },

			      "reroot" => {
				  ALIAS    => 'outgroup|n',
				  ARGCOUNT => ARGCOUNT_LIST,
				  DEFAULT  => [],
				  SUMMARY  => "Define a (list of) node(s) to be the new outgroup and reroot the tree",
			      },

			      "subtree" => {
				  ALIAS    => "s",
				  ARGCOUNT => ARGCOUNT_LIST,
				  DEFAULT  => [],
				  SUMMARY  => "Select smallest subtree containing 1 and 2, using o as an outgroup",
			      },

			      "traverse" => {
				  ALIAS    => "v",
				  ARGCOUNT => ARGCOUNT_LIST,
				  DEFAULT  => [],
				  SUMMARY  => "Walk through the tree and do something. Syntax:\n\n treeutil --traverse subroutine,arg1,arg2,arg3...\n\nwhere arg# are strings passed as arguments to the subroutine. Currently, the following subroutines are available:\n\ndepth : select all nodes in a depth-first traversal order\n\nbreadth : select all nodes in a breadth-first traversal order\n\nmapnodes : copy node identifiers from a reference tree to the 'taxon' annotation tags of the best matching modes in the input tree. Syntax:\n\n treeutil --traversal mapnodes,reference,format,selection\n\nwhere reference is a tree file, format is the tree file format and selection is the list of best nodes from the reference tree that you want to use.\n\nUser-defined subroutines may be input in the command line using the syntax:\n\n treeutil --traverse 'sub { my (\$n,\$t,\@a) = \@_; ...; return \$n }',arg#\n\nwhere \$n is a node object, \$t is the tree and \@a is the list of arg# arguments given at the command line.",
			      },

			      # Format options
			      'informat' => {
				  ALIAS    => "i|if",
				  ARGCOUNT => ARGCOUNT_ONE,
				  DEFAULT  => 'newick',
				  SUMMARY  => "Input file format.",
			      },

			      'outformat' => {
				  ALIAS    => "o|of",
				  ARGCOUNT => ARGCOUNT_ONE,
				  DEFAULT  => 'newick',
				  SUMMARY  => "Output format: either a tree file format or\n\n=over
\n=item * leaves    : table of properties for all leaves
\n=item * nodes     : table of properties for all nodes
\n=back",
			      },

			      'inargs' => {
				  ALIAS    => "ia",
				  ARGCOUNT => ARGCOUNT_HASH,
				  DEFAULT  => { -internal_node_id => 'bootstrap' },
				  SUMMARY  => "Input file format options",
			      },

			      'outargs' => {
				  ALIAS    => "oa",
				  ARGCOUNT => ARGCOUNT_HASH,
				  DEFAULT  => { '-flush' => 1, '-bootstrap_style' => 'traditional' },
				  SUMMARY  => "Output format options.",
			      },

			      'treeid' => {
				  ALIAS    => "b",
				  ARGCOUNT => ARGCOUNT_ONE,
				  DEFAULT  => undef,
				  SUMMARY  => "Rule to name trees without ID",
			      },
	);

    # Flexible way to name trees
    if (defined $appconfig->treeid) {
	if ($appconfig->treeid =~ /^\./) {
	    my $suffix = $appconfig->treeid;
	    $appconfig->treeid('sub { return basename($_[0], "'.$suffix.'") }');
	}
	if ($appconfig->treeid =~ /^sub\s*{.+\}$/) {
	    my $ref = $appconfig->treeid;
	    $ref = eval "$ref";
	    die "Failed to compile tree naming rule:\n$@" if ($@);
	    $appconfig->treeid($ref);
	}
    }

    unshift(@ARGV, "-") unless ( -t STDIN || scalar @ARGV);
    return $appconfig;
}

# POD: start
# Documentation (use option -doc or --doc to see it!)
#
# AppConfig::AutoDoc can automatically extract Plain Old Documentation
# from within the caller program's, add descriptions of the options
# created by L<define> and do some pretty formatting for output.
# 
# Note that POD may be added anywhere in your program, thus allowing 
# the documentation for a program to be left side by side with the
# function's definition.

=head1 NAME

 treeutil - generic utility to manipulate phylogenetic tree files

=head1 SYNOPSIS

 # Convert between file formats
 treeutil -i newick -o nexus file.tre

=head1 DESCRIPTION

This program loads and process phylogenetic tree files in any
format compatible with Bio::TreeIO (bioperl). It supports a wide
range of operations including changing formats, (re-)rooting the
tree, removing branches, listing nodes or setting/modifying tree
and/or node properties using pre-defined or user-provided 
subroutines.

=head1 AUTHOR

 Robson Francisco de Souza

=cut
# POD: end
