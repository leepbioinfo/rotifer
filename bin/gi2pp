#!/usr/bin/env perl

use FindBin;
use lib "$FindBin::RealBin/../perl/lib";
use File::Basename;
use Rotifer::DB::NCBI::EDirect qw(get_seqids);
use IPC::Run qw(run);
use warnings;
use strict;

# Parse command line options
my $CONFIG = parse_configuration();

# Parse input
my %ids = ();
my %names = ();
while (<>) { 
 # Current file
 my $f = basename($ARGV, ".gi", ".*.dbt", ".tsv");

 # Parse row
 chomp;
 s/^\s+//;
 s/\s+.*$//;
 next unless length($_);
 $ids{$_}{$f}=1;
 $names{$f}=1;
}
print STDERR "Found ",scalar(keys %ids)," ids\n";

# Process input
my @acc = grep { !/^\d+$/ } keys %ids;
my @gi  = grep {  /^\d+$/ } keys %ids;
if (scalar @gi) {
  foreach my $ref (get_seqids(@gi)) {
    next if (exists $ids{$ref->[1]});
    $ids{$ref->[1]} = $ids{$ref->[0]};
    push(@acc,$ref->[1]);
  }
}

# Get taxonomy data
my ($err,$out);
my $step = 250;
my $i=0;
my %tax = ();
while ($i <= $#acc) {
  my $j=$i+$step-1;
  $j=$#acc if ($j>$#acc);

  my $in = join(",",@acc[$i..$j]);
  run(["efetch","-db",$CONFIG->database,"-format","gb","-id",$in],"|",["seq2taxonomy","-y"],\$out,\$err) || die "pipe(efetch,seq2taxonomy): $?\n$err\n$out\n";

  # Parse seq2taxonomy output
  my %h = ();
  foreach (split(/\n/,$out)) {
     my @r = map { s/^\s+//; s/\s+$//; $_ } split(/\t/);
     if ($r[0] eq "accver") {
       %h = map { ($r[$_],$_) } 0..$#r;
       die "No taxid column in seq2taxonomy's output:\n$_\n" if (!exists $h{"taxid"});
       next;
     }
     die "No header in seq2taxonomy's output:\n$_\n" if (!scalar(keys %h));
     die "No taxid column in seq2taxonomy's output:\n$_\n" if (!exists $h{"taxid"});
     my $tid = $r[$h{"taxid"}];
     my $pid = $r[$h{"accver"}];
     next if (!exists $ids{$pid});
     $tax{$tid}->{"_class"} = [ map { $r[$h{$_}] } qw(organism lineage classification) ] unless (exists $tax{$tid}->{"_class"});
     foreach my $file (keys %{$ids{$pid}}) {
       $tax{$tid}->{$file}++;
     }
  }

  $i=$j+1;
}

# Join
my $sep = $CONFIG->output_delimiter;
my @f=sort keys %names;
print join("\t","taxid",@f,qw(organism lineage classification)),"\n"; 
foreach my $tid (sort keys %tax) {
  my @count = map { exists $tax{$tid}->{$_} ? $tax{$tid}->{$_} : 0 } @f;
  print join($sep,$tid,@count,@{$tax{$tid}->{"_class"}}),"\n";
}

# exit elegantly
exit 0;

# Command line parsing, debugging and help messages
sub parse_configuration {
    # Parser definition
    use Application::Config qw(:argcount GetConfig);
    my $appconfig = GetConfig(# Output
                              'database' => {
                                  DEFAULT  => "protein",
                                  ARGCOUNT => ARGCOUNT_ONE,
                                  ALIAS    => 'db',
                                  SUMMARY  => "NCBI sequence database name",
                              },
                              'output_delimiter' => {
                                  DEFAULT  => "\t",
                                  ARGCOUNT => ARGCOUNT_ONE,
                                  ALIAS    => 'r',
                                  SUMMARY  => "Output field delimiter",
                              },
        );

    # Check arguments
    push(@ARGV, '-') unless ( -t STDIN || scalar(grep { $_ eq "-" } @ARGV) );

    return $appconfig;
}

# POD: start
# Documentation (use option -doc or --doc to see it!)

=head1 NAME

 gi2pp - build taxon distribution for lists of protein identifiers

=head1 SYNOPSIS

 gi2pp type1.acc type2.acc

=head1 DESCRIPTION

This program takes as input a list of files containing identifiers and
generates the taxonomic distribution for the input sequences.

=head1 AUTHOR

 Robson Francisco de Souza

=cut
# POD: end
