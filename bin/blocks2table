#!/usr/bin/env perl

# LIBRARIES and PRAGMAS: start
use FindBin;
use lib "$FindBin::RealBin/../perl/lib";
use strict;
use warnings;
# LIBRARIES and PRAGMAS: end

# Parse configuration/options
my $CONFIG = &parse_configuration();

# Compile filters
my %H = (); my @F = (); my @FILTERS = ();
if (scalar @{$CONFIG->filter}) {
    foreach my $rule (@{$CONFIG->filter}) {
	my $ref = eval "sub { $rule }";
	die "Error while compiling output filter $rule\n$@" if ($@);
	push(@FILTERS, $ref);
    }
}

# MAIN PROGRAM: start
my @HEADER       = ();
my @Length       = ();
my @table        = ();
my $lastColumnIndex = 0;
my $nofAddedColumns = 0;
my $last_context = 0;
my @block_header = ();
my $sep = $CONFIG->input_delimiter;
foreach my $file (@ARGV) {
    open(FILE,"<$file") || die "Could not open file $file";
    while (<FILE>) {
	chomp;
	next if /^\s*$/; # Ignore empty/whitespace or hash only rows
	s/\s+$//; # Remove trailing spaces

	my ($section, @header_data) = $CONFIG->header_parser->($CONFIG);
	if ($section == 1) { # Header data
	    @block_header = () if ($last_context != $section);
	    push(@block_header, @header_data);
	}

	elsif ($section == -1) { # Column names
	    if (scalar(@HEADER) < scalar(@header_data)) {
		@HEADER = @header_data;
		for (my $i=0; $i<=$#HEADER; $i++) {
		    $Length[$i] = length($HEADER[$i] || '') if (!defined $Length[$i] || $Length[$i] < length($HEADER[$i] || ''));
		}
	    }
	    $lastColumnIndex = $#HEADER if ($lastColumnIndex < $#HEADER);
        }

	else { # Tabular rows
	    if (!$nofAddedColumns) {
		$nofAddedColumns = scalar(@block_header);
	    } elsif ($nofAddedColumns > scalar(@block_header)) {
		push(@block_header,("") x ($nofAddedColumns - scalar(@block_header)));
	    } elsif ($nofAddedColumns < scalar(@block_header)) {
		die "The block header parser returned more columns at row ".($.-1)." than previously:\n@block_header";
	    }
	    @F = defined $CONFIG->number_of_columns ? split(/$sep/,$_,$CONFIG->number_of_columns) : split(/$sep/);
	    @F = map { s/^\s+//; s/\s+$//; $_ } @F if ($CONFIG->unpad); # Remove leading and trailing spaces in all columns
	    next unless apply_filters(@FILTERS);
	    my $last = [ $F[0], @block_header, @F[1..$#F] ];
	    map { $Length[$_] = length($last->[$_] || '') if (!defined $Length[$_] || $Length[$_] < length($last->[$_] || '')) } 0..$#{$last};
	    $lastColumnIndex = $#{$last} if ($lastColumnIndex < $#{$last});
	    push(@table, $last);
	}
	$last_context = $section;
    }
    close(FILE);
}

# Print blocks
my @include = ();
if (scalar @{$CONFIG->include}) {
    @include = grep { !exists $CONFIG->_exclude->{$_} } @{$CONFIG->include};
} else {
    @include = grep { !exists $CONFIG->_exclude->{$_} } 0..$lastColumnIndex;
}

# Process header
if ($CONFIG->parse_header && scalar @HEADER) {
    if ($nofAddedColumns > 0) {
	my @ParsedHeaderColumns = @{$CONFIG->header_names};
	my $startAutoColumnName = scalar(@ParsedHeaderColumns)+1;
	push(@ParsedHeaderColumns, map { "c$_" } $startAutoColumnName..$nofAddedColumns) unless ($startAutoColumnName > $nofAddedColumns);
	@HEADER = ($HEADER[0], @ParsedHeaderColumns[0..$nofAddedColumns-1], @HEADER[1..$#HEADER]);
    }

    # Rename duplicates and build column index
    my %index = ();
    my %count = ();
    for (my $i=0; $i<=$#HEADER; $i++) {
	$count{$HEADER[$i]}++;
	if ($CONFIG->rename_duplicates) {
		$HEADER[$i] .= "_" . $count{$HEADER[$i]} if ($count{$HEADER[$i]} > 1);
	}
	push(@{ $index{$HEADER[$i]} }, $i);
    }

    # Make sure each column length matches both header and column contents
    map { $Length[$_] = length($HEADER[$_] || '') if (!defined $Length[$_] || $Length[$_] < length($HEADER[$_] || '')) } 0..$#HEADER;

    # Names to indices
    if (scalar @include) {
	my %pointer = ();
	for (my $i=0; $i<=$#include; $i++) {
	    if (exists $index{$include[$i]}) {
		my $index = $pointer{$include[$i]}++;
		$index = $#{ $index{$include[$i]} } if ($index > $#{ $index{$include[$i]} });
		$include[$i] = $index{$include[$i]}->[$index];
	    } elsif ($include[$i] !~ /^\d+$/) {
		die "WARNING: column $include[$i] not found. Aborting...";
	    }
	}
    }
    if (scalar @{$CONFIG->sort}) {
	my %pointer = ();
	for (my $i=0; $i<=$#{$CONFIG->sort}; $i++) {
		my $old = $CONFIG->sort->[$i];
		my $rev = $old =~ /[ \,]+r$/ ? 1 : 0;
		$old =~ s/[ \,]+r$//;
		if (exists $index{$old}) {
			my $index = $pointer{$old}++;
			$index = $#{ $index{$old} } if ($index > $#{ $index{$old} });
			$CONFIG->sort->[$i] = $index{$old}->[$index];
			$CONFIG->sort->[$i] .= ",r" if ($rev);
	    	} elsif ($include[$i] !~ /^\d+$/) {
			die "WARNING: column $include[$i] not found. Aborting...";
		}
	}
    }

    # Print header
    print join($CONFIG->output_delimiter, map { pad($CONFIG, $Length[$_], $HEADER[$_]) } @include),"\n"
}

# Print data rows
foreach my $row (scalar @{$CONFIG->sort} ? sort sort_matrix_rows @table : @table) {
    print join($CONFIG->output_delimiter, map { pad($CONFIG, $Length[$_], $row->[$_]) } @include),"\n";
}

exit 0;
# MAIN PROGRAM: end

###############
# Subroutines

sub apply_filters {
    return 1 if !scalar(@_);
    foreach my $filter (@_) {
	return 0 if !$filter->(); # Return false immediately
    }
    return 1; # return true if all filters are OK
}

sub pad {
    my ($conf, $length, $text) = @_;
    if ($conf->pad) {
	return sprintf("%-${length}s", defined $text && length $text ? $text : $conf->empty);
    } else {
	return defined $text && length $text ? $text : $conf->empty;
    }
}

sub default_header_parser {
    my $conf = shift;
    if (/^\#/) {
	my ($size,$header) = /^#\s*(\d+)\s*\;\s*(.*)/;
	return (1, $size, split(/\s*[\,\|]\s*/,$header || ""));
    } elsif (/^\|(.*)/) {
	my $header = $1;
	my $sep = $conf->input_delimiter;
	if (defined($header) && length($header)) {
	    my @columns = split(/$sep/,$header);
	    @columns = map { s/^\s+//; s/\s+$//; $_ } @columns if ($conf->unpad);
	    return (-1, @columns);
	}
	return (-1);
    }
    return (0);
}

sub parse_simple_header {
    my $conf = shift;
    if (/^\#/) {
	my ($header) = /^#\s*\d+\s*\;\s*(.*)/;
	return (1, defined $header && length $header ? split(/\s*[\,\|]\s*/,$header) : $conf->empty);
    }
    return (0);
}

sub sort_matrix_rows {
    my $ret = 0;
    my @sort = @{$CONFIG->sort};
    if (!scalar @sort) {
	my $max  = $#{$a};
	$max = $#{$b} if ($#{$b} > $max);
	push(@sort, $max-1);
	push(@sort, $max) if (defined $ARGV[1]);
    }
    foreach my $field (@sort) {
	(my $column = $field) =~ s/[ \,]+r$//;
	my $v1 = $a->[$column];
	my $v2 = $b->[$column];
	if (defined $v1 && !defined $v2) {
	    $ret ||= -1;
	} elsif (!defined $v1 && defined $v2) {
	    $ret ||= 1;
	} elsif (!defined $v1 && !defined $v2) {
	    $ret ||= 0;
	} elsif ($v1 =~ /^\-?\d+\.?\d*e?[\-\+]?\d*$/ &&
		 $v2 =~ /^\-?\d+\.?\d*e?[\-\+]?\d*$/) {
	    $ret ||= ($v1 <=> $v2);
	} else {
	    $ret ||= ($v1 cmp $v2);
	}
	$ret *= -1 if ($field =~ /[ \,]+r$/);
	return $ret if ($ret);
    }
    return $ret;
}

# Creating the configuration object
# See perldoc AppConfig::AutoDoc for details
sub parse_configuration {
    use Application::Config qw(:argcount GetTableToolsConfig expand_numeric_interval);
    my $appconfig = GetTableToolsConfig(

	'number_of_columns' => {
	    DEFAULT  => undef,
	    ARGCOUNT => ARGCOUNT_ONE,
	    ALIAS    => 'n',
	    SUMMARY  => "Limit the number of columns to parse on each row.",
	},

	'exclude' => {
	    DEFAULT  => [],
	    ACTION   => \&expand_numeric_interval,
	    ARGCOUNT => ARGCOUNT_LIST,
	    ALIAS    => 'x',
	    SUMMARY  => "Exclude columns from the output. Columns may be selected using interval syntax of the form start..end, e.g. 0..4 refers to the first to fifth elements.",
	},

	'include' => {
	    DEFAULT  => [],
	    ACTION   => \&expand_numeric_interval,
	    ARGCOUNT => ARGCOUNT_LIST,
	    ALIAS    => 'i',
	    SUMMARY  => "Select columns to include in output. Columns may be selected using interval syntax of the form start..end, e.g. 0..4 refers to the first to fifth elements.",
	},

	'filter' => {
	    DEFAULT  => [],
	    ARGCOUNT => ARGCOUNT_LIST,
	    ALIAS    => 'f',
	    SUMMARY  => "Filter input rows using Perl code.",
	},

	'header_names' => {
	    DEFAULT  => [],
	    ARGCOUNT => ARGCOUNT_LIST,
	    ALIAS    => 'nh',
	    SUMMARY  => "Set the name for the columns extracted from the block headers.",
	},

	'header_parser' => {
	    DEFAULT  => 'default',
	    ARGCOUNT => ARGCOUNT_ONE,
	    ALIAS    => 'ph',
	    SUMMARY  => qq{
Header processor (either a subroutine name or Perl code that returns an anonymous subroutine).

When defininig header processors, the current input file line
is, as usual for Perl, stored in the global variable B<\$_> and
this variable should be processed to extract the data and 
identify the current section (see below) of the input file.

User provided code is passed a reference to the program's configuration
object and has access to a global B<\%H> hash that may be used to store 
values from previously processed rows.

To identify the current section in the input file(s) and return
its associated data, header processors should return the 
following values:

\n=over
\n=item * (1) An integer value that evaluates to
\n=over
\n=item * B<-1>, when parsing column names
\n=item * B<1>, if parsing header data
\n=item * B<0>, if procesing non-header data.
\n=back
\n=item * (2) A list of values containing data extracted from each 
block's header. These values will be copied to extra columns between
the first and second columns from the tabular sections of the input
file.
\n=back

The following pre-defined methods may be referred to by their names:

\n=over
\n=item * simple  : parses the 'simple' output from table2blocks
\n=item * default : parses the default output from table2blocks
\n=back

},
	});

    # Compile header parser
  PARSER: {
      $_ = $appconfig->header_parser;

      /^default$/ && do {
	  $appconfig->header_parser(\&default_header_parser);
	  last PARSER;
      };

      /^simple$/ && do {
	  $appconfig->header_parser(\&parse_simple_header);
	  last PARSER;
      };

      /^\s*sub\s*\{/ && do {
	  my $ref = eval "$_";
	  die "Failed to compile header parser $_:\n$@" if ($@);
	  $appconfig->header_parser($ref);
	  last PARSER;
      };

      die "Unnown header parser $_";
    }

    # Copy excluded columns to a hash
    $appconfig->define("_exclude" => { ARGCOUNT => ARGCOUNT_HASH, DEFAULT => { map { ($_,1) } @{$appconfig->exclude} } });

    # Compile output delimiter:
    # you can use Perl regexp escape codes like \t
    # to set the output column delimiter
    foreach my $stream (qw(input output)) {
	my $sep = $appconfig->get("${stream}_delimiter");
	$sep = eval qq{return "$sep"};
	$appconfig->set("${stream}_delimiter", $sep);
    }

    push(@ARGV,"-") if (!scalar @ARGV && ! -t STDIN); # Add STDIN to file list, if open
    return $appconfig;
}


# POD: start
# Documentation (use option -doc or --doc to see it!)
#
# AppConfig::AutoDoc can automatically extract Plain Old Documentation
# from within the caller program's, add descriptions of the options
# created by L<define> and do some pretty formatting for output.
# 
# Note that POD may be added anywhere in your program, thus allowing 
# the documentation for a program to be left side by side with the
# function's definition.

=head1 NAME

 block2table - convert block files to real text tables

=head1 SYNOPSIS

 # Simplest usage
 block2table file1 file2... > table.tsv

=head1 DESCRIPTION

The motivation for implementaing block2table and table2block is to
provide a way for users to annotate (i.e. add curated information)
to large sets of data in a text format without having to identify 
groups of related rows by themselves. 

A block file is any text file whose contents may be parsed as a table
with sets of related rows separated by headers lines. Examples of such
files include the output of BLAST when the option -m9 is used, or the
files generated by cleanblastclust. Another simple example:

 # 1; A
 1000  Species1  Data1
 1001  Species2  Data1

 # 2; B
 1000  Species3  Data2
 1001  Species4  Data1

In this example, the file is not a simple table because it contains
the header lines "# Section..." but if the content of such rows is
converted in a column like in this table

 1000  A  Species1  Data1
 1001  A  Species2  Data1
 1000  B  Species3  Data2
 1001  B  Species4  Data1

no data is lost but the data is now in a simple table format.

The example above shows exactly what blocks2table does but the
user may change its behaviour in several ways (see options below).

=head1 AUTHOR

 Robson Francisco de Souza

=cut
# POD: end
