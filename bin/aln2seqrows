#!/usr/bin/env perl

use FindBin;
use lib "$FindBin::RealBin/../perl/lib";
use Bio::AlignIO;
use warnings;
use strict;
our $VERSION = "0.99.95";

# Parse command line options
my $CONFIG = parse_configuration();

# Ouput field separator: compile escape characters
my $sep = $CONFIG->output_separator;
$sep = eval qq{return "$sep"};

# Process files
foreach my $file (@ARGV) {
    # Parser
    my $io = Bio::AlignIO->new(-format => $CONFIG->input_format, $file eq "-" ? (-fh => \*STDIN) : (-file => $file));

    # Process each alignment
    while (my $aln = $io->next_aln) {
	# Calculate length for sequence ID and start columns
	my $len = $CONFIG->scale ? 6 : 0;
	my $start_length = 0;
	foreach my $seq ($aln->each_seq) {
	    my $length = length(clean_id($CONFIG,$seq));
	    $len = ($len < $length ? $length : $len);
	    $length = length($seq->start);
	    $start_length = ($start_length < $length ? $length : $start_length);
	}

	# Scale
	if ($CONFIG->scale) {
	    print "#SCALE"." " x ($len-6);
	    print ${sep}." " x $start_length if ($CONFIG->polished);
	    print "${sep}1        ";
	    for (my $j=10; $j<=$aln->length; $j+=10) {
		printf("%-10d",$j);
	    }
	    print "\n";
	}

	# Cleaning ID and printing sequence
	foreach my $seq ($aln->each_seq) {
	    my $id = sprintf("%-${len}s",clean_id($CONFIG,$seq));
	    if ($CONFIG->polished) {
		print join($sep,$id,sprintf("%${start_length}s",$seq->start || 0),$seq->seq,$seq->end || 0),"\n";
	    } else {
		print join($sep,$id,$seq->seq),"\n";
	    }
	}

	# Add match line
	print  '#QUALITY'," " x ($len-7), $aln->match_line,"\n" if ($CONFIG->quality);
    }
}

# Terminate execution nicely
exit 0;

#####
# Add your subroutines below
#####

sub clean_id {
    my ($conf,$seq) = @_;
    my $id = $seq->id;
    return $id unless ($conf->clean);
    # HHsearch uses a non-standard format for subsequence interval annotation!
    # Extracting GI from NCBI sequence header
    my @id = ($id);
    if ($id =~ /^(\S+)\((\d+)\-(\d+):\d+\)\s/) {
	@id = ("_hhsensor_",$1,$2,$3);
    } else {
	@id = split(/[\|\-\:\/]/, $id);
    }
    $id = $id[0];
    if ($id[0] =~ /^(gi|iss|lcl|ref|_hhsensor_)$/ && defined($id[1])) {
       $id = $id[1];
       $seq->start($id[2]) if (defined $id[2] && $id[2] =~ /^\d+$/);
       $seq->end($id[3])   if (defined $id[3] && $id[2] =~ /^\d+$/);
    }
    # This is enough if user wants flat ids
    return $id if ($conf->flat || $conf->polished);
    # Adding HHsearch interval annotation
    if (defined $seq->start && defined $seq->end) {
	$id .= "/".$seq->start.'-'.$seq->end;
    } else {
	$id .= '/1-'.$seq->length unless ($conf->polished || $conf->flat);
    }
    return $id;
}

######
# Command line parsing, debugging and help messages
######

sub parse_configuration {
    # Parser definition
    use Application::Config qw(:argcount GetConfig);
    my $appconfig = GetConfig(# Options
			      'clean' => {
				  DEFAULT  => 0,
				  ALIAS    => 'c',
				  ARGCOUNT => ARGCOUNT_NONE,
				  SUMMARY  => "Keep only the GIs as sequence identifiers (use --noc to deactivate)",
			      },
			      'flat' => {
				  DEFAULT  => 1,
				  ALIAS    => 'n',
				  ARGCOUNT => ARGCOUNT_NONE,
				  SUMMARY  => "Do not add coordinates to sequence identifiers",
			      },
			      'input_format' => {
				  DEFAULT  => 'fasta',
				  ALIAS    => 'f|if',
				  ARGCOUNT => ARGCOUNT_ONE,
				  SUMMARY  => "Input alignment format",
			      },
			      'polished' => {
				  DEFAULT  => 0,
				  ALIAS    => 'p',
				  ARGCOUNT => ARGCOUNT_NONE,
				  SUMMARY  => "Print alignment limits around sequence",
			      },
			      'quality' => {
				  DEFAULT  => 0,
				  ALIAS    => 'q',
				  ARGCOUNT => ARGCOUNT_NONE,
				  SUMMARY  => "Add a column quality line, i.e. a row with single character descriptions of each column's conservation pattern. Codes are:\n\n * => all residues are identical\n : => strong match\n . => weak match",
			      },
			      'scale' => {
				  DEFAULT  => 0,
				  ALIAS    => 'l|s',
				  ARGCOUNT => ARGCOUNT_NONE,
				  SUMMARY  => "Add a scale row",
			      },
			      'output_separator' => {
				  DEFAULT  => ' ',
				  ALIAS    => 't|r',
				  ARGCOUNT => ARGCOUNT_ONE,
				  SUMMARY  => "Set string to separate identifiers (first column) from sequences (second or thrid column)",
			      },
	);

    # Check arguments
    push(@ARGV,"-") unless (scalar @ARGV);

    return $appconfig;
}

# POD: start
# Documentation (use option -doc or --doc to see it!)
#
# AppConfig::AutoDoc can automatically extract Plain Old Documentation
# from within the caller program's, add descriptions of the options
# created by L<define> and do some pretty formatting for output.
#
# Note that POD may be added anywhere in your program, thus allowing
# the documentation for a program to be left side by side with the
# function's definition.

=head1 NAME

 aln2seqrows -  convert alignments to seqrows format

=head1 SYNOPSIS

 # Typical usage: FASTA to seqrows

 aln2seqrows file1.fasta > file1.seqrows

 # Adding a scale bar and cleaning sequence names

 aln2seqrows -c -l file1.fasta > file1.seqrows

=head1 DESCRIPTION

This program converts any Bioperl supported alignment format to the
seqrows format used by Rotifer, the TASS toolkit and some NCBI BLAST
programs.

Bioperl currently support the following alignment formats:

arp bl2seq clustalw fasta emboss largemultifasta  maf mase meme
mega metafasta nexml pfammsf nexus phylip proda psi stockholm
po prodom selex xmfa

For an update list of Bioperl parsers, please refer to your Bioperl
installation.

=head1 AUTHOR

 Robson Francisco de Souza

=cut
# POD: end
