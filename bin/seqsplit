#!/usr/bin/env perl

$|=1; # Auto-flush buffers, i.e. print as fast as you can!

use File::Basename;
use FindBin;
use lib "$FindBin::RealBin/../perl/lib";
use strict;
use warnings;

# Parse command line options
my $CONFIG = parse_configuration();

# Change input record separator to the start of a FASTA header 
$/="\n>";

# Divide input
my $fc = 0; # Batch ID
my @a = (); # Sequence array
foreach my $file (@ARGV) {
    open(IN,"<$file") || die "Could not read $file\n";
    while (<IN>) {
	chomp;
	push(@a, $_);
	if (scalar(@a) == $CONFIG->seqs_per_file) {
	    my ($bn,$dir,$suffix) = fileparse($file, '\.[^\.]+$');
	    $bn .= ".${fc}".$suffix;
	    $bn = $CONFIG->name.".${fc}".$CONFIG->extension if (defined $CONFIG->name);
	    open(F,">$bn") || die "Could not create file $file.$fc\n";
	    print F ">" if ($fc); # First sequence of every file besides the first will miss the ">"
	    print F join("\n>",@a);
	    print F "\n" unless ($a[$#a] =~ /\n$/);
	    close(F);
	    @a = ();
	    $fc++;
	}
    }
    close(IN);
}

# Remaining sequences
if (scalar @a) {
    my ($bn,$dir,$suffix) = fileparse($ARGV[$#ARGV], '\.[^\.]+$');
    $bn .= ".${fc}".$suffix;
    $bn = $CONFIG->name.".${fc}".$CONFIG->extension if (defined $CONFIG->name);
    open(F,">$bn") || die "Could not create file $ARGV[$#ARGV].$fc\n";
    print F ">" if ($fc); # First sequence of every file besides the first will miss the ">"
    print F join("\n>",@a);
    print F "\n" unless ($a[$#a] =~ /\n$/);
    close(F);
}

# Terminate execution nicely
exit 0;

#####
# Subroutines

######
# Command line parsing, debugging and help messages
######

sub parse_configuration {
    # Parser definition
    use Application::Config qw(:argcount GetConfig);
    my $appconfig = GetConfig(# The argument to this method is a hash of hashes
			      # See perldoc AppConfig::autDoc for details
			      'extension'  => {
				  ALIAS    => 'b',
				  DEFAULT  => ".fasta",
				  ARGCOUNT => ARGCOUNT_ONE,
				  SUMMARY  => 'Add a suffix to output file names',
			      },

			      # Input processing options
			      'name'   => {
				  ALIAS    => 'n',
				  DEFAULT  => undef,
				  ARGCOUNT => ARGCOUNT_ONE,
				  SUMMARY  => 'Set basename for output files',
			      },

			      'seqs_per_file' => {
				  ALIAS    => 's', 
				  DEFAULT  => 1,
				  ARGCOUNT => ARGCOUNT_ONE,
				  SUMMARY  => 'Number of sequences per file',
			      },
	);

    # Check arguments
    push(@ARGV,"-") if(! -t STDIN);

    return $appconfig;
}

# POD: start
# Documentation (use option -doc or --doc to see it!)
#
# AppConfig::AutoDoc can automatically extract Plain Old Documentation
# from within the caller program's, add descriptions of the options
# created by L<define> and do some pretty formatting for output.
# 
# Note that POD may be added anywhere in your program, thus allowing 
# the documentation for a program to be left side by side with the
# function's definition.

=head1 NAME

 seqsplit - divide a stream of sequences into different files

=head1 SYNOPSIS

 # Default: allocate 200 sequences in files named file.fa.<number>
 seqsplit -s 200 file.fa

=head1 DESCRIPTION

This program splits the contents of sequence files into a number of
smaller files.

=head1 AUTHOR

 Robson Francisco de Souza

=cut
# POD: end
