#!/usr/bin/env perl

# LIBRARIES and PRAGMAS: start
use FindBin;
use lib "$FindBin::RealBin/../perl/lib";
use autodie qw(:all);
use strict;
use warnings;
use File::Basename;
use File::Which qw(which);
use Rotifer::Utils qw(aoa2tsv);
# LIBRARIES and PRAGMAS: end

# Parse configuration/options
my $CONFIG = &parse_configuration();

# MAIN PROGRAM: start

# Prepare base parameters
my %opts = (
    "-a" => &number_of_processors(),
    "test" => $CONFIG->test,
    %{ $CONFIG->advanced_options }
);

# Concatenate sequences
if (scalar(@ARGV) > 1 && $CONFIG->concatenate) { # Multiple inputs
    open(CONCAT,">${0}.$ENV{HOSTNAME}.$$.fa") || die "could not create file ${0}.$ENV{HOSTNAME}.$$.fa";
    foreach my $file (@ARGV) {
	open(my $ifh,"<$file");
	while (<$ifh>) {
	    chomp;
	    s/[\s\-]+//g if (!/^>/);
	    print CONCAT "$_\n";
	}
	close($ifh);
    }
    close(CONCAT);
    unlink("${0}.$ENV{HOSTNAME}.$$.stdin") if ( -f "${0}.$ENV{HOSTNAME}.$$.stdin");
    @ARGV=("${0}.$ENV{HOSTNAME}.$$.fa");
}

# Run blastclust for each file and set of parameters
foreach my $tpath (@ARGV) {
    my @repr   = ([ qw(score alncov nofclusters representatives)]);
    my $header = [ "ID" ];
    my $table  = []; my %index = ();
    foreach my $score (@{$CONFIG->score}) {
	# Reload similarity matrix if needed
	if ( -f "${tpath}.sim" ) {
	    $opts{"-r"} = "${tpath}.sim";
	} else {
	    $opts{"-s"} = "${tpath}.sim";
	}

	# Process score and length coverage
	if ($score =~ /^(\d+\.?\d*)\=(\d+\.?\d*)$/) {
	    $opts{"-S"} = $1;
	    $opts{"-L"} = $2;
	} else {
	    $opts{"-S"} = $score;
	    $opts{"-L"} = $score;
	}

	# Run blastclust
	my @cluster = blastclust($CONFIG->program_path, $tpath, %opts);
	next unless (scalar @cluster);
	push(@{$header}, "S$score");
	$header->[$#{$header}] =~ s/\=/L/;

	# Parse output
	my @representatives = ();
	for (my $i=0; $i<=$#cluster; $i++) {
	    push(@representatives, $cluster[$i]->[0]);
	    foreach my $id (@{$cluster[$i]}) {
		if (!exists $index{$id}) {
		    $index{$id} = scalar(@$table);
		    $table->[$index{$id}] = [ $id ];
		}
		push(@{ $table->[$index{$id}] }, $i);
	    }
	}
	push(@repr, [ $opts{"-S"}, $opts{"-L"}, scalar(@representatives), join(" ",@representatives) ]);
    }

    # Reorder clusters
    @$table = sort { my $i = 0; map { $i ||= $a->[$_] <=> $b->[$_] } 1..$#{$table->[0]}; $i } @$table;

    # Print
    my $bname = $CONFIG->prefix;
    my $bpath = fileparse($tpath, qw(.fa .fas .fasta .FASTA .faa));
    $bname = "${bname}.${bpath}" if (defined $bname && scalar @ARGV > 1);
    if (scalar @$table) {
	if (defined $bname) {
	    if (open(CLUS,">${bname}.clusters")) {
		print CLUS aoa2tsv($header, @$table);
		close(CLUS);
	    } else {
		warn "mblastclust couldn't create ${bname}.clusters for input file ${tpath}.";
	    }
	} else {
	    print aoa2tsv($header, @$table);
	}
    }
    if (defined $bname && scalar @repr > 1) {
	if (open(REPR,">${bname}.representatives")) {
	    print REPR aoa2tsv(@repr);
	    close(REPR);
	} else {
	    warn "mblastclust couldn't create ${bname}.representatives for input file ${tpath}.";
	}
    }

    # Clean up
    unlink("error.log") if ( -f "error.log");
    map { unlink($_) if ( -f $_ ) } glob("${tpath}.p??");
    unlink("${tpath}.sim") if ( -f "${tpath}.sim" && $CONFIG->delete );
}

# MAIN PROGRAM: end
exit 0;

###############
# Subroutines

sub number_of_processors {
    my $i=0;
    if ( -f "/proc/cpuinfo" ) {
	open(my $ci,"</proc/cpuinfo");
	while (<$ci>) {
	    $i++ if /^processor\s+:\s+(\d+)/
	}
    }
    return $i || 1;
}

# Run blastclust
sub blastclust {
    my ($blastclust, $file, %opts) = @_;

    # Prepare and run blastclust command
    my $test = delete $opts{test};
    my @cmd = ($blastclust, map { ($_, $opts{$_}) } keys %opts);
    push(@cmd, "-i", $file);
    if ($test) {
	print join(" ",@cmd),"\n";
	return ();
    }

    # Parse blastclust output
    my @cluster = ();
    open(my $o, "@cmd |");
    while (<$o>) {
	chomp;
	next if (/^\s*$/);
	if (/Finished processing|Start clustering/) {
	    print STDERR "$_\n";
	    next;
	}
	my $id = [ split(/\s+/) ];
	next unless (scalar @$id);
	push(@cluster, $id);
    }
    close($o);

    return @cluster;
}

# See perldoc AppConfig::AutoDoc for details
sub parse_configuration {
    use Application::Config qw(:argcount GetConfig);
    my $appconfig = GetConfig({},

			      "advanced_options" => {
				  ALIAS    => "ao",
				  ARGCOUNT => ARGCOUNT_HASH,
				  DEFAULT  => {},
				  SUMMARY  => "Advanced blastclust options.",
			      },

			      "prefix" => {
				  ALIAS    => "base|b",
				  ARGCOUNT => ARGCOUNT_ONE,
				  DEFAULT  => undef,
				  SUMMARY  => "Set output files basename or prefix. Use this option if you want to save both cluster assignments and the lists of representative sequences per clustering.",
			      },

			      "concatenate" => {
				  ALIAS    => "c",
				  ARGCOUNT => ARGCOUNT_NONE,
				  DEFAULT  => 1,
				  SUMMARY  => "When processing several FASTA files, concatenate these files and build unified clusters for all sequences.",
			      },

			      "delete" => {
				  ALIAS    => "d",
				  ARGCOUNT => ARGCOUNT_NONE,
				  DEFAULT  => 1,
				  SUMMARY  => "Delete the imilarity matrix file (.sim). Use --nodelete to keep this file.",
			      },

			      "program_path" => {
				  ALIAS    => "program|p",
				  ARGCOUNT => ARGCOUNT_ONE,
				  DEFAULT  => which("blastclust") || undef,
				  SUMMARY  => "Test mode: just show what would be done",
			      },

			      "score" => {
				  ALIAS    => "s",
				  ARGCOUNT => ARGCOUNT_LIST,
				  DEFAULT  => [ map { sprintf("%.1f",5*$_)."=0.8" } (3 .. 20) ],
				  SUMMARY  => "Control the set of parameters used for clustering: per residue score or percent identity (blastclust's -S option) and coverage (option -L). Two formats can be used to choose clustering parameters:

 -s <number>           : <number> is a numeric real value and score and coverage are set to the same value
 -s <score>=<coverage> : both <score> and <coverage> are real values.

Default parameters are: zero minimum coverage (0.0%) and from 15 to 100% identity (as seen below). 
",
			      },

			      "test" => {
				  ALIAS    => "t",
				  ARGCOUNT => ARGCOUNT_NONE,
				  DEFAULT  => 0,
				  SUMMARY  => "Test mode: just show what would be done",
			      },
	);
    die "Could not find blastclust's executable" unless (defined $appconfig->program_path);

    # Dump stdin to a temporary file
    if ( ! -t STDIN ) {
	open(INPUT,">${0}.$ENV{HOSTNAME}.$$.stdin");
	while (<STDIN>) {
	    print INPUT $_;
	}
	close(INPUT);
	if ( -s "${0}.$ENV{HOSTNAME}.$$.stdin" ) {
	    unshift(@ARGV,"${0}.$ENV{HOSTNAME}.$$.stdin");
	} else {
	    unlink("${0}.$ENV{HOSTNAME}.$$.stdin") if ( -f "${0}.$ENV{HOSTNAME}.$$.stdin");
	}
    }

    return $appconfig;
}


# POD: start
# Documentation (use option -doc or --doc to see it!)
#
# AppConfig::AutoDoc can automatically extract Plain Old Documentation
# from within the caller program's, add descriptions of the options
# created by L<define> and do some pretty formatting for output.
# 
# Note that POD may be added anywhere in your program, thus allowing 
# the documentation for a program to be left side by side with the
# function's definition.

=head1 NAME

 mblastclust - run many instances of blastclust and combine the results 

=head1 SYNOPSIS

 # Simplest case: use the default set of blastclust parameters
 mblastclust seq.fa > seq.table

=head1 DESCRIPTION

This is a simple script that runs blastclust many times, process the
output and dumps a tables describing the clusters each sequence was
assigned to by blastclust under different cutoffs.

=head1 AUTHOR

 Robson Francisco de Souza

=cut
# POD: end
