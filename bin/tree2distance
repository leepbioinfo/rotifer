#!/usr/bin/env perl

# LIBRARIES and PRAGMAS: start
use FindBin;
use lib "$FindBin::RealBin/../perl/lib";
use File::Basename;
use Bio::TreeIO;
use Bio::Tree::TreeUtils;
use strict;
use warnings;
# LIBRARIES and PRAGMAS: end

# Parse configuration/options
my $CONFIG = &parse_configuration();
my $tutil  = Bio::Tree::TreeUtils->new();

# Your code could replace the lines below!!!!!!!
# See the examples below on how to access the command line
# options from inside the program

# Header for flat mode
if ($CONFIG->output eq 'flat' && $CONFIG->header) {
    if (scalar @{ $CONFIG->add_basename }) {
	print join("\t",qw(name leaf1 taxon1 leaf2 taxon2 totalLength totalSteps distance steps)),"\n";
    } else {
	print join("\t",qw(leaf1 taxon1 leaf2 taxon2 totalLength totalSteps distance steps)),"\n";
    }
}

# MAIN PROGRAM: start
foreach my $file (@ARGV) {
    my $tio = new Bio::TreeIO(-format => $CONFIG->input, -file   => "<$file", %{ $CONFIG->inargs });

    # Tree name
    my $name = undef;
    if (defined $CONFIG->name) {
	$name = $CONFIG->name;
    } elsif (scalar @{ $CONFIG->add_basename }) {
	$name = fileparse($file, @{ $CONFIG->add_basename });
    }

  TREE: while (my $t = $tio->next_tree) {
      # Remove tree redundancy
      $tutil->remove_nodes($t, [ 'bootstrap', $CONFIG->threshold ]) if (defined $CONFIG->threshold);
      $tutil->remove_nodes($t, $CONFIG->remove) if (scalar @{ $CONFIG->remove });
      foreach my $code (@{ $CONFIG->process }) { # Process tree somehow and maybe ignore tree
	  if ($code =~ /mapnodes\,\S+/) {
	      my ($method, @args) = split(",",$code);
	      $tutil->map_node_labels($t, @args);
	  } else {
	      next TREE unless ($code->($t));
	  }
      }

      # Load leaves
      my @leaves = $t->get_nodes;
      if ($CONFIG->all) { # All but the root node
	@leaves = grep { $_ ne $t->get_root_node } map { $_->id($_->id || $_->internal_id); $_ } @leaves;
      } else {
	  @leaves = grep { $_->is_Leaf } @leaves;
      }
      @leaves = sort { $a->id cmp $b->id } @leaves;
      my ($dp, $nn) = $tutil->distances($t, $CONFIG->normalize, @leaves);

      # Post-processing of pairwise distances
      if ($CONFIG->select->[0] eq 'mintopo') {
	  ($dp, $nn) = select_minimum_topological_distance($t, \@leaves, $dp, $nn, $CONFIG->select);
      }

      # Print
    SWITCH: {
	$_ = $CONFIG->output;
	/^matrix$/i && do {
	    &print_full_matrix($t, $dp,\@leaves, $name);
	    &print_full_matrix($t, $nn,\@leaves, $name);
	    last;
	};
	/^upper$/i  && do {
	    &print_upper_matrix($t, $dp,\@leaves, $name);
	    &print_upper_matrix($t, $nn,\@leaves, $name);
	    last;
	};
	/^flat$/i   && do {
	    &print_flat($t, \@leaves, $name, $dp, $nn);
	    last;
	};
      }
  } # TREE: while (my $t = $tio->next_tree)
} # foreach my $file (@ARGV)

exit 0;
# MAIN PROGRAM: end

###############
# Subroutines

sub select_minimum_topological_distance {
    my ($tree, $leaves, $blength, $nnodes, $opts) = @_;

    # Indexing leaves
    my %names = (); map { my ($prop) = $opts->[1]->($leaves->[$_]); push(@{$names{$prop}}, $_) } 0..$#{$leaves};

    my $bestLength = [];
    my $bestNnodes = [];
    foreach my $iname (keys %names) {
	foreach my $jname (keys %names) {
	    next if ($iname eq $jname);
	    # Load and sort all values
	    my @all = ();
	    foreach my $i (@{ $names{$iname} }) {
		push(@all, map { [$i,$_] } @{ $names{$jname} });
	    }
	    @all = sort { $nnodes->[$a->[0]][$a->[1]] <=> $nnodes->[$b->[0]][$b->[1]] || $blength->[$a->[0]][$a->[1]] <=> $blength->[$b->[0]][$b->[1]] } @all;

	    # Pick the best ones
	    my $limit = scalar(@{ $names{$iname} }) < scalar(@{ $names{$jname} }) ? scalar(@{ $names{$iname} }) : scalar(@{ $names{$jname} });
	    my $count = 0; my %iloaded = (); my %jloaded = ();
	    while ($count != $limit) {
		my ($i,$j) = @{ shift(@all) };
		next if (exists $iloaded{$i} || exists $jloaded{$j});
		$bestLength->[$i][$j] = $blength->[$i][$j];
		$bestNnodes->[$i][$j] = $nnodes->[$i][$j];
		$bestLength->[$j][$i] = $blength->[$j][$i];
		$bestNnodes->[$j][$i] = $nnodes->[$j][$i];
		$iloaded{$i} = 1;
		$jloaded{$j} = 1;
		$count++;
	    }
	}
    }

    return ($bestLength, $bestNnodes);
}

sub bytaxon {
    my $node = shift;
    if ($node->has_tag("taxon")) {
	return ( $node->get_tag_values("taxon") )[0];
    } else {
	(my $id = $node->id) =~ s/\|\S+//;
	return $id;
    }
}

sub byid {
    my $node = shift;
    return $node->id;
}

sub print_full_matrix {
    my $tree   = shift;
    my $dists  = shift;
    my $leaves = shift;
    my $name   = shift;

    my @leafIDs = map { sprintf("%-6s",$_->id) } @{$leaves};
    if (defined $name) {
	print join("\t",$name,@leafIDs),"\n";
    } else {
	print join("\t"," ",@leafIDs),"\n";
    }
    for (my $k=0; $k<=$#leafIDs; $k++) {
	print "$leafIDs[$k]\t";
	for (my $l=0; $l<=$#leafIDs; $l++) {
	    if (defined $dists->[$k][$l]) {
		printf "%.4f\t",$dists->[$k][$l];
	    } else {
		print "NA\t";
	    }
	}
	print "\t$leafIDs[$k]";
	my $taxon = bytaxon($leaves->[$k]);
	print "\t$taxon" if (defined $taxon);
	print "\n";
    }
    print join("\t"," ",@leafIDs),"\n";

    return 1;
}

sub print_upper_matrix {
    my $tree   = shift;
    my $dists  = shift;
    my $leaves = shift;
    my $name   = shift;

    my @leafIDs = map { sprintf("%-6s",$_->id) } @{$leaves};
    if (defined $name) {
	print join("\t",$name,@leafIDs[1..$#leafIDs]),"\n";
    } else {
	print join("\t"," ",@leafIDs[1..$#leafIDs]),"\n";
    }
    for (my $k=0; $k<$#leafIDs; $k++) {
	print "$leafIDs[$k]\t";
	print "      \t"x($k);
	for (my $l=$k+1; $l<=$#leafIDs; $l++) {
	    if (defined $dists->[$k][$l]) {
		printf "%.4f\t",$dists->[$k][$l];
	    } else {
		print "NA\t";
	    }
	}
	print "$leafIDs[$k]\n";
    }

    return 1;
}

sub print_flat {
    my ($tree, $leaves, $name, $dists, $nodes) = @_;
    my $numInternalNodes = $tree->number_nodes - scalar($tree->get_leaf_nodes);
    $numInternalNodes = 0 if (scalar($tree->get_leaf_nodes) < 3);

    # Cache node data
    my @degree = (); my @leafIDs = (); my @taxon = (); my @desc = ();
    for (my $i=0; $i<=$#{$leaves}; $i++) {
	my $anc = $leaves->[$i]->ancestor;
	next unless (defined $anc);
	$degree[$i]  = scalar($anc->each_Descendent);
	$degree[$i]-- if ($anc eq $tree->get_root_node);
	$taxon[$i]   = &bytaxon($leaves->[$i]);
	$desc[$i]    = $leaves->[$i]->has_tag("leaf_taxa") ? ($leaves->[$i]->get_tag_values("leaf_taxa"))[0] : "";
	$leafIDs[$i] = sprintf("%-6s",$leaves->[$i]->id);
    }

    # Print distances
    for (my $k=0; $k<$#leafIDs; $k++) {
	for (my $l=$k+1; $l<=$#leafIDs; $l++) {
	    next unless (defined $dists->[$k][$l] || defined $nodes->[$k][$l]);
	    my @values = (sprintf("%.4f", $dists->[$k][$l]), $nodes->[$k][$l]);
	    @values = ($leafIDs[$k], $taxon[$k], $leafIDs[$l], $taxon[$l], $tree->total_branch_length, $numInternalNodes, @values, $degree[$k], $degree[$l], $desc[$k], $desc[$l]);
	    unshift(@values, $name) if (defined $name);
	    print join("\t", @values),"\n";
	}
    }

    return 1;
}

# Creating the configuration object
#
# The Application::Config library we are using here is just
# a wrapper that facilitates the use of AppConfig::AutoDoc.
#
# Because it depends on other libraries,Application::Config
# documentation is far from complete but contains the pointers
# to detailed documentation on its dependencies. The user should
# start reading "perldoc Application::Config" and them read the
# docs on each of its dependencies in the oerder below:
#
# Application::Config
#  AppConfig::AutoDoc
#   AppConfig
#    AppConfig::State
#
# The argument for new is an anonymous hash. This hash is
# used to control the bahaviour of AppConfig::AutoDoc. In
# This case, setting EXPAND_ARGV to 1 enables tranfers of
# all words in input files to @ARGV. EXPAND_STDIN does the
# same for text comming through pipelines (standard input)
#
# See perldoc AppConfig::AutoDoc for details
sub parse_configuration {
    use Application::Config qw(:argcount GetConfig);

    # Here I'm passing GetConfig a hash that serves both as an example and
    # prototype for the kind of argument expected by the method
    # "define" (see below) from AppConfig::AutoDoc.
    my $appconfig = GetConfig({ },

			      "all" => {
				  ALIAS    => "a",
				  ARGCOUNT => ARGCOUNT_NONE,
				  DEFAULT  => 0,
				  SUMMARY  => "Print distances for all nodes (including internal nodes)",
			      },

			      "add_basename" => {
				  ALIAS    => "b",
				  ARGCOUNT => ARGCOUNT_LIST,
				  DEFAULT  => [],
				  SUMMARY  => "Set a list of suffixes to remove from the tree's filename and add the resulting string to the output table",
			      },

			      "header" => {
				  ARGCOUNT => ARGCOUNT_NONE,
				  DEFAULT  => 1,
				  SUMMARY  => "Include header in output tables",
			      },

			      "input" => {
				  ALIAS    => "i",
				  ARGCOUNT => ARGCOUNT_ONE,
				  DEFAULT  => 'newick',
				  SUMMARY  => "Input tree(s) format",
			      },
			      'inargs' => {
				  ALIAS    => "ia",
				  ARGCOUNT => ARGCOUNT_HASH,
				  DEFAULT  => { -internal_node_id => 'bootstrap' },
				  SUMMARY  => "Input file format options",
			      },

			      "name" => {
				  ALIAS    => "n",
				  ARGCOUNT => ARGCOUNT_ONE,
				  DEFAULT  => undef,
				  SUMMARY  => "Tree name to add to output tables",
			      },

			      "normalize" => {
				  ALIAS    => "c",
				  ARGCOUNT => ARGCOUNT_NONE,
				  DEFAULT  => 0,
				  SUMMARY  => "Normalize branch lengths (divide by total tree length)",
			      },

			      "output" => {
				  ALIAS    => "o",
				  ARGCOUNT => ARGCOUNT_ONE,
				  DEFAULT  => 'flat',
				  SUMMARY  => "Output matrix format. Available formats are:\n\n=over\n\n=item * flat => table with three columns: first leaf identifier, second leaf identifier and distance\n\n=item * matrix => full square matrix with all pairwise distances\n\n=item * upper => upper matrix of pairwise distances\n\n=back",
			      },

			      "process" => {
				  ALIAS    => "p",
				  ARGCOUNT => ARGCOUNT_LIST,
				  DEFAULT  => [],
				  SUMMARY  => "Process trees with an arbitrary subroutine before calculation of distances. The user-defined subroutine receive a Bio::Tree::TreeI object as argument and distances are not calculated (i.e. the tree is ignored) if the subroutine returns false.",
			      },

			      "remove" => {
				  ALIAS    => "x",
				  ARGCOUNT => ARGCOUNT_LIST,
				  DEFAULT  => [],
				  SUMMARY  => "Remove nodes which are siblings of nodes connected to the ancestor by shorter branches. Two nodes are considered redundant when the output of a user provided subroutine (the argument to this method) returns the same value for both nodes.",
			      },

			      "select" => {
				  ALIAS    => "s",
				  ARGCOUNT => ARGCOUNT_LIST,
				  DEFAULT  => [ 'all' , 'byid' ],
				  SUMMARY  => "Set method to choose the best estimate for the distance between leaves. Options needs two arguments: method name and type of leaf identifier. Available identifiers:\n\n- byid : use leaf ID\n\n- bytaxon: use taxon (only available is leaf are named <taxon>|<unique leaf ID> or if a taxonomy tree is used to remove redundant leaves (see option --remove)\n\nAvailable methods:\n\n- all => all pairwise distances are printed\n\n- mintopo => given a target leaf and a set of equally named leaves, the distance is the shortest branch length distance between the target and the topologically closer (i.e. smallest number of internal nodes in the path) leaf in the set",
			      },

			      "threshold" => {
				  ALIAS    => "t",
				  ARGCOUNT => ARGCOUNT_ONE,
				  DEFAULT  => undef,
				  SUMMARY  => "Set threshold to remove unsupported branches. Note that removal of unsupported branches generates politomies.",
			      },
	);

    # Compiling subroutines
    my $ref = $appconfig->process;
    for (my $i=0; $i<=$#{$ref}; $i++) {
	next if ($ref->[$i] =~ /^mapnodes\,\S+/);
	my $compiled = $ref->[$i];
	$compiled = eval "$compiled";
	die "Error while compiling user provided subroutines:\n$@" if ($@);
	$ref->[$i] = $compiled;
    }

    # Compiling method to choose leaves
    if (scalar @{ $appconfig->select }) {
	my $compiled = $appconfig->select->[1] || 'byid';
	if ($compiled  =~ /sub\s*\{.+\}$/) {
	    $compiled = eval "$compiled";
	    die "Error while compiling user provided subroutines:\n$@" if ($@);
	    $appconfig->select->[1] = $compiled;
	} elsif ($compiled eq "byid") {
	    $appconfig->select->[1] = \&byid;
	} elsif ($compiled eq "bytaxon") {
	    $appconfig->select->[1] = \&bytaxon;
	}
    }

    # Adding STDIN to the list of files to parse
    unshift(@ARGV,"-") if (! -t STDIN);

    return $appconfig;
}


# POD: start
# Documentation (use option -doc or --doc to see it!)
#
# AppConfig::AutoDoc can automatically extract Plain Old Documentation
# from within the caller program's, add descriptions of the options
# created by L<define> and do some pretty formatting for output.
# 
# Note that POD may be added anywhere in your program, thus allowing 
# the documentation for a program to be left side by side with the
# function's definition.

=head1 NAME

 tree2distance - extract pairwise distances between leaves in a tree

=head1 SYNOPSIS

 Extract pairwise distances from a Newick formatted treefile and
 print to the default output format (three column table)

 tree2distance treefile1.nwk

 Print a squared matrix of pairwise distances from several files

 tree2distance -o matrix *.nwk

=head1 DESCRIPTION

This program calculates pairwise distances between leaves of a phylogenetic
tree by summing the lengths of the branches connecting every pair of leaves.

=head1 AUTHOR

 Robson Francisco de Souza

=cut
# POD: end
