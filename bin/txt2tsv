#!/usr/bin/env perl

# LIBRARIES and PRAGMAS: start
use FindBin;
use lib "$FindBin::RealBin/../perl/lib";
use strict;
use warnings;
# LIBRARIES and PRAGMAS: end

# Parse configuration/options
my $CONFIG = &parse_configuration();

# MAIN PROGRAM: parse input
my %H = (); # Empty hash to store values across rows
my $end        = $CONFIG->end_block;
my @infilters  = @{$CONFIG->input_filter};
my $p          = $CONFIG->parser();
my $start      = $CONFIG->start_block();
my %k = (); my @t = (); my $row = {};
ROW: while (<>) {
	chomp;

	# Start block
	if (defined $start && $start->()) {
		#print join(" ","DEBUG","START",map { ($_,$row->{$_}) } sort keys(%$row)),"\n";
		push(@t,$row) if (!defined($end) && scalar(keys %$row));
		$row = {};
	}

	# Input rows filter
	foreach my $filter (@infilters) {
		next ROW unless $filter->();
	}

	# Parse data
	my %r = $p->();
	while (my ($a,$b) = each %r) {
		$k{$a} = 1;
		$row->{$a} = $b;
	}

	# End block
    if (defined($end) && $end->()) {
		#print join(" ","DEBUG","END",map { ($_,$row->{$_}) } sort keys(%$row)),"\n";
		push(@t,$row);
		$row = {};
    }
}

# Last block
if (defined($start) && !defined($end) && scalar(keys %$row)) {
	#print join(" ","DEBUG","FINAL",map { ($_,$row->{$_}) } sort keys(%$row)),"\n";
	push(@t,$row);
}

# Print table
my @F = ();
my @outfilters = @{$CONFIG->output_filter};
my @k = sort keys(%k);
print join("\t",@k),"\n";
OUT: foreach my $e (@t) {
    @F = map { $e->{$_} || "-" } @k;
    foreach my $filter (@outfilters) {
        next OUT unless $filter->();
    }
	print join("\t",@F),"\n";
}

# MAIN PROGRAM: end
exit 0;

###############
# Subroutines

# Creating the configuration object
#
# The Application::Config library we are using here is just
# a wrapper that facilitates the use of AppConfig::AutoDoc.
#
# Because it depends on other libraries,Application::Config
# documentation is far from complete but contains the pointers
# to detailed documentation on its dependencies. The user should
# start reading "perldoc Application::Config" and them read the
# docs on each of its dependencies in the oerder below:
#
# Application::Config
#  AppConfig::AutoDoc
#   AppConfig
#    AppConfig::State
#
# The argument for new is an anonymous hash. This hash is
# used to control the bahaviour of AppConfig::AutoDoc. In
# This case, setting EXPAND_ARGV to 1 enables tranfers of
# all words in input files to @ARGV. EXPAND_STDIN does the
# same for text comming through pipelines (standard input)
#
# See perldoc AppConfig::AutoDoc for details
sub parse_configuration {
    use Application::Config qw(:argcount GetConfig);
    # Here I'm passing GetConfig a hash that serves both as an example and
    # prototype for the kind of argument expected by the method
    # "define" (see below) from AppConfig::AutoDoc.
    my $appconfig = GetConfig(#
	    "end_block" => {
		  ACTION   => \&compile,
		  ALIAS    => "e",
		  ARGCOUNT => ARGCOUNT_ONE,
		  DEFAULT  => undef,
		  SUMMARY  => "Boolean anonymous subroutine to identify the last row in a data block. Should return True (1) or False (0).",
	    },

	    "input_filter" => {
		  ACTION   => \&compile,
		  ALIAS    => "f|filter",
		  ARGCOUNT => ARGCOUNT_LIST,
		  DEFAULT  => [],
		  SUMMARY  => "Array of anonymous subroutines to filter rows in the input stream. Each subroutine should return True (1, keep row) or False (0, drop row).",
	    },

	      "parser" => {
		  ACTION   => \&compile,
		  ALIAS    => "p",
		  ARGCOUNT => ARGCOUNT_ONE,
		  DEFAULT  => undef,
		  SUMMARY  => "Anonymous subroutine to parse data rows. This subroutine should return an array with an even number of values or a hash. Each pair in the array should correspond to (first) a column name and (second) the value for that column in the current data block.",
	      },

	    "output_filter" => {
		  ACTION   => \&compile,
		  ALIAS    => "fo",
		  ARGCOUNT => ARGCOUNT_LIST,
		  DEFAULT  => [],
		  SUMMARY  => "Array of anonymous subroutines to filter rows in the output table. Each subroutine should return True (1, keep row) or False (0, drop row).",
	    },

	      "start_block" => {
		  ACTION   => \&compile,
		  ALIAS    => "s",
		  ARGCOUNT => ARGCOUNT_ONE,
		  DEFAULT  => undef,
		  SUMMARY  => "Boolean anonymous subroutine to identify the first row in a data block. Should return True (1) or False (0).",
	      },
	);

	die "Usage: txt2tsv -p code [-s code | -e code] file.txt"
		unless (defined $appconfig->parser && (defined $appconfig->start_block || $appconfig->end_block));
	return $appconfig;
}

sub compile() {
	my ($appstate, $name, $value) = @_;
	return 1 if (ref($value) eq "CODE");
	my $ref = $value;
	if (-f "$ref") {
		open(RULE,"<$ref") || die "Could not load rules from file $ref";
		$ref = join(" ",map { chomp; $_ } grep { !/^\#/ } <RULE>);
		close(RULE);
	}
	$ref = "sub {$ref}" if ($ref !~ /\s*sub\s*\{.+\}\s*$/);
	$ref = eval "$ref";
	die "Error while compiling output filter $value\n$@" if ($@);
	if ($appstate->_argcount($name) == ARGCOUNT_LIST) {
		my $arrayref = $appstate->get($name);
			$arrayref->[$#{$arrayref}] = $ref;
	} elsif ($appstate->_argcount($name) == ARGCOUNT_ONE) {
		$appstate->set($name, $ref);
	}
}


# POD: start
# Documentation (use option -doc or --doc to see it!)
#
# AppConfig::AutoDoc can automatically extract Plain Old Documentation
# from within the caller program's, add descriptions of the options
# created by L<define> and do some pretty formatting for output.
# 
# Note that POD may be added anywhere in your program, thus allowing 
# the documentation for a program to be left side by side with the
# function's definition.

=head1 NAME

 txt2tsv - Parse generic text to tabular format

=head1 SYNOPSIS

 txt2tsv -s '/dn:/' -p '/ *([^:]): *(.+)/' file.txt > table.tsv

=head1 DESCRIPTION

This program was designed as a generic template to plugin parsers
for generic text. The parser is the argument of the obligatory -p
command line option and should extract data from text and return
it as an array of pairs of values. The first value in a pair is
always the output column name and the second the corresponding value.

As mentioned, the -p argument is alwayes mandatoryi, as well as either
the -s, for the start of a data block, or the -e option, which identifies
the end of a data block.

=head1 AUTHOR

 Robson Francisco de Souza

=cut
# POD: end
