#!/usr/bin/env perl

# LIBRARIES and PRAGMAS: start
use FindBin;
use lib "$FindBin::RealBin/../perl/lib";
use strict;
use warnings;
# LIBRARIES and PRAGMAS: end

# Parse configuration/options
my $CONFIG = &parse_configuration();

# Your code could replace the lines below!!!!!!!
# See the examples below on how to access the command line
# options from inside the program

# MAIN PROGRAM: start

# Parse input
my $sep     = $CONFIG->input_separator;
my $lastCol = 0;
my $hash    = ();
my %cols    = ();
my @header  = ();
while (<>) {
    chomp;
    my @F = split(/$sep/);
    if ($CONFIG->header && !scalar @header) {
	@header = @F;
	next;
    }
    my $row = $F[$CONFIG->target];
    my $col = join("\t",map { $F[$_] } @{$CONFIG->pivot});
    $hash->{$row}{$col} = [ @F ];
    $cols{$col} = 1;
    $lastCol = $#F if ($#F > $lastCol);
}

# Change column names
if (scalar @{$CONFIG->setheader}) {
    @header = map { $CONFIG->setheader->[$_] || $header[$_] || "column:$_" } 0..$lastCol;
    $CONFIG->header(1);
}

# Columns and rows
my @rows = keys %$hash;
my @cols = keys %cols;
if ($CONFIG->symmetric) {
    %cols = map { ($_,1) } (@cols, @rows);
    @cols = keys %cols;
    @rows = @cols;
}

# Sort cell identifiers (first two columns)
@cols = sort { ($a =~ /^\-?\d+\.?\d*e?[\-\+]?\d*$/ && $b =~ /^\-?\d+\.?\d*e?[\-\+]?\d*$/) ? $a <=> $b : $a cmp $b } @cols;
@rows = sort { ($a =~ /^\-?\d+\.?\d*e?[\-\+]?\d*$/ && $b =~ /^\-?\d+\.?\d*e?[\-\+]?\d*$/) ? $a <=> $b : $a cmp $b } @rows;
#print join("\t",@rows,"\t",@cols),"\n";

# Print matrix(ces)
$sep = $CONFIG->output_separator;
my $empty = $CONFIG->empty;
for (my $i=0; $i<=$lastCol; $i++) {
    next if ($CONFIG->target == $i || grep { $i == $_ } @{$CONFIG->pivot});
    next if (scalar(@{ $CONFIG->include }) && !exists $CONFIG->_include->{$i});
    next if (exists $CONFIG->_exclude->{$i});
    my @blockname = map { $header[$i] || "column:$i" } 0..$#{$CONFIG->pivot};
    print join($sep, @blockname, @cols[$CONFIG->upper..$#cols]),"\n"; # Header

    for (my $j=0; $j<=$#rows; $j++) {
	next if ($CONFIG->upper && $j == $#rows);
	print "$rows[$j]$sep";
	for (my $k=0; $k<=$#cols; $k++) {
	    next if ($CONFIG->upper && $k == 0);
	    my $value = "$empty$sep";
	    if (!$CONFIG->upper || $j<$k) {
		if (defined $hash->{ $rows[$j] }{ $cols[$k] }[$i]) {
		    $value = $hash->{$rows[$j]}{$cols[$k]}[$i].$sep;
		} elsif ($CONFIG->symmetric && exists $hash->{ $cols[$k] } && defined $hash->{ $cols[$k] }{ $rows[$j] }[$i]) {
		    $value = $hash->{$cols[$k]}{$rows[$j]}[$i].$sep;
		}
	    }
	    print $value;
	}
	print "\n";
    }
    print "\n" if ($i<$lastCol);
}

exit 0;
# MAIN PROGRAM: end

###############
# Subroutines

# Creating the configuration object
sub parse_configuration {
    use Application::Config qw(:argcount GetConfig);
    # Here I'm passing GetConfig a hash that serves both as an example and
    # prototype for the kind of argument expected by the method
    # "define" (see below) from AppConfig::AutoDoc.
    my $appconfig = GetConfig({},

			      # Now, some examples of options you can create
			      "empty" => {
				  ALIAS    => "e",
				  ARGCOUNT => ARGCOUNT_ONE,
				  DEFAULT  => "-",
				  SUMMARY  => "Character to print in empty cells.",
			      },

			      "exclude" => {
				  ALIAS    => "x",
				  ARGCOUNT => ARGCOUNT_LIST,
				  DEFAULT  => [],
				  SUMMARY  => "Do not generate matrices for these columns.",
			      },

			      "include" => {
				  ALIAS    => "i",
				  ARGCOUNT => ARGCOUNT_LIST,
				  DEFAULT  => [],
				  SUMMARY  => "Generate matrices for these columns ONLY. By default, all columns from the third to the last are used. Option --exclude takes precedence ver this list.",
			      },

			      "input_separator" => {
				  ALIAS    => "s",
				  ARGCOUNT => ARGCOUNT_ONE,
				  DEFAULT  => "\t",
				  SUMMARY  => "Column separator in input",
			      },

			      "header" => {
				  ALIAS    => "y",
				  ARGCOUNT => ARGCOUNT_NONE,
				  DEFAULT  => 0,
				  SUMMARY  => "Input table's first row is a header line.",
			      },

			      "output_separator" => {
				  ALIAS    => "r",
				  ARGCOUNT => ARGCOUNT_ONE,
				  DEFAULT  => "\t",
				  SUMMARY  => "Column separator in input",
			      },

			      "pivot" => {
				  ALIAS    => "p",
				  ARGCOUNT => ARGCOUNT_LIST,
				  DEFAULT  => [ 1 ],
				  SUMMARY  => "Select pivot column.",
			      },

			      "setheader" => {
				  ALIAS    => "sh",
				  ARGCOUNT => ARGCOUNT_LIST,
				  DEFAULT  => [],
				  SUMMARY  => "Set or change input column names. This option may override data loaded using the option --header.\nUsage:\n\n tpivot -sh family -sh weight ...",
			      },

			      "symmetric" => {
				  ALIAS    => "sym|m",
				  ARGCOUNT => ARGCOUNT_NONE,
				  DEFAULT  => 0,
				  SUMMARY  => "Assume matrix is symmetric and the target and pivot columns both contain column and row names.",
			      },

			      "target" => {
				  ALIAS    => "t",
				  ARGCOUNT => ARGCOUNT_ONE,
				  DEFAULT  => 0,
				  SUMMARY  => "Select target column.",
			      },

			      "upper" => {
				  ALIAS    => "u",
				  ARGCOUNT => ARGCOUNT_NONE,
				  DEFAULT  => 0,
				  SUMMARY  => "Print upper triangular matrix instead of full matrix.",
			      },
	);

    # List to hash
    $appconfig->define("_exclude" => { ARGCOUNT => ARGCOUNT_HASH, DEFAULT => { map { ($_-3,1) } @{$appconfig->exclude} } });
    $appconfig->define("_include" => { ARGCOUNT => ARGCOUNT_HASH, DEFAULT => { map { ($_-3,1) } @{$appconfig->include} } });

    # Can only print upper matrices when they are symmetric
    $appconfig->set("upper", 0) if (!$appconfig->symmetric);

    return $appconfig;
}


# POD: start
# Documentation (use option -doc or --doc to see it!)
#
# AppConfig::AutoDoc can automatically extract Plain Old Documentation
# from within the caller program's, add descriptions of the options
# created by L<define> and do some pretty formatting for output.
# 
# Note that POD may be added anywhere in your program, thus allowing 
# the documentation for a program to be left side by side with the
# function's definition.

=head1 NAME

 tpivot - convert unique values in selected columns to headers of an
          output matrix

=head1 SYNOPSIS

 tpivot abc.txt

=head1 DESCRIPTION

This program turns B<sets of three of columns> from an input table into
a B<sparse matrix>, where the values of the B<target> column are used as row 
names, values of the B<pivot> column become the matrix's new column names
and the  column is used to set the values of each cell.

The output matrix is B<sparse> because every pair of values from the
first and second columns that is not found in the input table will
correspond to an empty cell in the output table. 

By default, the script uses the first column as the target column and the
second column as the pivot. All other columns are treated as value columns
and one matrix may be generated from each of the value columns.

=head2 Example

Using default parameters, the input table

 rowID   COLUMN:2   COLUMN:3   COLUMN:4   COLUMN:5
 row1    column1    a11        b11        c11
 row1    column2    a12        b12        c12
 row2    column1    a21        b22        c22
 row2    column2    a22        b22        c22

will generate matrices of the form

 COLUMN:3	column1	column2
 row1    	a11    	a12    
 row2    	a21    	a22    
        	       	       
 COLUMN:4	column1	column2
 row1    	b11    	b12    
 row2    	b22    	b22    
        	       	       
 COLUMN:5	column1	column2
 row1    	c11    	c12    
 row2    	c22    	c22    

=head1 AUTHOR

 Robson Francisco de Souza

=cut
# POD: end
