#!/usr/bin/env python3

import os
import sys
sys.path.insert(0, '/home/kaihami/mymodules')

import rotifer.core.cli as corecli
from rotifer.tools.search import search as rsearch
import rotifer.table.table as tb
import rotifer.core.functions as rcf

from sqlalchemy import create_engine, MetaData
from clickhouse_sqlalchemy import make_session

from collections import defaultdict
import re
import time
__version__ = '0.31'
__authors__ = 'Gilberto Kaihami; Aureliano Guedes'
__rdoc__='''
DESCRIPTION:
Parallel HMMScan
'''

# New
#
# Version 0.30
# Added clickhouse option
# Now the result can automatically be parsed and inserted in the DB.
# The nr database with 190M sequences should result inside the DB 60GB.
# TODO insert big file option and split of the big file

################
### Function ###
################

### Arguments
def parse_cli():
    parser = corecli.parser(description = 'Parallel HMMScan')
    parser.add(dest = 'fasta',
               helper = 'Input fasta file',
               action = corecli.action.autoload,
               duplicates = False,
               nargs = '*')

    parser.add('-db',
               '--database',
               dest = 'db',
               helper = 'HMM database (Default: Pfam)',
               default = ':db.models.pfam')

    # parser.add( long_arg = '--output_format',
    #             short_arg = '-of',
    #             dest = 'output',
    #             default = 'raw',
    #             arg_type = str,
    #             helper = 'Output format (default: raw, )',
    #             action = "store"
    #             )

    parser.add('-t',
               '--threads',
               dest = 'threads',
               helper = 'Number of threads (default = 8)',
               default = 8,
               arg_type = int)

    parser.add( long_arg = '--outputargs',
                short_arg = '-oa',
                dest = 'outputargs',
                default = [],
                arg_type = str,
                helper = '''Advanced output argument
               -oa parse:[table]
               -oa noinsert2db
               -oa insert2db''',

                action = 'append'
                )

    args = parser.parse_args()

    return(args)

def fasta2df(fasta):
    return tb.fasta2df(fasta)

def df2fasta(df):
    df['out'] = df.apply(lambda row: ['>' + row['Header'], row['Seq']],1)
    return rcf._flatten(list(df['out'].values))

def strlist2dict(ls_of_str, output = 'str'):
    '''
    convert a list with strings in the format : or =
    The input could be:
    'KEY':'VALUE' or 'KEY'
    if only key is passed the value is set to 1
    ----
    select if output is str or list

    '''
    if output == 'str':
        dc = defaultdict(str)
        for element in ls_of_str:
            splitted = re.split('[:|=]', element)
            if len(splitted) == 1:
                dc[splitted[0]] = 1
            if len(splitted) == 2:
                dc[splitted[0]] = splitted[1]
    else:
        dc = defaultdict(list)
        for element in ls_of_str:
            splitted = re.split('[:|=]', element)
            if len(splitted) == 1:
                dc[splitted[0]].append(1)
            if len(splitted) == 2:
                dc[splitted[0]].append(splitted[1])

    return dc

if __name__ == '__main__':

    args = parse_cli()

    threads = 8

    # db = ':db.models.pfam'

    outputargs = defaultdict(str)
    if args.outputargs:
        outputargs = strlist2dict(args.outputargs)

    if 'parse' in outputargs.keys():
        # Go2table and insert2db
        #
        # sys.stderr.write('# Loading fasta\n')
        s = time.time()
        df = fasta2df(args.fasta)
        # sys.stderr.write(f'# Loaded in {time.time()-s}\n')
        accs = list(df['ID'].values)

        # Check db
        uri = 'clickhouse://default:@localhost/rotifer'
        engine = create_engine(uri)
        session = make_session(engine)
        metadata = MetaData(bind=engine)
        metadata.reflect(bind = engine)


        Columns = ['sequence', 'domain',
                   'start', 'end', 'evalue',
                   'qstart','qend', 'qcov',
                   'iteration', 'score']

        print('\t'.join(Columns))
        # Need to split in 10k
        n = 10000
        sub_accs = [accs[x:x+n] for x in range(0, len(accs), n)]

        for sub in sub_accs:
            # sys.stderr.write(f'# Sub {sub[0]}\n')

            accs_formated = ','.join(["'"+ x+ "'" for x in sub])
            s = time.time()
            consulted = rcf._flatten([list(x) for x in engine.execute(f'SELECT DISTINCT sequence from Pfam_32_0 where sequence in ({accs_formated}) ORDER BY sequence')])
            acc_not_in_db = [y for y in sub if y not in consulted
                         ]

            # sys.stderr.write(f'# Loaded acc not in db in {time.time()-s}\n')
            if 'noinsert2db' in outputargs.keys():
                insertdb = False
            else:
                insertdb = True

            df_selected = df[df['ID'].isin(acc_not_in_db)]

            # Print already found

            s = time.time()
            res = engine.execute(f'Select * from Pfam_32_0 where sequence in ({accs_formated})').fetchall()
            # sys.stderr.write(f'# Loaded res in {time.time()-s}\n')
            if res:
                for e in res:
                    sequence, domain, start, end, evalue, qstart, qend,\
                    qcov, iteration,score = e
                    print(f'{sequence}\t{domain}\t{start}\t{end}\t{evalue:.2e}\t{qstart:.1f}\t{qend}\t{qcov}\t{iteration}\t{score:.2f}')

            if not df_selected.empty:
                fa = df2fasta(df_selected)

                r = rsearch(fa, methods = {'hmmscan': {'db': args.db,
                                                          'threads': args.threads,
                                                          'of': 'list'
                                                          }})
                r.parser(hmmscan = {'of': 'table',
                                        'insert2db': insertdb,
                                        'user': 'rotifer',
                                        'table': 'Pfam_32_0'})

                toprint = r.hmmscan_parsed.apply(lambda row:
                    f'{row.sequence}\t{row.domain}\t{row.start}\t{row.end}\t{row.evalue:.2e}\t{row.qstart:.1f}\t{row.qend}\t{row.qcov}\t{row.iteration}\t{row.score:.2f}', 1)

                for row in toprint.values:
                    print(row)


    else:
        rsearch(args.fasta, methods = {'hmmscan': {'db': args.db,
                                                      'threads': args.threads,
                                                      'of': 'stdout'
                                                      }})

    if args.fun:
        sys.stderr.write(args.fun.fun)
