#!/usr/bin/env python3

# Python core
import os
import re
import sys

# Rotifer libraries
sys.path.insert(0, os.path.join(os.path.dirname(os.path.dirname(os.path.realpath(sys.argv[0]))), "lib"))

# Required libraries
import datetime
from Bio import SeqIO

__version__ = 0.1
__authors__ = 'Robson F. de Souza'
__rdoc__ = '''
DESCRIPTION:
Index DNA and/or protein sequences using Bio.SeqIO.

This script processes files with repeated sequence identifiers, a feature not supported by
makeblastdb and/or esl-sfetch.
'''

# Check for duplicates and extend repeated IDs
def manage_duplicates(r):
    global h
    if r in h:
        h[r] += 1
        return(f'{r}:__:{h[r]}')
    h[r] = 0
    return r

def parse_cli():
    import argcomplete
    import rotifer.core.cli as corecli
    from rotifer.core.cli import action
    parser = corecli.parser(description = 'Index and fetch sequence files')

    parser.add(long_arg = '--duplicates',
                short_arg = '-d',
                nargs = 1,
                dest = 'duplicates',
                helper = 'Print a list of duplicated sequences found in the input file.',
                default = None)

    parser.add(long_arg = '--informat',
                short_arg = '-if',
                dest = 'informat',
                default = 'fasta',
                helper = 'Input file format (default: fasta). See option Bio.SeqIO for other formats.')

    parser.add(long_arg = '--outformat',
                short_arg = '-of',
                dest = 'outformat',
                default = 'fasta',
                helper = 'Output file format (default: fasta). See option Bio.SeqIO for other formats.')

    parser.add(long_arg = '--database',
                short_arg = '-db',
                dest = 'database',
                nargs = 1,
                default = '.rotiferdb.sqlite',
                helper = 'Bio.SeqIO index database. See option Bio.SeqIO.index_db for a list of supported formats.')

    parser.add(long_arg = 'sequence',
                dest = 'database',
                nargs = 1,
                default = None,
                helper = 'Bio.SeqIO index database. See option Bio.SeqIO.index_db for a list of supported formats.')

    # Parse
    argcomplete.autocomplete(parser)
    args = parser.parse_args()

    # Return command line arguments
    return args

if __name__ == '__main__':
    h = {} # This dictionary will be used as a registry for duplicated sequences

    # Open input stream: database is created if it doesn't exist
    io = SeqIO.index_db(args.database, args.filename, args.input_format, key_function=manage_duplicates);

    # Retrieve sequences
    for s in seqids:
        SeqIO.write(io[s], args.output, args.output_format)

    # Exit cleanly
    exit(0)
