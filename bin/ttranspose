#!/usr/bin/env perl

# LIBRARIES and PRAGMAS: start
use FindBin;
use lib "$FindBin::RealBin/../perl/lib";
use strict;
use warnings;
# LIBRARIES and PRAGMAS: end

# Parse configuration/options
my $CONFIG = &parse_configuration();

# Your code could replace the lines below!!!!!!!
# See the examples below on how to access the command line
# options from inside the program

# MAIN PROGRAM: start

# Load
my $maxNofCols = 0;
my @table      = ();
my $insep = $CONFIG->input_delimiter;
foreach my $file (@ARGV) {
    open(TABLE, "<$file") || die "Could not open file $file";
    while (<TABLE>) {
	chomp;
	my @F = split(/$insep/);
	push(@table, [ @F ]);
	$maxNofCols = $maxNofCols < $#F ? $#F : $maxNofCols;
    }
}

# Transpose 
foreach my $col (0..$maxNofCols) {
    print join($CONFIG->output_delimiter, map { defined $table[$_]->[$col] ? $table[$_]->[$col] : $CONFIG->empty } (0..$#table)),"\n";
}

exit 0;
# MAIN PROGRAM: end

###############
# Subroutines

sub parse_configuration {
    use Application::Config qw(:argcount GetConfig);
    # Here I'm passing GetConfig a hash that serves both as an example and
    # prototype for the kind of argument expected by the method
    # "define" (see below) from AppConfig::AutoDoc.
    my $appconfig = GetConfig({ },

			      # Output options
			      'empty' => {
				  DEFAULT  => '',
				  ARGCOUNT => ARGCOUNT_ONE,
				  ALIAS    => 'e',
				  SUMMARY  => "string to fill empty cells",
			      },
			      'output_delimiter' => {
				  DEFAULT  => "\t",
				  ARGCOUNT => ARGCOUNT_ONE,
				  ALIAS    => 'r|output',
				  SUMMARY  => "column delimiter for output table",
			      },
			      'input_delimiter' => {
				  DEFAULT  => "\t",
				  ARGCOUNT => ARGCOUNT_ONE,
				  ALIAS    => 's|delimiter',
				  SUMMARY  => "column delimiter of input files",
			      },
	);

    # Compile output delimiter:
    # you can use Perl regexp escape codes like \t
    # to set the output column delimiter
    foreach my $stream (qw(input output)) {
	my $sep = $appconfig->get("${stream}_delimiter");
	$sep = eval qq{return "$sep"};
	$appconfig->set("${stream}_delimiter", $sep);
    }

    # Use STDIN
    push(@ARGV, '-') unless ( -t STDIN || scalar(grep { $_ eq "-" } @ARGV) );

    return $appconfig;
}


# POD: start
# Documentation (use option -doc or --doc to see it!)
#
# AppConfig::AutoDoc can automatically extract Plain Old Documentation
# from within the caller program's, add descriptions of the options
# created by L<define> and do some pretty formatting for output.
# 
# Note that POD may be added anywhere in your program, thus allowing 
# the documentation for a program to be left side by side with the
# function's definition.

=head1 NAME

 ttranspose - transpose text tables

=head1 SYNOPSIS

 # Simplest usage assumes TAB separated columns

 ttranspose table.txt

=head1 DESCRIPTION

This transposes tables, i.e. exchange columns and rows.

=head1 AUTHOR

 Robson Francisco de Souza

=cut
# POD: end
