#!/usr/bin/env perl

# LIBRARIES and PRAGMAS: start
use FindBin;
use lib "$FindBin::RealBin/../perl/lib";
use strict;
use warnings;
# LIBRARIES and PRAGMAS: end

# Parse configuration/options
my $CONFIG = &parse_configuration();

# Your code could replace the lines below!!!!!!!
# See the examples below on how to access the command line
# options from inside the program

# MAIN PROGRAM: start
my $SEP = $CONFIG->input_delimiter;
foreach my $file (@ARGV) {
    open(FILE,"<$file") || die "Could not open file $file";
    while (<FILE>) {
	chomp;
	next if /^\s*$/;
	#print "\n$_\n";
	my @F = map { if ($CONFIG->unpad) { s/^\s+//; s/\s+$// }; $_ } split(/$SEP/);
	my $query = $F[5] || "$F[0]:$F[7]";
	my $column = defined $CONFIG->column ? $CONFIG->column : $#F;
	my @a = ();
	if ($F[$column]!~/-\>|\<-/) {
	    @a = [ @F[0..1] ];
	} else {
	    @a = map { s/-\>|\<-//g; /^(\S+\.\d+|\d+)_+(\S+)/; [$1,$2] } grep { length } split(/-\>|\<-|\|+/,$F[$column]);
	}
	@a = grep { defined $_->[1] && $_->[1]!~/^\s*$/ && $_->[1] ne "?" && $_->[1] ne "?*" && $_->[1] ne "?" && $_->[1] ne "-" } @a;
	next unless (scalar @a);
	if ($CONFIG->outformat eq 'arch') {
	    print join("\n",map { $_->[1]=~s/\*//g;
				  if ($CONFIG->_rename) {
				      my @dom = map { exists $CONFIG->rename->{$_} ? $CONFIG->rename->{$_} : $_ } split(/\+/,$_->[1]);
				      $_->[1] = join("+",@dom);
				  }
				  if ($CONFIG->include_operon_query) {
				      join($CONFIG->output_delimiter,@{$_}, $query, $F[7]);
				  } else {
				      join($CONFIG->output_delimiter,@{$_});
				  }
		       } @a),"\n";
	} else {
	    print STDERR "ERROR: output format not supported!";
	}
    }
    close(FILE);
}

exit 0;
# MAIN PROGRAM: end

###############
# Subroutines

# Creating the configuration object
#
# The Application::Config library we are using here is just
# a wrapper that facilitates the use of AppConfig::AutoDoc.
#
# Because it depends on other libraries,Application::Config
# documentation is far from complete but contains the pointers
# to detailed documentation on its dependencies. The user should
# start reading "perldoc Application::Config" and them read the
# docs on each of its dependencies in the oerder below:
#
# Application::Config
#  AppConfig::AutoDoc
#   AppConfig
#    AppConfig::State
#
# The argument for new is an anonymous hash. This hash is
# used to control the bahaviour of AppConfig::AutoDoc. In
# This case, setting EXPAND_ARGV to 1 enables tranfers of
# all words in input files to @ARGV. EXPAND_STDIN does the
# same for text comming through pipelines (standard input)
#
# See perldoc AppConfig::AutoDoc for details
sub parse_configuration {
    # Force tabs as column separator for the gene name mapping file
    $AppConfig::AutoDoc::EXPAND_FILES_OPTIONS{COLUMN_DELIMITER} = "\t";

    use Application::Config qw(:argcount GetConfig);
    # Here I'm passing GetConfig a hash that serves both as an example and
    # prototype for the kind of argument expected by the method
    # "define" (see below) from AppConfig::AutoDoc.
    my $appconfig = GetConfig(# First, lets configure AppConfig::Autodoc by
			      # giving a hash reference with parameters
			      { 
			      },

			      # Input
			      'column' => {
				  ALIAS    => "c",
				  ARGCOUNT => ARGCOUNT_ONE,
				  DEFAULT  => undef,
				  SUMMARY  => "Force the selection of a column to be parsed. If not set, the last column in the input file(s) is used.",
			      },
			      'input_delimiter' => {
				  DEFAULT  => "\t",
				  ARGCOUNT => ARGCOUNT_ONE,
				  ALIAS    => 's|delimiter',
				  SUMMARY  => "column delimiter of input files",
			      },
			      'unpad' => {
				  DEFAULT  => 1,
				  ARGCOUNT => ARGCOUNT_NONE,
				  ALIAS    => 'u',
				  SUMMARY  => "Remove leading/trailing invisible characters from all INPUT columns.",
			      },

			      # Output
			      'output_delimiter' => {
				  DEFAULT  => "\t",
				  ARGCOUNT => ARGCOUNT_ONE,
				  ALIAS    => 'r|output',
				  SUMMARY  => "column delimiter for output table",
			      },
			      'output_format' => {
				  DEFAULT  => "arch",
				  ARGCOUNT => ARGCOUNT_ONE,
				  ALIAS    => 'of|outformat',
				  SUMMARY  => "Output table format. The default format (arch) is similar to domain2architeture's format.",
			      },
#			      'pad' => {
#				  DEFAULT  => 0,
#				  ARGCOUNT => ARGCOUNT_NONE,
#				  ALIAS    => 'p',
#				  SUMMARY  => "Add trailing spaces all OUTPUT rows in all columns so that each column's length is constant.",
#			      },
			      'include_operon_query' => {
				  DEFAULT  => 0,
				  ARGCOUNT => ARGCOUNT_NONE,
				  ALIAS    => 'q',
				  SUMMARY  => "Include the GI of the ORF used as query/pivot for the operon.",
			      },

			      # Process
			      'rename' => {
				  ALIAS    => 'm|map',
				  ACTION   => 'EXPAND_FILES',
				  ARGCOUNT => ARGCOUNT_HASH,
				  DEFAULT  => {},
				  SUMMARY  => "Table to rename domains names. It should be a two column text table, with the old name in the first column and the new one in the second columns, separated by TABS.",
			      },
	);

    # Shortcut to know whether domains should be renamed
    $appconfig->define("_rename" => { ARGCOUNT => ARGCOUNT_NONE, DEFAULT => scalar(keys %{$appconfig->rename}) ? 1 : 0 });

    # Compile output delimiter:
    # you can use Perl regexp escape codes like \t
    # to set the output column delimiter
    foreach my $stream (qw(output)) {
	my $sep = $appconfig->get("${stream}_delimiter");
	$sep = eval qq{return "$sep"};
	$appconfig->set("${stream}_delimiter", $sep);
    }

    # Use STDIN
    push(@ARGV,"-") if (! -t STDIN && scalar(@ARGV) == 0);
    return $appconfig;
}


# POD: start
# Documentation (use option -doc or --doc to see it!)
#
# AppConfig::AutoDoc can automatically extract Plain Old Documentation
# from within the caller program's, add descriptions of the options
# created by L<define> and do some pretty formatting for output.
#
# Note that POD may be added anywhere in your program, thus allowing
# the documentation for a program to be left side by side with the
# function's definition.

=head1 NAME

 operon2arch - extract gene architectures from parsed operons

=head1 SYNOPSIS

 operons2arch operons.parsed.txt > operons.parsed.arch

=head1 DESCRIPTION

Use this program to recover domain architectures from the
terse representation of operons and gene architectures created
by operon_parse (TASS) or neighborhood_explorer (Rotifer).

=head1 AUTHOR

 Robson Francisco de Souza

=cut
# POD: end
