#!/usr/bin/env perl

use FindBin;
use lib "$FindBin::RealBin/../perl/lib";
use warnings;
use strict;

# Parse command line options
my $CONFIG = parse_configuration();

# Global variables need by eval block in parse_configuration()
my @F = (); # Global array
my %H = (); # Global hash

# Add your main program code below
my $sep = $CONFIG->input_delimiter;
my $data = { 'element' => {}, 'set' => {} };
my $nextID = 0;
 ROW: while (<>) {
     chomp;
     next if /^\s*$/;
     @F = split(/$sep/);
     @F = map { s/^\s+//; s/\s+$//; $_ } @F if ($CONFIG->unpad);

     # Input filters
     foreach my $rule (@{$CONFIG->filter}) {
	 my $val = $rule->();
	 print STDERR "Your code returned $val\n" if ($CONFIG->debug);
	 next ROW if (!$val);
     }

     my @elm = map { $F[$_] } ($CONFIG->column->[0] eq 'all' ? 0..$#F : @{$CONFIG->column});
     @elm = sort { exists($data->{'element'}{$b}) <=> exists($data->{'element'}{$a}) } @elm;

     # Compare all elements to the first one
     for (my $i=1; $i<=$#elm; $i++) {
	 my $op = "unknown";

	 # Merge sets
	 if    ( exists $data->{'element'}{$elm[0]} &&  exists $data->{'element'}{$elm[$i]}) {
	     next if ($data->{'element'}{$elm[0]} == $data->{'element'}{$elm[$i]}); # Redundant (a=>b == b=>a)
	     # Move elements from $elm[$i]'s set
	     my $setid1 = $data->{'element'}{$elm[0]};
	     my $setid2 = $data->{'element'}{$elm[$i]};
	     foreach my $elm (@{ $data->{'set'}{$setid2} }) {
		 push(@{ $data->{'set'}{$setid1} }, $elm);
		 $data->{'element'}{$elm} = $setid1;
	     }
	     delete $data->{'set'}{$setid2};
	     $op = "merged $setid1 $setid2";
	 }

	 # Add $elm[$i] to $data->{'element'}{$elm[0]}
	 elsif ( exists $data->{'element'}{$elm[0]} && !exists $data->{'element'}{$elm[$i]}) {
	     my $setID = $data->{'element'}{$elm[0]};
	     push(@{ $data->{'set'}{$setID} }, $elm[$i]);
	     $data->{'element'}{$elm[$i]} = $setID;
	     $op = "left $setID";
	 }

	 # Add $elm[0] to $data->{'element'}{$elm[$i]}
	 elsif (!exists $data->{'element'}{$elm[0]} &&  exists $data->{'element'}{$elm[$i]}) {
	     my $setID = $data->{'element'}{$elm[$i]};
	     push(@{ $data->{'set'}{$setID} }, $elm[0]);
	     $data->{'element'}{$elm[0]} = $setID;
	     $op = "right $setID";
	 }

	 # Create set
	 elsif (!exists $data->{'element'}{$elm[0]} && !exists $data->{'element'}{$elm[$i]}) {
	     my @tmp = ( $elm[0], $elm[$i] );
	     @tmp = ($elm[0]) if ($elm[0] eq $elm[$i]); # Self match
	     $data->{'set'}{$nextID} = [ @tmp ];
	     map { $data->{'element'}{$_} = $nextID } @tmp;
	     $op = "new  $nextID";
	     $nextID++;
	 }

	 print STDERR join(" ",$elm[0],$elm[$i],$op),"\n" if ($CONFIG->debug > 0);
     } # for (my $i=1; $i<=$#elm; $i++)
} #  ROW: while (<>)

# Print sets
my $i = 0;
$sep = $CONFIG->output_delimiter;
foreach my $set (sort { scalar(@{$data->{'set'}{$b}}) <=> scalar(@{$data->{'set'}{$a}}) } keys %{ $data->{'set'} }) {
    my $size = scalar(@{$data->{'set'}{$set}});
    next if ($size < $CONFIG->minimum_cluster_size);
    print join("\n",map { join($sep, $_, $i, $size) } @{ $data->{'set'}{$set} }),"\n";
    $i++;
}

# Terminate execution nicely
exit 0;

#####
# Add your subroutines below

# Command line parsing, debugging and help messages
sub parse_configuration {
    # Parser definition
    use Application::Config qw(:argcount GetConfig);
    my $appconfig = GetConfig(# Hash

			      'column' => {
				  ALIAS    => 'c',
				  ACTION   => sub { my ($s,$v,$n) = @_; $s->set($n,[ 'all' ]) if ($v =~ /^all$/i) },
				  ARGCOUNT => ARGCOUNT_LIST,
				  DEFAULT  => [ 0, 1 ],
				  SUMMARY  => "Set a list of columns as identifiers for elements of the same set. If not specified, the first and second column are used. You can set it to 'all' to use all columns in every row as identifiers.",
			      },

			      'filter' => {
				  DEFAULT  => [],
				  ARGCOUNT => ARGCOUNT_LIST,
				  ALIAS    => 'f',
				  SUMMARY  => "Perl code to filter input rows (operates on \@F, can access %H)",
			      },

			      'input_delimiter' => {
				  DEFAULT  => "\t",
				  ARGCOUNT => ARGCOUNT_ONE,
				  ALIAS    => 's|delimiter',
				  SUMMARY  => "column delimiter of input files",
			      },

			      'output_delimiter' => {
				  DEFAULT  => "\t",
				  ARGCOUNT => ARGCOUNT_ONE,
				  ALIAS    => 'r|output',
				  SUMMARY  => "column delimiter for output table",
			      },

			      'minimum_cluster_size' => {
				  ALIAS    => 's',
				  ARGCOUNT => ARGCOUNT_ONE,
				  DEFAULT  => 0,
				  SUMMARY  => "Minimum cluster size filter",
			      },

			      'unpad' => {
				  DEFAULT  => 1,
				  ARGCOUNT => ARGCOUNT_NONE,
				  ALIAS    => 'u',
				  SUMMARY  => "Remove leading/trailing invisible characters from all INPUT columns.",
			      },
	);

    # Parse rules (if stored in files)
    if (scalar @{$appconfig->filter}) {
	my @rules = @{$appconfig->filter};
	$appconfig->_default('filter');
	foreach my $rule (@rules) {
	    if ($rule !~ /\n/ && -f "$rule") {
		open(RULE,"<$rule") || die "Could not load rules from file $rule";
		$rule = join(" ",map { chomp; $_ } grep { !/^\#/ } <RULE>);
		close(RULE);
	    }
	    $rule = "sub { $rule }" if ($rule !~ /^\s*sub\s*\{.+\}\s*$/);
	    my $ref = eval "$rule";
	    die "Error while parsing rule $rule\n$@" if ($@);
	    $appconfig->filter($ref);
	}
    }

    # Compile output delimiter:
    # you can use Perl regexp escape codes like \t
    # to set the output column delimiter
    foreach my $stream (qw(input output)) {
	my $sep = $appconfig->get("${stream}_delimiter");
	$sep = eval qq{return "$sep"};
	$appconfig->set("${stream}_delimiter", $sep);
    }

    return $appconfig;
}

# POD: start

=head1 NAME

 runionFind - calculate union-find (clusters) for set of elements

=head1 SYNOPSIS

 runionFind table.txt

=head1 DESCRIPTION

This program process tables, treating each row as a list of 
identifiers for elements that belong to a single set or,
equivalently, as nodes in a connected sub-graph. It divides
the set in fully connected subsets, i.e. sets were all 
elements appeared in at least one row of the input table
toghether with other elements of the same set.

The procedure implemented in this script is a union-find
algorithm. It uses hash indices of members (keys) to clusters 
(values) and reciprocal hashes of clusters (keys) to members 
(values in this hash are irrelevant). This is a very poor 
implementation, taking O(n^2) operations to find all clusters.

The input is a text table with at least two columns. Only the columns
identifying the elements are considered, the rest is just ignored.

=head1 AUTHOR

 Robson Francisco de Souza

=cut
# POD: end
