#!/usr/bin/env perl

use FindBin;
use lib "$FindBin::RealBin/../perl/lib";
use Bio::OntologyIO;
use Rotifer;
use Rotifer::DB::Base;
use warnings;
use strict;

# Global variables: default ontologies
our $DEFAULT_ONTOLOGIES = [ 
    Rotifer::DB::Base->data_path("profiledb","annotation","proteinworld.obo"),
    Rotifer::DB::Base->data_path("profiledb","annotation","profiledb_function.obo")
    ];

# Process user input
my $CONFIG = parse_configuration();

# Load header if html is required
# We have to delay printing the header until we know how many
# ontologies were processed
my $HTML = join('',<DATA>) if ($CONFIG->outformat eq "html");
my $status = { "html" => \$HTML, "seen" => {} }; # keys to store values from all ontologies

# Table output header
print join("\t",qw(name identifier description)),"\n" if ($CONFIG->outformat eq "table");

# Process each ontology file
my $count = 0;
foreach my $file (@{ $CONFIG->ontology }) {
    my $io = Bio::OntologyIO->new(-format=>$CONFIG->informat, -file=>$file, %{$CONFIG->inargs});
    while (my $ontology = $io->next_ontology) {
	if ($CONFIG->outformat eq "text") {
	    print "\n=","-" x 60,"=\n";
	    print join("\t","Ontology:",$ontology->name),"\n";
	}

	# Inspect all terms, the traversing sub-graphs they define and exclude/include such sub-graphs
	select_terms($CONFIG, $ontology);

	# Annoying HTML requires lots of if blocks...
	if ($CONFIG->outformat eq "html") {
	    $HTML .= "\n</div>\n\n" if ($count);
	    $HTML .= '<div id="treeDiv'.$count.'" class="ygtv-highlight">';
	}

	# Traverse ontology graph and print ontology nodes when the distance to at least one included parent is smaller
	# than the distance to the closest excluded parent term
	foreach my $root ($ontology->get_root_terms) {
	    $status->{"last_level"} = -1;
	    if ($CONFIG->outformat eq "html") {
		traverse_ontology_graph($ontology, $root, 'get_child_terms', -1, \&selected_terms_to_html, $CONFIG, $status);
		$HTML .= "</li>\n"; # Close last entry first
		for (my $i = $status->{"last_level"}; $i>0; $i--) {
		    my $tab1 = "   " x $i;
		    my $tab2 = "   " x ($i-1);
		    $HTML .= "${tab1}</ul>\n${tab2}</li>\n";
		}
		$HTML .= "</ul>\n";
	    } elsif ($CONFIG->outformat eq "matrix") {
		my @terms = map { $_->name } grep { scalar($ontology->get_child_terms($_)) || exists $CONFIG->_include->{uc $_->name} } $ontology->get_all_terms($root);
		print join("\t","node",sort { $a cmp $b } @terms),"\n";
		map { $status->{"parents"}{$_} = undef } @terms; # Hash for each matrix row
		traverse_ontology_graph($ontology, $root, 'get_child_terms', -1, \&selected_terms_to_matrix, $CONFIG, $status);
	    } elsif ($CONFIG->outformat eq "table") {
		traverse_ontology_graph($ontology, $root, 'get_child_terms', -1, \&selected_terms_to_table, $CONFIG, $status);
	    } elsif ($CONFIG->outformat eq "text" || $CONFIG->outformat eq "list") {
		traverse_ontology_graph($ontology, $root, 'get_child_terms', -1, \&selected_terms_to_text, $CONFIG, $status);
	    } else {
		die "Unknown output format ".$CONFIG->outformat;
	    }
	}

	$count++; # Number of ontologies processed
    }
}

# Finalize HTML
if ($CONFIG->outformat eq "html") {
    $HTML .= "\n</div>\n</body>\n<html>\n";
    $HTML =~ s/\@ARGV/$count/; # Replacing markup with actual number
    print $HTML;
}

exit 0;

###############
# Subroutines
###############

# Dump selected data to text
sub selected_terms_to_text {
    my ($onto, $term, $level, $config, $hash) = @_;

    unless ($config->debug > 1) {
	return 1 if ($config->outformat eq "list" && exists $hash->{"seen"}{ $term->name });
	if (!exists $term->{'_included'}) {
	    if ($config->parents < 0) {
		return 0;
	    } else {
		return 1;
	    }
	}
	# Abort scanning subgraphs at the first excluded parent
	return 0 if (exists $term->{'_excluded'} && $term->{'_excluded'} - $term->{'_included'} <= 0);
    }

    my ($identifier, $synonyms) = ("","");
    $identifier = '('.$term->identifier.')' if ($config->identifier);
    $synonyms = "[".join(", ",map { /\"(.+)\"/; $1 || $_ } $term->each_synonym)."]" if ($config->show_synonyms && scalar($term->each_synonym));
    #$synonyms = "[".join(", ",map { s/\"//g; s/\s*(EXACT|BROAD|NARROW|RELATED)\s*(\[\])?$//; $_ } $term->each_synonym)."]"
    my $name = $term->name;
    $hash->{"seen"}{$name} = 1;
    $name = "**${name}**" if ($config->outformat eq "text" && exists $term->{'_selected_query'});
    my $ident = $config->identation_string x $level;
    $ident = "" if ($config->outformat eq "list"); # No identation when printing just the list of terms
    if ($config->debug) {
	print join(" ", "$ident$name", "$identifier",  $synonyms);
	print " [",join(", ",map { exists $term->{$_} ? $term->{$_} : "" } qw(_included _selected_query _excluded)),"]\n";
    } else {
	if ($config->leaves) {
	    return 1 if (scalar $onto->get_child_terms($term));
	    $ident = "";
	}
	print join(" ", "$ident$name", "$identifier", $synonyms),"\n";
    }

    return 1;
}

# Dump selected data to text
sub selected_terms_to_table {
    my ($onto, $term, $level, $config, $hash) = @_;

    unless ($config->debug > 1) {
	return 1 if ($config->outformat eq "list" && exists $hash->{"seen"}{ $term->name });
	if (!exists $term->{'_included'}) {
	    if ($config->parents < 0) {
		return 0;
	    } else {
		return 1;
	    }
	}
	# Abort scanning subgraphs at the first excluded parent
	return 0 if (exists $term->{'_excluded'} && $term->{'_excluded'} - $term->{'_included'} <= 0);
    }
    return 1 if ($config->leaves && scalar $onto->get_child_terms($term));

    # Collating data and printing
    my $identifier = $term->identifier;
    my @names = ($term->name);
    $hash->{"seen"}{$names[0]} = 1;
    push(@names, map { /\"(.+)\"/; $1 || $_ } $term->each_synonym) if ($config->show_synonyms && scalar($term->each_synonym));
    foreach my $name (@names) {
	print join("\t", 
		   $name,
		   defined $identifier ? $identifier : "",
		   defined $term->definition ? $term->definition : "",
	    ),"\n";
    }
    return 1;
}

# Dump selected data to text
sub selected_terms_to_matrix {
    my ($onto, $term, $level, $config, $hash) = @_;

    unless ($config->debug > 1) {
	if (!exists $term->{'_included'}) {
	    if ($config->parents < 0) {
		return 0;
	    } else {
		return 1;
	    }
	}
	# Abort scanning subgraphs at the first excluded parent
	return 0 if (exists $term->{'_excluded'} && $term->{'_excluded'} - $term->{'_included'} <= 0);
    }

    # Mark higher (more terminal or closer to leaves) nodes as non-parent and current as parent if included
    my @children = $onto->get_child_terms($term);
    my @parents = sort { $a cmp $b } keys %{$hash->{'parents'}};
    if ($hash->{'last_level'} > $level) {
	map { $hash->{'parents'}{$_} = undef if (defined $hash->{'parents'}{$_} && $hash->{'parents'}{$_} >= $level) } keys %{$hash->{'parents'}};
    }
    $hash->{'parents'}{$term->name} = $level if (exists $term->{'_selected_query'} || scalar @children);
    return 1 if (scalar @children); # Just leaves in output rows

    # Print row
    print join("\t", $term->name, map { defined $hash->{'parents'}{$_} ? 1 : 0 } @parents),"\n";

    $hash->{'last_level'} = $level;
    return 1;
}

# Dump selected data to html
sub selected_terms_to_html {
    my ($onto, $term, $level, $config, $status) = @_;
    unless ($config->debug > 1) {
	if (!exists $term->{'_included'}) {
	    if ($config->parents < 0) { # Subgraphs to print are marked from the root: abort scanning subgraphs
		return 0;
	    } else { # Subgraphs to print are not marked from the root: don't print this one but continue scanning subgraphs
		return 1;
	    }
	}
	# Abort scanning subgraphs at the first excluded parent
	return 0 if (exists $term->{'_excluded'} && $term->{'_excluded'} - $term->{'_included'} <= 0);
    }
    my $name       = $term->name;
    my $identifier = $term->identifier;
    $name = "<b>${name}</b>" if (exists $term->{'_selected_query'});
    my $synonyms = "";
    $synonyms = "[".join(", ",map { /\"(.+)\"/; $1 || $_ } $term->each_synonym)."]"
	if ($config->show_synonyms && scalar($term->each_synonym));
    # Dealing with the topology
    my $li = scalar(grep { scalar(grep { exists $_->{'_included'} } $onto->get_child_terms($_)) } $onto->get_child_terms($term)) ? '<li class="expanded">' : '<li>';
    my $ident = "   " x $level;
    if ($status->{"last_level"} < $level) { # I'm the first child or the root node (because last_level starts = -1 for a root node)
	${ $status->{'html'} } .= "\n${ident}<ul>\n${ident}$li";
    } elsif ($status->{"last_level"} > $level) { # I'm the last child
	${ $status->{'html'} } .= "</li>\n"; # Close last entry first
	for (my $i = $status->{'last_level'}; $i>$level; $i--) {
	    my $tab1 = "   " x $i;
	    my $tab2 = "   " x ($i-1);
	    ${ $status->{'html'} } .= "${tab1}</ul>\n${tab2}</li>\n";
	}
	${ $status->{'html'} } .= "$ident$li";
    } else {
	my $ident = "   " x $level;
	${ $status->{'html'} } .= "</li>\n$ident$li";
    }
    # Dealign with the node
    ${ $status->{'html'} } .= $name;
    $status->{'last_level'} = $level;
    return 1;
}

# Select terms
sub select_terms {
    my ($config, $ontology) = @_;

    # Include root identifiers to enforce printing of all terms when users explicitly ask for "all" terms
    if ($config->_include_all) {
	map { $config->_include->{uc $_->name} = 1 } $ontology->get_root_terms;
    }

    # Selecting nodes for printing
    my @count = ();
    foreach my $obj ($ontology->get_all_terms) {
	# Load and inspect identifiers
	my $excl = 0; my $incl = 0;
	my @synonyms = ($obj->name, map { /\"(.+)\"/; $1 } $obj->each_synonym);
	foreach my $synonym (@synonyms) {
	    $synonym = uc($synonym);
	    if ($config->regexp) {
		$excl = 1 if (grep { $synonym =~ /$_/i } @{ $config->exclude });
		$incl = 1 if (grep { $synonym =~ /$_/i } keys %{ $config->_include });
	    } else {
		$excl = 1 if (exists $config->_exclude->{$synonym});
		$incl = 1 if (exists $config->_include->{$synonym});
	    }
	    $CONFIG->_exclude->{$synonym} = 1 if ($excl);
	    $CONFIG->_include->{$synonym} = 1 if ($incl);
	}

	# Include terms (node, parents and children)
	if ($incl) {
	    # Include node and children
	    traverse_ontology_graph($ontology, $obj, 'get_child_terms', $config->children,
				    sub {
					my ($onto, $term, $level) = @_;
					$term->{'_included'} = $level unless (exists $term->{'_included'} && $term->{'_included'} < $level);
					return 1;
				    });
	    # Include parents
	    traverse_ontology_graph($ontology, $obj, 'get_parent_terms', $config->parents,
				    sub {
					my ($onto, $term, $level) = @_;
					$term->{'_included'} = -$level unless (exists $term->{'_included'} && $term->{'_included'} < $level);
					return 1;
				    });
	    push(@count, $_);
	}

	# Exclude terms (node and children only)
	if ($excl) {
	    traverse_ontology_graph($ontology, $obj, 'get_child_terms', -1,
				    sub {
					my ($onto, $term, $level) = @_;
					$term->{'_excluded'} = $level unless (exists $term->{'_excluded'} && $term->{'_excluded'} < $level);
					return 1;
				    });
	}

	$obj->{'_selected_query'} = 1 if ($incl && !$excl);
    } # foreach my $obj ($ontology->get_all_terms)

    return @count;
}

# Traverse directed graph from a term
# If the call back return false, traversal is interrupted
sub traverse_ontology_graph {
    my $status = _traverse_ontology_graph(0, @_);
    #map { delete $_->{'_graph_traversal_visited'} } $_[0]->get_all_terms;
    return $status;
}

sub _traverse_ontology_graph {
    my ($level, $ont, $term, $direction, $depth, $callback, @args) = @_;

    # Run callback subroutine
    my $status = $callback->($ont, $term, $level, @args);
    return 0 unless ($status);

    # Children
    $level++; # Increment when ascending/descending
    foreach my $child (sort { $a->name cmp $b->name } $ont->$direction($term)) {
	next if ($child eq $term || ($depth != -1 && $level > $depth));
	_traverse_ontology_graph($level, $ont, $child, $direction, $depth, $callback, @args);
    }

    # Reset traversal-specific keys of visited nodes
    return $status;
}

# Correct arguments to BioPerl parser
sub add_dashes {
    my ($s,$n,$v) = @_;
    my $hashref = $s->get($n);
    my ($key, $value) = split(/\=/,$v,2);
    $hashref->{"-$key"} = $value;
    delete $hashref->{$key};
}

# Parse command line options and configuration files
sub parse_configuration {
    use Application::Config qw(:argcount GetConfig);

    my $appconfig = GetConfig({ EXPECT_INPUT => 1, EXPAND_STDIN => 1, EXPAND_ARGV => 1 },

			      'children' => {
				  ALIAS    => 'c',
				  ARGCOUNT => ARGCOUNT_ONE,
				  DEFAULT  => 0,
				  SUMMARY  => "Number of child layers to include in output"
			      },

			      'exclude' => {
				  ALIAS    => 'x',
				  ARGCOUNT => ARGCOUNT_LIST,
				  DEFAULT  => [],
				  SUMMARY  => "List of terms to exclude"
			      },

			      'identation_string' => {
				  ALIAS    => 'is',
				  ARGCOUNT => ARGCOUNT_ONE,
				  DEFAULT  => "   ",
				  SUMMARY  => "Set string to use as identation character in text mode output."
			      },

			      'identifier' => {
				  ALIAS    => 'i',
				  ARGCOUNT => ARGCOUNT_NONE,
				  DEFAULT  => 0,
				  SUMMARY  => "Print unique term identifers"
			      },

			      'inargs' => {
				  ALIAS    => 'ia',
				  ACTION   => \&add_dashes,
				  ARGCOUNT => ARGCOUNT_HASH,
				  DEFAULT  => {},
				  SUMMARY  => "Input file parser options (check documentation for each Bio::OntologyIO module",
			      },

			      'informat' => {
				  ALIAS    => 'if',
				  ARGCOUNT => ARGCOUNT_ONE,
				  DEFAULT  => "obo",
				  SUMMARY  => "Input ontology file format",
			      },

			      'leaves' => {
				  ALIAS    => 'l',
				  ARGCOUNT => ARGCOUNT_NONE,
				  DEFAULT  => 0,
				  SUMMARY  => "Print only nodes without children (terminal nodes or, if you think like a tree, leaves)."
			      },

			      'outformat' => {
				  ALIAS    => 'of',
				  ARGCOUNT => ARGCOUNT_ONE,
				  DEFAULT  => "text",
				  SUMMARY  => "Output hierarchy format.\nAvailbale formats are text, table, list and html",
			      },
			      'ontology' => {
				  ALIAS    => 'o',
				  ARGCOUNT => ARGCOUNT_LIST,
				  DEFAULT  => $DEFAULT_ONTOLOGIES,
				  SUMMARY  => "List of ontology files (obligatory)",
			      },
			      'parents' => {
				  ALIAS    => 'p',
				  ARGCOUNT => ARGCOUNT_ONE,
				  DEFAULT  => "all",
				  SUMMARY  => "Number of parental layers to include in output"
			      },
			      'regexp' => {
				  ALIAS    => 'r',
				  ARGCOUNT => ARGCOUNT_NONE,
				  DEFAULT  => 0,
				  SUMMARY  => "Match queries using PERL regular expressions. This option allows partial matches and other sofisticated queries",
			      },
			      'show_synonyms' => {
				  ALIAS    => 's',
				  ARGCOUNT => ARGCOUNT_NONE,
				  DEFAULT  => 0,
				  SUMMARY  => "Show term synonyms"
			      },
	);

    # Process included terms
    $appconfig->define("_include" => { ARGCOUNT => ARGCOUNT_HASH, DEFAULT => {} });
    $appconfig->define("_include_all" => { ARGCOUNT => ARGCOUNT_ONE, DEFAULT => 0 });
    map { $appconfig->_include->{uc $_} = 1; $appconfig->_include_all(1) if (/^all$/io) } @ARGV;

    # Request all descendent terms (default)
    $appconfig->set("children", -1) if ($appconfig->children =~ /all/i || $appconfig->_include_all);
    $appconfig->set("parents",  -1) if ($appconfig->parents  =~ /all/i || $appconfig->_include_all || $appconfig->outformat eq "html");

    # Process excluded terms
    $appconfig->define("_exclude" => { ARGCOUNT => ARGCOUNT_HASH, DEFAULT => {} });
    map { $appconfig->_exclude->{uc $_} = 1 } @{ $appconfig->exclude };

    return $appconfig;
}

# POD: start
# Documentation (use option -doc or --doc to see it!)

=head1 NAME

 ontology2hierarchy - display an ontology as a hierarchy

=head1 SYNOPSIS

 # Simplest use: dump everything from default ontologies

 ontology2hierarchy all

 # Searching specific terms in an OBO file

 ontology2hierarchy -o another_ontology.obo term1 term2...

 # Topological queries
 # Include all children of "Helix Turn Helix (HTH)" but exclude
 # the "winged HTH" subtree except for the path to SelB-HTH

 ontology2hierarchy -c all -x "winged HTH" "Helix Turn Helix (HTH)" SelB-HTH

=head1 DESCRIPTION

This program loads and generates hierarchical representations
of ontologies. It can be used to search specific terms and display
their parents and children terms. 

By default, the hierarchy is dumped as text with indentations
highlighting the different levels of the hierarchy.

=head1 AUTHOR

 Robson Francisco de Souza

=cut
# POD: end

__DATA__
<!DOCTYPE HTML PUBliC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">
<html>
<head>
<meta http-equiv="content-type" content="text/html; charset=utf-8">
<style type="text/css">
/*
  margin and padding on body element
  can introduce errors in determining
  element position and are not recommended;
  we turn them off as a foundation for YUI
  CSS treatments.
*/
body {
  margin:0;
  padding:0;
  blue {background-color: #0000ff;font-family:Lucida Console;}
  red  {background-color: #ff0000;font-family:Lucida Console;}
}
</style>
<link rel="stylesheet" type="text/css" href="http://yui.yahooapis.com/2.8.0r4/build/fonts/fonts-min.css" />
<link rel="stylesheet" type="text/css" href="http://yui.yahooapis.com/2.8.0r4/build/treeview/assets/skins/sam/treeview.css" />
<!--Begin YUI CSS infrastructure, including Standard Reset, Standard Fonts, and CSS Page Grids -->
<!--<link rel="stylesheet" type="text/css" href="http://yui.yahooapis.com/2.8.0r4/build/reset/reset.css" /> -->
<!--<link rel="stylesheet" type="text/css" href="http://yui.yahooapis.com/2.8.0r4/build/fonts/fonts.css" /> -->
<!--<link rel="stylesheet" type="text/css" href="http://yui.yahooapis.com/2.8.0r4/build/grids/grids.css" /> -->
<!--<link rel="stylesheet" type="text/css" href="http://yui.yahooapis.com/2.8.0r4/treeview/assets/tree.css" />-->
<!--<link rel="stylesheet" type="text/css" href="http://yui.yahooapis.com/2.8.0r4/build/calendar/assets/calendar.css" />-->
<!--<link rel="stylesheet" type="text/css" href="http://yui.yahooapis.com/2.8.0r4/build/container/assets/container.css" />-->
<!--<link rel="stylesheet" type="text/css" href="http://yui.yahooapis.com/2.8.0r4/build/menu/assets/menu.css" /> -->
<!--end YUI CSS infrastructure-->
<script type="text/javascript" src="http://yui.yahooapis.com/2.8.0r4/build/yahoo-dom-event/yahoo-dom-event.js"></script>
<script type="text/javascript" src="http://yui.yahooapis.com/2.8.0r4/build/treeview/treeview-min.js"></script>

</head>
<body class="yui-skin-sam">

<script type="text/javascript">
//global variable to allow console inspection of tree:
var tree = new Array();
var i = 0;

//function to initialize the tree:
function treeInit() {
    for (i=0; i<@ARGV; i++) {
	buildRandomTextNodeTree();
    }
}

//Function creates the tree
function buildRandomTextNodeTree() {
    //instantiate the tree:
    tree[i] = new YAHOO.widget.TreeView("treeDiv"+i);
    tree[i].subscribe('clickEvent',tree[i].onEventToggleHighlight);
    tree[i].setNodesProperty('propagateHighlightUp',true);
    tree[i].setNodesProperty('propagateHighlightDown',true);

    // Expand and collapse happen prior to the actual expand/collapse:
    // and can be used to cancel the operation:
    tree[i].subscribe("expand",   function(node) { YAHOO.log(node.index + " was expanded", "info", "example")  });
    tree[i].subscribe("collapse", function(node) { YAHOO.log(node.index + " was collapsed", "info", "example") });

    // Trees with TextNodes will fire an event for when the label is clicked:
    tree[i].subscribe("labelClick", function(node) { YAHOO.log(node.index + " label was clicked", "info", "example") });

    //The tree is not created in the DOM until this method is called:
    tree[i].draw();
}

//Add an onDOMReady handler to build the tree when the document is ready
YAHOO.util.Event.onDOMReady(treeInit);
</script>
