#!/usr/bin/env perl

# LIBRARIES and PRAGMAS: start
use FindBin;
use lib "$FindBin::RealBin/../perl/lib";
use Bio::SeqIO;
use List::MoreUtils qw(uniq);
use Rotifer::DB qw(id2fasta);
use Rotifer::Utils qw(aoa2tsv nr2ids);
use strict;
use warnings;
# LIBRARIES and PRAGMAS: end

# Globals
my @COMPACT_HEADER = qw(
query
neighborhood
query_length
query_domain_architecture
gi
locus_tag
organism
nucleotide
detailed_neighborhood
);

# Parse configuration/options
my $CONFIG    = &parse_configuration();
my $outformat = $CONFIG->outformat;
my $a2topts   = config2hash($CONFIG);
my %exclude   = map { ($_,1) } @{$CONFIG->exclude};
my %include   = map { ($_,1) } grep { !exists $exclude{$_} } @{$CONFIG->include};
my %exclude_by_type = map { ($_,1) } @{$CONFIG->exclude_by_type};
my %include_by_type = map { ($_,1) } grep { !exists $exclude_by_type{$_} } @{$CONFIG->include_by_type};

# MAIN PROGRAM: start

# Print headers
if ($CONFIG->header) {
    if ($outformat eq 'ids') {
        print join("\t",qw(protein nucleotide query length organism)),"\n";
    } elsif ($outformat eq 'compact') {
        print join("\t",@COMPACT_HEADER),"\n";
    } elsif ($outformat =~ /^(accession|naccession|nt|query|locus)/) {
        print "$outformat\n";
    }
}

# Parse and reformat each block
my $annCol       = $CONFIG->advopts->{architecture} || 10;
my $separator    = "---------------------------------------";
my $nid          = 1; # Neighborhood identifier (output, i.e. post-analysis)
my $in_data      = 0;
my $block        = 0;
my %column       = ();
my $codedby      = undef;
my %done         = ();
my @header       = ();
my @lastCoord    = ();
my @neighborhood = ();
my $organism     = undef;
my $osep         = $CONFIG->output_delimiter;
my %targets      = ();
while (<>) {
    chomp;

    next if (/^\S+ for blastclust are/); # End of blocks in gi2operon's output
    next if (/^(\S+\.)?\d+$/); # Accessions or GIs after blocks have ended
    next if (/^\s*$/); # Empty row

    # Header: new block!
    if (/^ORGANISM/) {
        s/\s+$//;
        s/\t/ /;
        @header = ($_);
        ($organism,$codedby) = /^ORGANISM\s+(.+)\s+accession no is (\S+)/ ? ($1,$2) : undef;
        (%column,@neighborhood,%targets) = ();
        $block = 0;
        $in_data = 1;
    }

    # End of a neghborhood block. Blocks are assumed to have been
    # "uniquized", i.e. must contain all queries that are close enough
    # to be part of the same block
    elsif (/^\-+$/) {
        # Process neighbors around each target
        my @targets = sort { $a <=> $b } keys %targets;
        foreach my $target (@targets) {
            next unless (exists $targets{$target});
            my @trimmed = ($neighborhood[$target]);

            # Search backward
            my $number = 1;
            my $i = $target;
            while ($i > 0) {
                last if ($CONFIG->maximum_before_query && $number > $CONFIG->maximum_before_query);
                if (!$CONFIG->minimum_before_query || $number > $CONFIG->minimum_before_query) {
                    last if ($neighborhood[$i]->{block} != $neighborhood[$i-1]->{block});
                }
                unshift(@trimmed, $neighborhood[$i-1]);
                $number++;
                $i--;
            }

            # Search forward
            $number = 1;
            $i = $target;
            while ($i < $#neighborhood) {
                last if ($CONFIG->maximum_after_query && $number > $CONFIG->maximum_after_query);
                if (!$CONFIG->minimum_after_query || $number > $CONFIG->minimum_after_query) {
                    last if ($neighborhood[$i]->{block} != $neighborhood[$i+1]->{block});
                }
                push(@trimmed, $neighborhood[$i+1]);
                if (exists $targets{$i+1}) {
                    $number = 1;
                    delete $targets{$i+1};
                } else {
                    $number++;
                }
                $i++;
            }

            # Accept/ignore the current block based on accession include/exclude list
            my ($pid,$locus) = map { $column{$_} } qw(pid locus);
	    my @ids = map { map { my $r = $_; map { $r->[$column{$_}] if (exists $column{$_}) } qw(pid locus) } $_->{row} } @trimmed;
            last if (scalar(@{$CONFIG->include}) && !grep { exists $include{$_} } @ids);
            last if (scalar(@{$CONFIG->exclude}) &&  grep { exists $exclude{$_} } @ids);

            # Select (within block') rows by type
            my $type = $column{'type'};
            @trimmed = grep {  exists $include_by_type{$_->{'row'}[$type]} } @trimmed if (scalar @{$CONFIG->include_by_type});
            @trimmed = grep { !exists $exclude_by_type{$_->{'row'}[$type]} } @trimmed if (scalar @{$CONFIG->exclude_by_type});
            last unless (scalar @trimmed);

            # Load identifiers
            my $accession = $neighborhood[$target]->{accession};

	    # Switch columns
	    while (my ($dest,$orig) = each %{$CONFIG->switch}) {
		    foreach my $row (@trimmed) {
			    my $o = $row->{row}[$column{$orig}];
			    $row->{row}[$column{$orig}] = $row->{row}[$column{$dest}];
			    $row->{row}[$column{$dest}] = $o;
		    }
	    }

            # All ACCESSIONs
            if ($outformat eq 'accession') {
                foreach my $hash (@trimmed) {
                    my $id = $hash->{row}[$pid] || $hash->{accession};
                    next if ($id eq '.' || exists $done{$id});
                    print "$id\n";
                    $done{$id}++;
                }
            }

            # Queries
            elsif ($outformat eq 'query') {
                foreach my $hash (@trimmed) {
                    my $id = $hash->{row}[$pid] || $hash->{accession};
                    next if (!$hash->{is_target} || $id eq '.' || exists $done{$id});
                    print "$id\n";
                    $done{$id}++;
                }
            }

            # Neighbor ACCESSIONs
            elsif ($outformat eq 'neighbors') {
                foreach my $hash (@trimmed) {
                    my $id = $hash->{row}[$pid] || $hash->{accession};
                    next if ($hash->{is_target} || $id eq '.' || exists $done{$id});
                    print "$id\n";
                    $done{$id}++;
                }
            }

            # Nucleotide
            elsif ($outformat eq 'nt') {
                print "$codedby\n" if (defined $codedby && !exists $done{$codedby});
                $done{$codedby} = 1;
            }

            # Locus tags
            elsif ($outformat =~ /locus/o) {
                my @out = grep {
                    my $l = $_->{row}[$column{'locus'}];
                    if (!defined $l || $l eq '.') {
                        0
                    } elsif ($outformat eq 'qlocus') {
                        $_->{is_target}
                    } elsif ($outformat eq 'nlocus') {
                        !$_->{is_target}
                    } else {
                        1
                    }
                } @trimmed;
                @out = map { $_->{row}[$column{'locus'}] } @out;
                print join("\n",@out),"\n" if (scalar @out);
            }

            # Other formats
            else {
                my $len = $column{"len"};
                my @ids = map { $_->{row}[$pid] } grep { $_->{row}[$len] eq '.' && $_->{row}[$pid] ne "." } @trimmed;
                if (scalar @ids) { # Fix length
                    my $fasta = id2fasta(@ids);
                    my $io = Bio::SeqIO->new(-file => $fasta);
                    my %len = ();
                    while (my $seq = $io->next_seq) {
                        my ($accession) = grep { $_->{acctype} eq 'ACCESSION' } nr2ids($seq->primary_id);
                        $len{$accession->{accession}} = $seq->length;
                    }
                    foreach my $neighbor (@trimmed) {
                        next unless (exists $len{$neighbor->{row}[$pid]});
                        $neighbor->{row}[$len] = $len{ $neighbor->{row}[$pid] };
                    }
                }

                # Tabular format
                if ($outformat eq 'table') {
                    my $max = $#{(sort { $#{$b->{row}} <=> $#{$a->{row}} } @trimmed)[0]->{row}};
                    if ($nid == 1) { # First block: print the table header!
                        my @header = qw(nucleotide start end strand blockid query pid type plen locus product organism);
                        push(@header, map { "ann".$_ } $annCol..$max) if ($max >= $annCol);
                        print join($osep, @header),"\n";
                    }
                    my ($query) = map { $_->{row}[$pid] } grep { $_->{row}[$pid] ne '.' && $_->{is_target} } @trimmed;
                    foreach my $hash (@trimmed) {
                        my $row = $hash->{row};
                        my @pos = ($row->[$column{'cds'}] =~ /(\d+)/g);
                        $row->[$column{len}] = $pos[$#pos]-$pos[0]+1 if ($row->[$column{len}] eq ".");
                        my @out = ($codedby, $pos[0], $pos[$#pos], $row->[$column{dir}], $nid, $hash->{is_target});
                        push(@out, map { $row->[$column{$_}] } qw(pid type len locus product));
                        push(@out, $organism);
                        push(@out, map { $_ || "" } @{$row}[$annCol..$max]);
                        print join($osep, @out),"\n";
                    }
                    $nid++;
                }

                elsif ($outformat eq 'neighborhood') {
                    $header[0] =~ s/ gi is / Protein is /;
                    print "$header[0]\n", aoa2tsv($a2topts, $header[1], map { $_->{row} } @trimmed), "$separator\n";
                }

                # Compact neighborhood
                elsif ($outformat eq 'compact') {
                    print join($CONFIG->output_delimiter, compact_neighborhood($CONFIG, \@header, \%column, $organism, $codedby, @trimmed)),"\n";
                }

                # Unknown format
                else {
                    die "Unknown format $outformat";
                }
            } # Neighborhood formats
        } # foreach my $target (@targets)

        $in_data = 0;
    } # elsif (/^\-+$/)

    elsif ($in_data) {
        # Parse row
        my @row = map { s/^\s+//; s/\s+$//; $_ } split(/[ \t]+/,$_,10);

        # Column names
        if ($row[1] eq "cds" && $row[0] eq ".") {
            @row = (@row[0..4],'type',@row[5..$#row]) if ($#row == 8);
            %column = map { ($row[$_],$_) } 0..$#row;
            push(@header,[ @row ]);
            next;
        }

        # Add type column to old gi2operons output
        if ($#row == 8) {
            if ($row[1] eq 'cds' && $row[5] ne 'type') {
                @row = (@row[0..4],'type',@row[5..$#row]);
            } else {
                @row = (@row[0..4],'CDS',@row[5..$#row]);
            }
        }

        # Add annotation
        my $pid = $column{"pid"};
        my $gi  = $column{"gi"};
        foreach my $hash (@{ $CONFIG->annotation }) {
            if (defined $pid && exists $hash->{$row[$pid]}) {
                push(@row, @{ $hash->{$row[$pid]} });
            } elsif (defined $gi && exists $hash->{$row[$gi]}) {
                push(@row, @{ $hash->{$row[$gi]} });
            }
        }

        # Tag features with a different block number using distance in base pairs and/or feature strand
        my $strand = $column{"dir"};
        my @coord  = ($row[ $column{"cds"} ] =~ /(\d+)/g);
        if (scalar @lastCoord) {
            my $is_another_block = ($CONFIG->strand && $row[$strand] ne $lastCoord[1]) ? 1 : 0;
            if (defined $CONFIG->maximum_distance) {
                # Evaluate distance to last neighbor
                my $distance = $coord[0]-$lastCoord[0];
                $is_another_block = 1 if ($distance > $CONFIG->maximum_distance);
            }
            $block += $is_another_block;
        }
        @lastCoord = ($coord[$#coord], $row[$strand]);

        # Store parsed data
        my $is_target = /^--\>/ ? 1 : 0;
        push(@neighborhood, { block => $block, accession => $row[$pid] || $row[$gi], row => [ @row ], is_target => $is_target });
        $targets{$#neighborhood} = 1 if ($is_target);
    } # else
} # while (<>)

exit 0;
# MAIN PROGRAM: end

###############
# Subroutines

sub compact_neighborhood {
    my ($conf, $header, $column, $org, $acc, @neighbors) = @_;
    my $archCol = exists $conf->advopts->{architecture} ? $conf->advopts->{architecture} : 10;

    # Compact row initialization
    my @compact = (undef, "", undef, undef, undef, undef, $org, $acc, "");

    # Match neighborhood orientation to the target's strand, 
    # i.e. enforce first target's strand to be positive
    my ($target) = grep { $_->{is_target} } @neighbors;
    my $dir = $column->{"dir"};
    if ($target->{row}[$dir] eq '-') {
        @neighbors = map { $_->{row}[$dir] = $_->{row}[$dir] eq '-' ? '+' : '-'; $_ } reverse @neighbors;
    }

    # Process each row
    my @arch = (); my @idarch = ();
    for (my $i=0; $i<=$#neighbors; $i++) {
        my $neighbor = $neighbors[$i];
        my $accver = $neighbor->{accession};

        # Get feature architecture
        my $arch = (defined $neighbor->{row}[$archCol]) ? $neighbor->{row}[$archCol] : "?";
        my $idarch = $accver . "__" . $arch;

        # Set query column
        if (!defined $compact[0] && $neighbor->{is_target}) {
            $compact[0] = $accver;
            $compact[2] = $neighbor->{row}[ defined $column->{"len"} ? $column->{"len"} : 3 ];
            $compact[3] = $arch eq '?' ? "" : $arch;
            $compact[4] = defined $column->{"gi"} ? $neighbor->{row}[$column->{"gi"}] : "-";
            $compact[5] = $neighbor->{row}[ defined $column->{"locus"} ? $column->{"locus"} : 7 ];
        }

        # Mark targets
        if ($neighbor->{is_target}) {
            $arch   .= "*";
            $idarch .= "*";
        }

        # Annotate strand
        if ($neighbor->{row}[$dir] eq '-') {
            $arch   = "<-$arch";
            $idarch = "<-$idarch";
            if ($i < $#neighbors && $neighbors[$i+1]->{row}[$dir] ne '-') {
                $arch   .= "||";
                $idarch .= "||";
            }
        } else {
            $arch   = "$arch->";
            $idarch = "$idarch->";
        }

        # Add to stack
        push(@arch, $arch);
        push(@idarch, $idarch);
    } # for (my $i=0; $i<=$#neighbors; $i++)

    # Remove leading and trailing genes without annotation
    if ($conf->advopts->{clean}) {
        my $i = 0;
        while ($i<=$#arch) {
            last if ($neighbors[$i]->{is_target} || defined $neighbors[$i]->{row}[$archCol]);
            $i++;
        }
        my $j = $#arch;
        while ($j>=0) {
            last if ($neighbors[$j]->{is_target} || defined $neighbors[$j]->{row}[$archCol]);
            $j--;
        }
        @arch = @arch[$i..$j];
    }

    # Concatenate
    $compact[1] = join('',@arch);
    $compact[8] = join('',@idarch);

    return @compact;
}

sub config2hash {
    my $config = shift;
    my $hash = {};
    foreach my $key (qw(pad output_delimiter)) {
        $hash->{$key} = $config->get($key);
    }
    return $hash;
}

sub parse_configuration {
    use Application::Config qw(:argcount GetConfig);
    my $appconfig = GetConfig({},

        "advopts" => {
            ALIAS    => "ao",
            ARGCOUNT => ARGCOUNT_HASH,
            DEFAULT  => { architecture => 10, clean => 1 },
            SUMMARY  => "Advanced options control how subroutines that generate output. See the output format help (--outformat below) for details.",
        },

        "annotation" => {
            ALIAS    => "a",
            ARGCOUNT => ARGCOUNT_LIST,
            DEFAULT  => [],
            SUMMARY  => "Load a TAB-separated table of sequence annotations and append its contents to extra column(s). The first column is expected to contain protein accessions.",
        },

        'empty' => {
            DEFAULT  => ".",
            ARGCOUNT => ARGCOUNT_ONE,
            ALIAS    => 'e',
            SUMMARY  => "Character to use in columns corresponding to missing columns",
        },

        # Exclude blocks by accession
        "exclude" => {
            ALIAS    => "x",
            ACTION   => 'EXPAND_FILES',
            ARGCOUNT => ARGCOUNT_LIST,
            DEFAULT  => [],
            SUMMARY  => "Exclude neighborhoods with accessions from this List.",
        },

        # Exclude rows by type
        "exclude_by_type" => {
            ALIAS    => "xt",
            ACTION   => 'EXPAND_FILES',
            ARGCOUNT => ARGCOUNT_LIST,
            DEFAULT  => [],
            SUMMARY  => "Exclude individual features by feature type.",
        },

        # Header on/off
        "header" => {
            ALIAS    => "y",
            ARGCOUNT => ARGCOUNT_NONE,
            DEFAULT  => 0,
            SUMMARY  => "Switches on printing of a header row for tabular output.",
        },

        # Include targets
        "include" => {
            ALIAS    => "i",
            ACTION   => 'EXPAND_FILES',
            ARGCOUNT => ARGCOUNT_LIST,
            DEFAULT  => [],
            SUMMARY  => "Select only neighborhoods containing features whose accessions are in this list.",
        },

        # Include rows by type
        "include_by_type" => {
            ALIAS    => "it",
            ACTION   => 'EXPAND_FILES',
            ARGCOUNT => ARGCOUNT_LIST,
            DEFAULT  => [],
            SUMMARY  => "Include individual features by feature type.",
        },

        # Processing parameters
        "maximum_distance" => {
            ALIAS    => "mid|d",
            ARGCOUNT => ARGCOUNT_ONE,
            DEFAULT  => undef,
            SUMMARY  => "Maximum distance between two consecutive features of a neighborhood (i.e. annotated regions or rows). This is used to restricted the expansion of a neighborhood to those elements that are close enough to belong to the same functional unit (e.g. operons, other transcriptional domains or mobile elements). This restriction will not be applied to nearest neighbors if a minimum number of neighbors is requested (see --minimum_number_of_neighbors below).",
        },

        "maximum_after_query" => {
            ALIAS    => "am|m",
            ARGCOUNT => ARGCOUNT_ONE,
            DEFAULT  => 0,
            SUMMARY  => "Maximum number of neighbors to report AFTER the query. This restriction takes precedence over requests for a minimum number of neighbors (see below). This option is ignored unless set to a value greater than zero.",
        },

        "minimum_after_query" => {
            ALIAS    => "an|n",
            ARGCOUNT => ARGCOUNT_ONE,
            DEFAULT  => 0,
            SUMMARY  => "Minimum number of neighbors AFTER the query. Such neighbors are reported even if they do not match other criteria. This option is ignored unless set to a value greater than zero.",
        },

        "maximum_before_query" => {
            ALIAS    => "bm",
            ARGCOUNT => ARGCOUNT_ONE,
            DEFAULT  => 0,
            SUMMARY  => "Maximum number of neighbors to report BEFORE the query. This restriction takes precedence over requests for a minimum number of neighbors (see below). This option is ignored unless set to a value greater than zero.",
        },

        "minimum_before_query" => {
            ALIAS    => "bn",
            ARGCOUNT => ARGCOUNT_ONE,
            DEFAULT  => 0,
            SUMMARY  => "Minimum number of neighbors located BEFORE the query to retain regardless of any other criteria. This option is ignored unless set to a value greater than zero.",
        },

        "switch" => {
            ALIAS    => "sw",
            ARGCOUNT => ARGCOUNT_HASH,
            DEFAULT  => {},
            SUMMARY  => "Sometimes we need to exchange identifiers to match another program's expectated input, such as replace pids with locus tags. Use this option as in -rp pid=locus to do that.",
        },

        "outformat" => {
            ALIAS    => 'o|of',
            ARGCOUNT => ARGCOUNT_ONE,
            DEFAULT  => 'neighborhood',
            SUMMARY  => "Set output format. Acceptable output formats are:
            \n=over
            \n=item * B<compact>: tabular representation (similar to operon_parse's output). Each neighborhood is represented by a pair of compact columns with domain architectures and IDs. Other columns provide additional annotation on the organism and/or target gene. This format supports the following advanced parameters (see I<--advopts>):
            \n=over 6
            \n=item * B<architecture>: number (zero-based) for the column were domain architectures or similar annotation tags will be stored (see --annotation, default is 10).
            \n=item * B<clean>: (boolean) exclude all neighbors without annotation (see B<column> above) located either upstream or downstream to the first and last annotated neighbors and/or the query/target gene.
            \n=back
            \n=item * B<accession>: all CDS feature accession numbers (pid)
            \n=item * B<locus>: locus tags of all features, i.e. all queries and their neighbors.
            \n=item * B<neighborhood>: block representation of a neighborhood. This output is the same as the input format (id2neighborhood's output).
            \n=item * B<neighbors>: accession numbers for neighboring CDS features, i.e. excluding any queries.
            \n=item * B<nt>: nucleotide identifiers.
            \n=item * B<qlocus>: locus tags of all _query_ features
            \n=item * B<nlocus>: locus tags of all neighbors, i.e. after exclusion of query identifiers
            \n=item * B<query>: list of accession numbers of the queries used to retrieve neighborhoods
            \n=item * B<table>: all neighborhood data formatted as a text table
            \n=back
            ",
        },

        "output_delimiter" => {
            ALIAS    => 'r',
            ARGCOUNT => ARGCOUNT_ONE,
            DEFAULT  => "\t",
            SUMMARY  => "column delimiter in OUTput table (perl regexp)",
        },

        "pad" => {
            ALIAS    => "p",
            ARGCOUNT => ARGCOUNT_NONE,
            DEFAULT  => 1,
            SUMMARY  => "Align output columns within blocks.",
        },

        "strand" => {
            ALIAS    => "s",
            ARGCOUNT => ARGCOUNT_NONE,
            DEFAULT  => 0,
            SUMMARY  => "Keep only features annotated on the same strand as the target features. This restriction will not be applied to nearest neighbors if a minimum number of neighbors is requested (see --minimum_number_of_neighbors above).",
        },
    );

    # Backward compatibility for -m and -n options
    $appconfig->maximum_before_query($appconfig->maximum_after_query) if ($appconfig->maximum_after_query && !$appconfig->maximum_before_query);
    $appconfig->minimum_before_query($appconfig->minimum_after_query) if ($appconfig->minimum_after_query && !$appconfig->minimum_before_query);

    # Parse annotations
    for (my $i=0; $i<=$#{$appconfig->annotation}; $i++) {
        my $file = $appconfig->annotation->[$i];
        my $hash = {};
        open(my $ann, "<$file");
        while (<$ann>) {
            chomp;
            my @row = split(/\t/);
            $hash->{$row[0]} = [ @row[1..$#row] ];
        }
        close($ann);
        $appconfig->annotation->[$i] = $hash;
    }

    # Since we make a lot of changes to the configuration object after parsing it
    # we need a replacement for AppConfig::AutoDoc's "--debug config" debugging method
    $appconfig->_dump_to_stderr if ($appconfig->debug eq 'postconfig');

    return $appconfig;
}

# POD: start
# Documentation (use option -doc or --doc to see it!)
#
# AppConfig::AutoDoc can automatically extract Plain Old Documentation
# from within the caller program's, add descriptions of the options
# created by L<define> and do some pretty formatting for output.
# 
# Note that POD may be added anywhere in your program, thus allowing 
# the documentation for a program to be left side by side with the
# function's definition.

=head1 NAME

 neighborhood_explorer - annotate, clean, reformat and/or select gene
                         neighborhoods

=head1 SYNOPSIS

 # Simplest use: normalize gi2operons and id2neighborhood output
 neighborhood_explorer neighborhood.txt > neighborhood.clean.txt

 # More complex use case: select genes from the same strand and
 # not farther then 100nt from its nearest neighbor
 neighborhood_explorer -s -d 100 neighborhood.txt > neighborhood.trimmed.txt

 # Extract accessions for proteins encoded by neighbors
 neighborhood_explorer -o neighbors > neighbors.acc

=head1 DESCRIPTION

This program helps you explore snapshots of gene neighborhooods
created by id2neighborhoods (Rotifer) and/or gi2operons (TASS).

Currently it is able to

=over

=item * Add annotations to features (CDS, RNA, etc.) as extra columns.

=item * Remove neighbors using one or more selection criteria.

=item * Reformat the neighborhood to one of the supported output formats.

=item * Extract identifiers

=back

=head1 AUTHOR

 Robson Francisco de Souza

=cut
# POD: end
