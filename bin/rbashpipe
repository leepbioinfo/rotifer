#!/bin/bash
set -e

# Make sure bash's configuration matches the one for interactive shells
export LOCAL_ROOT=/usr/local/genome
if [ -r ${LOCAL_ROOT}/etc/bashrc ]; then
    . ${LOCAL_ROOT}/etc/bashrc
fi
unset LOCAL_ROOT

#########################################################################
# HELP MESSAGE
#########################################################################
RBASHPIPE_HELP_PAGE="
=head1 NAME

 rbashpipe - Rotifer's generic Bash-based pipelines

=head1 SYNOPSIS

 # Usage template

 rbashpipe [rbashpipe options] [pipeline options] [module options] <input>

 # Simplest use case does nothing
 # (pipeline: default, modules: run, options: none)

 rbashpipe targets.txt

 # Use the default pipeline to run all scripts in ./lib/default
 # Script filenames in ./lib/default must end with a .sh suffix

 rbashpipe -m ./lib targets.txt

 # Choosing the gi2context pipeline and setting the '-p' option,
 # which must be suported by first module run by gi2context, but
 # conflicts rbashpipe's own -p option.
 #
 # Use of '--' is only required when there are such conflicts and
 # when one wants to reserve options for the next module.

 rbashpipe -p gi2context -- -p profile_dir targets.txt

=head1 DESCRIPTION

This program is a Bash shell script designed to run pipelines written in the
Bash shell language. A pipeline is a directory with Bash scripts (.sh extension)
and function definitions (bash scripts with .lib extension).

=head2  Pipeline search path

Rbashpipe pipelines are sub-directories located somewhere in the pipeline search path.
The pipeline search path can be set by the user either by adding a colon-separated list
of directories to the environment variable RBASHPIPE_MODULE_PATH or by using the '-m'
command line option multiple times.

=head2  Functions and modules

Every script left wihin a directory listed in RBASHPIPE_MODULE_PATH will be treated as
a module and run when requested by the user, unless its name ends with the suffix '.lib',
in which case the file is considered a library and executed before running any modules.
Libraries are best suited for defining bash functions that are to be used by different
modules.

=head2  Important notes

=over

=item 1 

The rbashpipe script uses bash's 'getopts' built-in function to parse the command line.
Therefore, it will not parse options set after '--'. Such options will be sent to and
may be processed by the pipeline components. 

=item 2

All options must be set **B<before>** the <input> list.

=back

=head1 AUTHORS

 Robson Francisco de Souza

=head1 OPTIONS

 ----------------:-------------------------------------------:--------------------------
     option      : description                               : default
 ----------------:-------------------------------------------:--------------------------
  -d             : set debug messages level                  : off
  -i <string>    : choose list of modules to run             : run
  -m <directory> : user's directory(ies) of pipeline modules : \$RBASHPIPE_BASE_LIBRARY
  -o <directory> : output directory tree name                : {basename}.archs 
  -p <string>    : choose pipeline by name                   : gi2context
  -x <string>    : remove module from execution stack        :
  --             : stop parsing options                      : 
 ----------------:-------------------------------------------:--------------------------

=cut
"

#########################################################################
# FUNCTIONS
#########################################################################

#========================================================================
# Usage message
#========================================================================
function rbashpipe_print_help() {
    local message="$1"
    program=`basename $0`
    local tdir=/tmp
    if [ "$TMPDIR" != "" ]; then tdir=$TMPDIR; fi
    local t=`mktemp $tdir/${program}.XXXXXX`
    echo -n "$message" >> $t
    perldoc $t
    rm -f $t
    exit 1
}
export -f rbashpipe_print_help

#========================================================================
# Component library loader: load shell functions from .lib files
#========================================================================
function rbashpipe_load_library() {
    local dir file
    local tdir=/tmp
    if [ "$TMPDIR" != "" ]; then tdir=$TMPDIR; fi
    for dir in "$@"
    do
	if [ "$RBASHPIPE_DEBUG_LEVEL" == "DEBUG" ]; then printlog -t DEBUG "processing \*.lib files from directory $dir"; fi
	if [ -d $dir ]; then
	    for file in $dir/*.lib
	    do
		if [ -s $file ]; then
		    source $file
		    for fun in $(perl -ne 'if (/^function *(\S+)\(\) *\{/) { print "$1\n" }' $file)
		    do
			export -f $fun
		    done
#		    local b=`basename $file`
#		    local t=`mktemp ${tdir}/${b}.XXXXXX`
#		    if [ -f $t ]; then
#			perl -ne 'if (/^ *function *(\S+)\(?\)? *\{/) { print "export -f $1\n" }' $file >> $t
#			source $t
#			rm -f $t
#		    fi
		fi
	    done
	fi
    done
}
export -f rbashpipe_load_library

#########################################################################
# MAIN PROGRAM
#########################################################################

#========================================================================
# Main program's settings (global variables)
#========================================================================
declare -a RBASHPIPE_MODULE_INCLUDE=(initialize)
declare -a RBASHPIPE_MODULE_EXCLUDE
declare -a RBASHPIPE_PIPELINE_DIR
typeset -i RBASHPIPE_GETOPTS_SHIFT=0
export RBASHPIPE_PIPELINE_NAME=gi2context
export RBASHPIPE_DEBUG_LEVEL="off"
export RBASHPIPE_OUTPUT_DIR=

#========================================================================
# Initialize rbashpipe's environment
#========================================================================
if [ $# -eq 0 ]; then rbashpipe_print_help "$RBASHPIPE_HELP_PAGE"; fi
if [ -z $ROTIFER_ROOT ]; then ROTIFER_ROOT=`rotifer --env root`; fi
export RBASHPIPE_LIBRARY_PATH="${ROTIFER_ROOT}/lib/rotifer/rbashpipe"
rbashpipe_load_library ${RBASHPIPE_LIBRARY_PATH}/base

#========================================================================
# Command line parser
#========================================================================
typeset -i RBASHPIPE_MODULE_INCLUDE_INDEX=${#RBASHPIPE_MODULE_INCLUDE}
typeset -i RBASHPIPE_MODULE_EXCLUDE_INDEX=${#RBASHPIPE_MODULE_EXCLUDE}
typeset -i RBASHPIPE_PIPELINE_DIR_INDEX=${#RBASHPIPE_PIPELINE_DIR}
OPTERR=0
while getopts "d:i:m:n:o:p:x:" opt
do
    case "$opt" in
	d)
	    export RBASHPIPE_DEBUG_LEVEL="$OPTARG"
	    simplelog INFO "setting debug level to $RBASHPIPE_DEBUG_LEVEL"
	    ;;

	i)
	    RBASHPIPE_MODULE_INCLUDE[$RBASHPIPE_MODULE_INCLUDE_INDEX]="$OPTARG"
	    simplelog INFO "adding pipeline module ${RBASHPIPE_MODULE_INCLUDE[$RBASHPIPE_MODULE_INCLUDE_INDEX]} to stack (position $RBASHPIPE_MODULE_INCLUDE_INDEX)"
	    RBASHPIPE_MODULE_INCLUDE_INDEX=RBASHPIPE_MODULE_INCLUDE_INDEX+1
	    ;;

	m)
	    RBASHPIPE_PIPELINE_DIR[$RBASHPIPE_PIPELINE_DIR_INDEX]="$OPTARG"
	    simplelog INFO "directory added to module search path: ${RBASHPIPE_PIPELINE_DIR[$RBASHPIPE_PIPELINE_DIR_INDEX]}"
	    RBASHPIPE_PIPELINE_DIR_INDEX=RBASHPIPE_PIPELINE_DIR_INDEX+1
	    ;;

	o)
	    export RBASHPIPE_OUTPUT_DIR="$OPTARG"
	    simplelog INFO "setting output directory name to $RBASHPIPE_OUTPUT_DIR"
	    RBASHPIPE_PIPELINE_DIR[$RBASHPIPE_PIPELINE_DIR_INDEX]="${OPTARG}/lib"
	    simplelog INFO "directory added to module search path: ${RBASHPIPE_PIPELINE_DIR[$RBASHPIPE_PIPELINE_DIR_INDEX]}"
	    RBASHPIPE_PIPELINE_DIR_INDEX=RBASHPIPE_PIPELINE_DIR_INDEX+1
	    ;;

	p)
	    export RBASHPIPE_PIPELINE_NAME="$OPTARG"
	    simplelog INFO "pipeline $RBASHPIPE_PIPELINE_NAME selected!"
	    ;;

	x)
	    RBASHPIPE_MODULE_EXCLUDE[$RBASHPIPE_MODULE_EXCLUDE_INDEX]="$OPTARG"
	    simplelog INFO "excluding pipeline module ${RBASHPIPE_MODULE_EXCLUDE[$RBASHPIPE_MODULE_EXCLUDE_INDEX]}"
	    RBASHPIPE_MODULE_EXCLUDE_INDEX=RBASHPIPE_MODULE_EXCLUDE_INDEX+1
	    ;;

	*)
	    OPTIND=$((OPTIND-1)) # Make sure this option will be processed by the next getopts call 
	    break
	    ;;
    esac
done
unset RBASHPIPE_MODULE_INCLUDE_INDEX RBASHPIPE_MODULE_EXCLUDE_INDEX RBASHPIPE_PIPELINE_DIR_INDEX opt
shift $((OPTIND-1))
OPTIND=0
OPTERR=1
if [ "$*" == "" ] && [ -z "${RBASHPIPE_OUTPUT_DIR}" ]; then
    rbashpipe_print_help "$RBASHPIPE_HELP_PAGE"
fi

#========================================================================
# Process include/exclude options
#========================================================================
if [ ${#RBASHPIPE_MODULE_INCLUDE[@]} -eq 1 ]; then
    RBASHPIPE_MODULE_INCLUDE=(initialize run)
elif [ ${#RBASHPIPE_MODULE_EXCLUDE[@]} -gt 1 ]; then
    for exclude in "${RBASHPIPE_MODULE_EXCLUDE[@]}"
    do
	RBASHPIPE_MODULE_INCLUDE=("${RBASHPIPE_MODULE_INCLUDE[@]/$exclude}")
    done
fi

#========================================================================
# Add system directories to the module's search path 
#========================================================================
if [ -d "${RBASHPIPE_LIBRARY_PATH}/${RBASHPIPE_PIPELINE_NAME}" ]; then
    RBASHPIPE_PIPELINE_DIR=("${RBASHPIPE_PIPELINE_DIR[@]}" "${RBASHPIPE_LIBRARY_PATH}/${RBASHPIPE_PIPELINE_NAME}")
fi

#========================================================================
# Load all libraries in reverse order
# If there are any system libraries for the selected pipeline, these
# will be loaded first, thus allowing users to redefine any subroutines
#========================================================================
for ((index=${#RBASHPIPE_PIPELINE_DIR[@]}-1; index>=0; index--)) {
    if [ -d "${RBASHPIPE_PIPELINE_DIR[$index]}" ]; then
	rbashpipe_load_library "${RBASHPIPE_PIPELINE_DIR[$index]}"
    fi
}
unset index
RBASHPIPE_PIPELINE_DIR=("${RBASHPIPE_PIPELINE_DIR[@]}" "${RBASHPIPE_LIBRARY_PATH}/base")

#========================================================================
# Module loader (I wonder... should I use it for libraries too?)
#========================================================================
#shopt -s expand_aliases
#shopt -s sourcepath
#alias rbashpipe_run="PATH=$(join_array : "${RBASHPIPE_PIPELINE_DIR[@]}"):$PATH source"
export PATH=$(join_array : "${RBASHPIPE_PIPELINE_DIR[@]}"):$PATH

#========================================================================
# Main program: process each module
#========================================================================
for RBASHPIPE_MODULE_BASENAME in "${RBASHPIPE_MODULE_INCLUDE[@]}"
do
    if [[ "${RBASHPIPE_MODULE_BASENAME}" == *.lib ]]; then continue; fi
    RBASHPIPE_MODULE_CURRENT=$(select_from_dir -a RBASHPIPE_PIPELINE_DIR "${RBASHPIPE_MODULE_BASENAME}")
    printlog -t START "pipeline: $RBASHPIPE_PIPELINE_NAME, module: $RBASHPIPE_MODULE_BASENAME, path: $RBASHPIPE_MODULE_CURRENT"

    if [ "$RBASHPIPE_MODULE_CURRENT" != "" ] && [ -s "$RBASHPIPE_MODULE_CURRENT" ] && [ -r "$RBASHPIPE_MODULE_CURRENT" ]; then
	if [ "$RBASHPIPE_DEBUG_LEVEL" == "DEBUG" ]; then printlog -t ARGV -- "$@"; fi
	source $RBASHPIPE_MODULE_CURRENT # Actually run pipeline module!!!! $@ will be shared with sourced scripts
	if [ "$RBASHPIPE_DEBUG_LEVEL" == "DEBUG" ]; then printlog -t ARGV -- "$@"; fi
    else
	printlog -t ERROR "pipeline: $RBASHPIPE_PIPELINE_NAME, module: $RBASHPIPE_MODULE_BASENAME => unable to execute"
    fi

    printlog -t END "pipeline: $RBASHPIPE_PIPELINE_NAME, module: $RBASHPIPE_MODULE_BASENAME, path: $RBASHPIPE_MODULE_CURRENT"
done

#========================================================================
# Exit cleanly
#========================================================================
exit $?
