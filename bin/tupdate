#!/usr/bin/env perl

# LIBRARIES and PRAGMAS: start
use FindBin;
use lib "$FindBin::RealBin/../perl/lib";
use strict;
use warnings;
# LIBRARIES and PRAGMAS: end

# Parse configuration/options
my $CONFIG = &parse_configuration();

# MAIN PROGRAM: start

# MAIN PROGRAM: end
exit 0;

###############
# Subroutines

sub load_and_process {
    my ($conf, $file) = @_;

    # Parse arguments
    my $sep = $conf->delimiter;
    my @include = @{$conf->include};
    my @filter  = @{$conf->filter};
    my %update  = %{$conf->update1};
    my (%remove); map { $remove{$_} = 1 } @{$conf->remove};

    # Compiling filters before parsing input table
    my @F = (); # Array to be used by eval block
    my %H = (); # Hash  to be used by eval block
    for (my $i=0; $i<=$#filter; $i++) {
	(my $rule = $filter[$i]) =~ s/\n/ /g;
	if (-f "$rule") {
	    open(RULE,"<$rule") || die "Could not load rules from file $rule";
	    $filter[$i] = join(" ",map { chomp; $_ } grep { !/^\#/ } <RULE>);
	    close(RULE);
	}
	$filter[$i] = eval "sub { $filter[$i] }";
	die "Error while compiling filter $rule\n$@" if ($@);
    }

    # Check whether a list of columns was specified
    my $user_include = scalar @include ? 1 : 0;

    # Parse file
    my $cnum   = 0;
    my $loaded = 0;  # Flag signalling whether column names were loaded
    my $header = {}; # Column names!
    open(F,"<$file") || die "Could not open file $file";
  F1: while (<F>) {
      chomp;

      # Unpad
      if ($conf->unpad) {
	  @F = map { s/^\s*//; s/\s*$//; $_ } split(/$sep/);
      } else {
	  @F = split(/$sep/);
      }

      # Header
      if ($conf->header && !$loaded) {
	  foreach (my $i=0; $i<=$#F; $i++) {
	      die "ERROR: table $file uses the same names for columns $i and ".$header->{$F[$i]}."!!!\nTo use headers, all column should be given unique names!!!" 
		  if (exists $header->{$F[$i]});
	      $header->{$F[$i]} = $i;
	      if (exists $remove{$F[$i]}) {
		  delete $remove{$F[$i]};
		  $remove{$i} = 1;
	      }
	      if (exists $update{$F[$i]}) {
		  $update{$i} = $update{$F[$i]};
		  delete $update{$F[$i]};
	      }
	  }
	  # Convert column names to numbers
	  @{ $columns } = map { exists $header->{$_} ? $header->{$_} : $_ } @$columns if (scalar @{$columns});
	  $loaded = 1;
	  next;
      }

      # Input filters
      if (scalar @filter) {
	  for (my $i=0; $i<=$#filter; $i++) {
	      my $val = $filter[$i]->();
	      print STDERR "$_\nFilter $i returned '$val' when applied to the row above\n" if ($CONFIG->debug);
	      next F1 if (!$val);
	  }
      }

      # Update data on load
      map { $F[$_] = $update{$_}->{$F[$_]} if (/^\d+$/ && exists $update{$_}->{$F[$_]}) } keys %update;

      # Print updated rows
      my $key = scalar @{$columns} ? join("\cA",map { $F[$_] || '_missing_key_' } @{$columns}) : '_no_keys_';
      push(@{ $hash{$key} }, [ @F ]);   # We need to store new array references because @F will be redefined in the next iteration
      @include = 0..$#F if (!$user_include && $#include < $#F); # Output as many columns as the longest row, unless set by the user
      $cnum = $#F+1 if ($cnum < $#F+1);
  }
    close(F);

    # Exclude unwanted columns
    @include = grep { !exists($remove{$_}) } @include;
    @include = map { exists $header->{$_} ? $header->{$_} : /^\d+$/ 
			 ? $_ : die "ERROR: aborting after attempt to include inexisting column $_. Check table header!"  } @include if ($conf->header);
    if ($number == 1) {
	$conf->_default('include1');
	map { $conf->include1($_) } @include;
    } elsif ($number == 2) {
	$conf->_default('include2');
	map { $conf->include2($_) } @include;
    }

    # Add row numbers
    foreach my $key (keys %hash) {
	for (my $i=0; $i<=$#{$hash{$key}}; $i++) {
	    $hash{$key}->[$i][$cnum] = $index->{$key}->[$i];
	}
    }

    #print STDERR join("\t","DEBUG:",$number,@{$columns},":",@{ $conf->get("include$number") }),"\n";
    return ($header, %hash);
}

sub hash_of_hash_from_table {
    my ($s,$n,$v) = @_;
    my $ref = $s->get($n);
    $v=~s/=\S+//;
    open(HoH,"<".$ref->{$v}) || die "Could not open hash file ".$ref->{$v};
    $ref->{$v} = { map { chomp; s/^\s+//; s/\s+$//; split(/\t+/,$_,2) } <HoH> };
    close(HoH);
}

# Creating the configuration object
# See perldoc AppConfig::AutoDoc for details
sub parse_configuration {
    use Application::Config qw(:argcount GetConfig);
    my $appconfig = GetConfig(# First, lets configure AppConfig::Autodoc by
			      # giving a hash reference with parameters
			      {},

			      'empty' => {
				  DEFAULT  => '',
				  ARGCOUNT => ARGCOUNT_ONE,
				  ALIAS    => 'e',
				  SUMMARY  => "string to fill empty cells",
			      },

			      'filter' => {
				  DEFAULT  => [],
				  ARGCOUNT => ARGCOUNT_LIST,
				  ALIAS    => 'f',
				  SUMMARY  => "Apply rule to filter rows from the input file.",
			      },

			      'header' => {
				  DEFAULT  => 0,
				  ARGCOUNT => ARGCOUNT_NONE,
				  ALIAS    => 'he|y',
				  SUMMARY  => "Boolean flag that indicates first row contain column names",
			      },

			      'input_delimiter' => {
				  DEFAULT  => "\t",
				  ARGCOUNT => ARGCOUNT_ONE,
				  ALIAS    => 's|delimiter',
				  SUMMARY  => "column delimiter of input files",
			      },

			      'output_delimiter' => {
				  DEFAULT  => "\t",
				  ARGCOUNT => ARGCOUNT_ONE,
				  ALIAS    => 'r|output',
				  SUMMARY  => "column delimiter for output table",
			      },

			      'update' => {
				  DEFAULT  => {},
				  ARGCOUNT => ARGCOUNT_HASH,
				  ACTION   => \&hash_of_hash_from_table,
				  ALIAS    => 'replace|u',
				  SUMMARY  => "Replace/update column contents of the input file. This option operates by storing the mapping of old data to new data in a hash and simply replacing the column contents when there is an exact match. Usage:

tupdate --update column=map.tsv

where 'column' is the name or number (starting at zero) of the column to be updated and map.tsv is a two column text table, map columns are separated by TABS, with old values in the first column and new ones in the second."
			      },

			      'unpad' => {
				  DEFAULT  => 1,
				  ARGCOUNT => ARGCOUNT_NONE,
				  ALIAS    => 'u',
				  SUMMARY  => "Remove leading/trailing invisible characters from all INPUT columns.",
			      },
	);

    return $appconfig;
}

# POD: start
# Documentation (use option -doc or --doc to see it!)
#
# AppConfig::AutoDoc can automatically extract Plain Old Documentation
# from within the caller program's, add descriptions of the options
# created by L<define> and do some pretty formatting for output.
# 
# Note that POD may be added anywhere in your program, thus allowing 
# the documentation for a program to be left side by side with the
# function's definition.

=head1 NAME

 test_appconfig_autodoc.pl - 
        example and prototype for AppConfig::AutoDoc

=head1 SYNOPSIS

 Setting the boolean flag on (by default is off)

 test_appconfig_autodoc.pl -option0

 Making sure the boolean flag is off

 test_appconfig_autodoc.pl -nooption0

 Setting parameter "scalar" to a string

 test_appconfig_autodoc.pl -option1 "a string"

 Setting array "option2" to a list of strings

 test_appconfig_autodoc.pl -option2 string1 -option2 string2

 Setting hash "option3" to pairs of values

 test_appconfig_autodoc.pl -option3 key1=value1 -option3 key2=value2

=head1 DESCRIPTION

This program provides an example of how to use AppConfig::AutoDoc

Please consider reading the code of this program and using it as a 
template to build your own AppConfig::AutoDoc based programs. Also,
please read the module's documentation (perldoc AppConfig::AutoDoc)
and, since most functionality in AppConfig::AutoDoc is derived from
AppConfig, see also AppConfig documentation (perldoc AppConfig)

=head1 AUTHOR

 Robson Francisco de Souza

=cut
# POD: end
