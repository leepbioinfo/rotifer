#!/usr/bin/env perl

# LIBRARIES and PRAGMAS: start
use FindBin;
use lib "$FindBin::RealBin/../perl/lib";
use Rotifer::Utils qw(ruler);
use IO::File;
use Bio::SeqIO; 
use strict;
use warnings;
# LIBRARIES and PRAGMAS: end

# Parse configuration/options
my $CONFIG = &parse_configuration();

# MAIN PROGRAM: start
my %opts = %{$CONFIG->translate};
my $sep  = $CONFIG->output_delimiter;
foreach my $file (@ARGV) {
    my $in = Bio::SeqIO->new(-format => $CONFIG->input_format, -fh => IO::File->new($file));
    while (my $s = $in->next_seq) {
	my $id = $s->display_id || $s->primary_id || $s->accession || $s->name;
	my $last_strand = 0;
	for my $frame (@{$CONFIG->frames}) {
	    my $phase  = abs($frame);
	    my $strand = $frame/$phase;
	    my $nt = $strand == 1 ? $s : $s->revcom;
	    $phase -= 1; # Descrese frame to match Bioperl's notation

	    # Print sequence and scale
	    if ($last_strand ne $strand) {
		my ($reverse, $first, $second) = (0,1,$nt->length);
		($reverse,$first,$second) = (1,$second,$first) if ($strand == -1);
		my $ruler = ruler(1, $nt->length, 10, 50, $reverse);
		print join($sep,$id,".",$ruler,"."),"\n";
		print join($sep,$id,$first,$nt->seq,$second),"\n";
	    }

	    # Print translation
	    my $aa = $nt->translate(%opts, "-frame", $phase, "-complete", 0);
	    $aa = (" ") x $phase . join("  ",split("",$aa->seq));
	    print join($sep,$id,($phase+1)*$strand,$aa,($phase+1)*$strand),"\n";
	    $last_strand = $strand;
	}
	print "\n" if ($last_strand);
    }
}

# MAIN PROGRAM: end
exit 0;

###############
# Subroutines

# Creating the configuration object
sub parse_configuration {
    use Application::Config qw(:argcount GetConfig);
    # Here I'm passing GetConfig a hash that serves both as an example and
    # prototype for the kind of argument expected by the method
    # "define" (see below) from AppConfig::AutoDoc.
    my $appconfig = GetConfig(# First, lets configure AppConfig::Autodoc by
			      # giving a hash reference with parameters
			      {},

			      'frames' => {
				  ALIAS    => "f",
				  ACTION   => sub { my ($s,$n,$v) = @_; @{$s->get($n)} = (1..3, -3..-1) if ($v eq "all") }, 
				  ARGCOUNT => ARGCOUNT_LIST,
				  DEFAULT  => [ 1 ],
				  SUMMARY  => 'Choose one or more frames to print. Valid frames are the integers from 1 to 3 (forward) and from -3 to -1 (reverse).'
			      },

			      'input_format' => {
				  ALIAS    => "if",
				  ARGCOUNT => ARGCOUNT_ONE,
				  DEFAULT  => "fasta",
				  SUMMARY  => 'Input format parser (see Bio::SeqIO).'
			      },

			      'output_format' => {
				  ALIAS    => "of",
				  ARGCOUNT => ARGCOUNT_ONE,
				  DEFAULT  => "fasta",
				  SUMMARY  => 'Output format writer. See Bio::SeqIO for standard sequence formats or set to "align" to see the translations of all requested frames aligned codon by codon to the nucleotide sequence.'
			      },

			      'output_delimiter' => {
				  ALIAS    => "r",
				  ARGCOUNT => ARGCOUNT_ONE,
				  DEFAULT  => "\t",
				  SUMMARY  => 'Output column separator.'
			      },

			      'translate' => {
				  ALIAS    => "t",
				  ACTION   => sub { my ($s,$n,$v) = @_; $s->get($n)->{$n} = "-$v" if ($v !~ /^\-/) },
				  ARGCOUNT => ARGCOUNT_HASH,
				  DEFAULT  => {},
				  SUMMARY  => "
Options for the translate() method of Bio::PrimarySeqI. Example:

nt2aa -t codontable_id=11 

will use Bacterial genetic code for translation.

See 'perldoc Bio::PrimarySeqI' and 'perldoc Bio::Tools::CodonTable' for details. 
Available genetic codes (as of 2012/09/05):

 1:	Standard
 2:	Vertebrate Mitochondrial
 3:	Yeast Mitochondrial
 4:	Mold, Protozoan, and Coelenterate Mitochondrial; Mycoplasma/Spiroplasma
 5:	Invertebrate Mitochondrial
 6:	Ciliate Nuclear; Dasycladacean Nuclear; Hexamita Nuclear
 9:	Echinoderm Mitochondrial
 10:	Euplotid Nuclear
 11:	Bacterial and Plant Plastid
 12:	Alternative Yeast Nuclear
 13:	Ascidian Mitochondrial
 14:	Flatworm Mitochondrial
 15:	Blepharisma Macronuclear
 16:	Chlorophycean Mitochondrial
 21:	Trematode Mitochondrial
 22:	Scenedesmus obliquus mitochondrial
 23:	Thraustochytrium mitochondrial code
"
			      },
	);

    push(@ARGV,"-") if ( ! -t STDIN );

    return $appconfig;
}


# POD: start
# Documentation (use option -doc or --doc to see it!)
#
# AppConfig::AutoDoc can automatically extract Plain Old Documentation
# from within the caller program's, add descriptions of the options
# created by L<define> and do some pretty formatting for output.
# 
# Note that POD may be added anywhere in your program, thus allowing 
# the documentation for a program to be left side by side with the
# function's definition.

=head1 NAME

 nt2aa - display translation of different frames of a DNA/RNA sequence

=head1 SYNOPSIS

 # Looking at translations of all sequences (universal genetic code)

 nt2aa dna.fa | less -S

 # Using the Bacterial, Archaeal and Plastid genetic code
 # See L<http://www.ncbi.nlm.nih.gov/Taxonomy/Utils/wprintgc.cgi?mode=c>

 nt2aa --translate codontable_id=11 dna.fa | less -S

=head1 DESCRIPTION

This program use BioPerl to translate input DNA or RNA sequences and 
displays the results in a human readable format. 

=head1 AUTHOR

 Robson Francisco de Souza

=cut
# POD: end
