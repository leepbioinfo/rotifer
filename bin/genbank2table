#!/usr/bin/env perl

use FindBin;
use lib "$FindBin::RealBin/../perl/lib";
use Rotifer;
use Rotifer::DB::Base;
use Rotifer::Parser;
use autodie qw(:all);
use warnings;
use strict;

# Parse command line options
my $CONFIG = parse_configuration();
my $gb2hash = Rotifer::Parser->create("genbank2hashes", config2hash($CONFIG));
my ($HEADER, $KEYS, @TABLE) = $gb2hash->parse(@ARGV);

# Print rows
print join($CONFIG->output_delimiter, @$HEADER),"\n";
foreach my $row (@TABLE) {
    my @print = ();
    foreach my $key (@$KEYS) {
	push(@print, exists $row->{$key} && defined $row->{$key} ? $row->{$key} : $CONFIG->empty);
    }
    print join($CONFIG->output_delimiter,@print),"\n";
}

exit 0;
# Terminate execution nicely

#####
# Add your subroutines below
#####

sub config2hash {
    my $config = shift;
    my $hash = {};
    foreach my $key (qw(annotation clean columns exclude include preferred_taxons remove_columns)) {
	$hash->{$key} = $config->get($key);
    }
    return $hash;
}

######
# Command line parsing, debugging and help messages
######

sub parse_configuration {
    # Parser definition
    use Application::Config qw(:argcount GetConfig);
    my $appconfig = GetConfig(# The argument to this method is a hash of hashes
			      # See perldoc AppConfig for details
			      #
			      # Parameters for parsing

			      'add_columns' => {
				  DEFAULT  => [],
				  ARGCOUNT => ARGCOUNT_LIST,
				  ALIAS    => 'add_tags|at|ac',
				  SUMMARY  => "Copy this annotation to extra columns while keeping the default columns set for --columns",
			      },

			      'annotation' => {
				  DEFAULT  => [],
				  ARGCOUNT => ARGCOUNT_LIST,
				  ALIAS    => 'ann',
				  SUMMARY  => "Print sequence comments, references or other annotations in this list",
			      },

			      'clean' => {
				  DEFAULT  => [ "db_xref" ],
				  ARGCOUNT => ARGCOUNT_LIST,
				  ALIAS    => 'c',
				  SUMMARY  => 'List of columns whose regular expression should be used to clean associated values. The regular expression will also be parsed and used to name the correponding columns if matching /(\S+):$/',
			      },

			      'columns' => {
				  DEFAULT  => [ 'product', 'db_xref=GI:', 'protein_id', 'db_xref=GeneID:', 'gene', 'locus_tag' ],
				  ARGCOUNT => ARGCOUNT_LIST,
				  ALIAS    => 't|tags',
				  SUMMARY  => "Copy annotation tags to columns",
			      },

			      'empty' => {
				  DEFAULT  => "",
				  ARGCOUNT => ARGCOUNT_ONE,
				  ALIAS    => 'e',
				  SUMMARY  => "Character to use in columns corresponding to missing columns",
			      },

			      'exclude' => {
				  DEFAULT  => [],
				  ARGCOUNT => ARGCOUNT_LIST,
				  ALIAS    => 'remove_features|xf|x',
				  SUMMARY  => 'List of features to IGNORE',
			      },

			      'include' => {
				  DEFAULT  => [ 'CDS' ],
				  ARGCOUNT => ARGCOUNT_LIST,
				  ALIAS    => 'add_feature|af|i',
				  SUMMARY  => 'List of features to extract',
			      },

			      'input_format' => {
				  DEFAULT  => 'genbank',
				  ARGCOUNT => ARGCOUNT_ONE,
				  ALIAS    => 'if|input',
				  SUMMARY  => 'Input file format (see Bio::SeqIO)',
			      },

			      'output_delimiter' => {
				  DEFAULT  => "\t",
				  ARGCOUNT => ARGCOUNT_ONE,
				  ALIAS    => 'r',
				  SUMMARY  => 'Output format',
			      },

			      'preferred_taxons' => {
				  ALIAS    => 'preferred|p',
				  ACTION   => 'EXPAND_FILES',
				  DEFAULT  => [ my $first = Rotifer::DB::Base->data_path("taxonomy","taxonomy.txt") ],
				  ARGCOUNT => ARGCOUNT_LIST,
				  SUMMARY  => 'List(s) of clades to add to the taxonomy summary column. Default: <script path>/../data/taxonomy/taxonomy.txt',
			      },

			      'remove_columns' => {
				  DEFAULT  => [],
				  ARGCOUNT => ARGCOUNT_LIST,
				  ALIAS    => 'remove_tags|rt|xc',
				  SUMMARY  => 'List of annotation tags that will NOT be extracted.',
			      },
	);

    # Add columns
    push(@{ $appconfig->columns }, @{ $appconfig->add_columns });

    # Check arguments
    unshift(@ARGV,'-') if (! -t STDIN);
    return $appconfig;
}

# POD: start
# Documentation (use option -doc or --doc to see it!)
#
# AppConfig::AutoDoc can automatically extract Plain Old Documentation
# from within the caller program's, add descriptions of the options
# created by L<define> and do some pretty formatting for output.
# 
# Note that POD may be added anywhere in your program, thus allowing 
# the documentation for a program to be left side by side with the
# function's definition.

=head1 NAME

 genbank2table - extract annotation from Genbank, DDBJ, SwissProt or EMBL files

=head1 SYNOPSIS

 # Genbank file
 genbank2table file.gbk > file.tsv

=head1 DESCRIPTION

This program extracts features and sequence annotations from standard protein and
nucleotide flat or XML files.

Input should conform to the International Nucleotide Sequence Database Collaboration
standards (B<GenBank>, B<DDBJ> and B<EMBL>) or any other B<Bio::SeqIO> format that
includes region (feature) and sequence annotations.

Output is printed in a tabular format.

See 

http://www.insdc.org/documents/feature_table.html

=head1 AUTHOR

 Robson Francisco de Souza

=cut
# POD: end
