#!/usr/bin/env perl

use FindBin;
use lib "$FindBin::RealBin/../perl/lib";
use strict;
use warnings;

# Main program
my $config = &parse_configuration();

my $clusterID = 0;
my @stack = ();
my ($name,$annotatedSize,$seqnumber);
my $sep = $config->input_separator;
while (<>) {
    chomp;
    next if /^\s+$/;
    if (/^\#\s*(\d*)\s*\;\s*(\S.+)?/) {
	$annotatedSize = $1; $name = $2; $clusterID++; $seqnumber = 1;
	$name =~ s/\s+$// if (defined $name && length $name);
	map { $_->[2] = $#stack+1; print join($config->output_separator, @$_),"\n" } @stack if (scalar @stack);
	@stack = ();
    } elsif (/^\d+/) {
	my ($s,@F) = split(/$sep/);
	if ($config->basic) {
	  push(@stack, [ $s, $clusterID, $seqnumber++, $name || "" ]);
        } else {
	  push(@stack, [ $s, $clusterID, $seqnumber++, $name || "no_name_$clusterID", @F ]);
        }
    }
}

if (scalar @stack) {
    my $j = 1;
    $annotatedSize = 1 unless (defined $annotatedSize);
    for (my $i=0; $i<=$#stack; $i++) {
	if ($i+1 > $annotatedSize) {
	    $stack[$i]->[1] = $stack[$i]->[1]+$j;
	    $stack[$i]->[2] = 1;
	    $j++;
	} else {
	    $stack[$i]->[2] = $annotatedSize;
	}
	$stack[$i]->[3] = "no_name_".$stack[$i]->[1] if ($stack[$i]->[3] =~ /^no_name_\d+$/);
	print join($config->output_separator, @{$stack[$i]}),"\n";
    }
}

exit 0;

######
# Subroutines
######

sub parse_configuration {
    use Application::Config qw(:argcount GetConfig);
    my $config = GetConfig({},

			   "basic" => {
			       ALIAS    => "b",
			       ARGCOUNT => ARGCOUNT_NONE,
			       SUMMARY  => "Print minimum information on clusters: sequence ID, cluster ID, cluster size and cluster name (if available)",
			       DEFAULT  => 0,
			   },

			   "input_separator" => {
			       ALIAS    => "s",
			       ARGCOUNT => ARGCOUNT_ONE,
			       SUMMARY  => "Intput column delimiter",
			       DEFAULT  => '\s{2,}',
			   },

			   "output_separator" => {
			       ALIAS    => "r",
			       ARGCOUNT => ARGCOUNT_ONE,
			       SUMMARY  => "Output column delimiter",
			       DEFAULT  => "\t",
			   });

    return $config;
}

=head1 NAME

 cleanblastclust2table - Convert cleanblastclust's output to a table

=head1 SYNOPSIS

 cleanblastclust2table output.bclus > output.table

=head1 DESCRIPTION

This program converts cluster information from the format
dumped by cleanblastclust to a column text table that can
be processed by text table handling programs like tjoin,
tgroup, etc. By default, all columns in the rows describing
each sequence will be printed after the following columns:

sequence ID, cluster ID, cluster size, cluster name

=cut

