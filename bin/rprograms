#!/usr/bin/env python3

import os
import warnings
warnings.filterwarnings("ignore")
import sys
import re
from multiprocessing import Process, Manager
from subprocess import PIPE, Popen
from prettytable import PrettyTable
import rotifer.core.cli as corecli
import rotifer.core.functions as rcf
__version__ = 0.10
__authors__ = 'Gilberto Kaihami'

def parse_cli():
    parser = corecli.parser(description = 'Show rotifer programs')

    # Add another options here

    parser.add( long_arg = '--tool',
                short_arg = '-t',
               default = [],
                dest = 'tool',
                helper = 'Print a summary of all Rotifer tools',
                action = "append"
                )
    parser.add( long_arg = '--tag',
               default = [],
                dest = 'tag',
                helper = 'Print a summary of all Rotifer tools',
                action = "append"
                )
    args = parser.parse_args()

    return args

def blockPrint():
    sys.stderr = open(os.devnull, 'w')
    sys.stdout = open(os.devnull, 'w')

def enablePrint():
    sys.stdout = sys.__stdout__

def search(sub_folder, filters, tags, tag_dc, res):
    ansi_escape = re.compile(r'\x1B\[[0-?]*[ -/]*[@-~]')
    for path in sub_folder:
        if os.path.isfile(path):
            p = os.path.basename(path)
            desc = ''
            version = ''
            authors = ''
            try:
                comm = Popen(f'{path} --version',stderr = PIPE, stdout = PIPE, shell = True)
                s = comm.communicate()[0].decode('utf-8').split('\n')
                if len(s) < 7 and len(s) > 0:
                    ls = [x for x in s if x != '']
                    for x in range(0, len(ls)):
                        if 'NO INPUT' in ls[x]:
                            break
                        else:
                            for y in range(1, len(ls)):

                                string = ansi_escape.sub('', ls[y])
                                if 'Version' in string:
                                    version = string.replace('Version: ', '')
                                elif 'Authors' in string:
                                    pass
                                #     authors = string.replace('Authors: ', '')
                                #     print([x.split(' ') for x in authors.split(';')])
                                elif 'Tags' in string:
                                    tags = string.replace('Tags: ', '').split(', ')
                                    print(tags)
                                else:
                                    desc += string

                        break

            except:
                pass
            try:
                pass
            except KeyboardInterrupt:
                sys.exit(1)
            if filters:
                for fil in filters:
                    if fil in p:
                        if p in tag_dc.keys():
                            res.append([p, desc, version, tag_dc[p]])
                        else:
                            res.append([p, desc, version, ['miscellaneous']])

            else:
                if p in tag_dc.keys():
                    res.append([p, desc, version, tag_dc[p]])
                else:
                    res.append([p, desc, version, ['miscellaneous']])

def show(path = __file__, filters = [], tags = []):
    if os.path.islink(__file__):
        folder = os.path.dirname(os.path.realpath(path))
    else:
        folder = os.path.dirname(os.path.abspath(path))

    t = PrettyTable(['Name', 'Description', 'Version', 'Tags'])

    ls_files = [os.path.join(folder,x) for x in os.listdir(folder) if os.path.isfile(os.path.join(folder,x))]

    tag_dc = rcf.loadConfig(':tools.rprograms.tags')
    threads = 20
    s = len(ls_files)//threads if len(ls_files) > 1 else 1
    sub_folder = [ls_files[x:x+s] for x in range(0, len(ls_files), s)]
    manager = Manager()
    ls_res = manager.list()

    jobs = []
    for x in range(0, len(sub_folder)):
        p = Process(target = search, args = (sub_folder[x],filters, tags, tag_dc, ls_res))
        p.start()
        jobs.append(p)
    for p in jobs:
        p.join()

    if tags:
        res2 = []
        dc2 = {}
        for tag in tags:
            for p, desc, version, tag_res in ls_res:
                if tag in tag_res:
                    if p not in dc2.keys():
                        dc2[p] = 1
                        res2.append([p, desc, version, tag_res])
        ls_res = res2
    for res in ls_res:
        t.add_row(res)
    t.sortby = "Name"
    t.align["Name"] = "l"
    t.align['Description'] = "l"
    t.align['Version'] = "l"
    print(t)
    sys.exit()

if __name__ == '__main__':
    args = parse_cli()

    show(filters = args.tool, tags = args.tag)


