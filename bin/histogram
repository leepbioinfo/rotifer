#!/usr/bin/env perl

use FindBin;
use lib "$FindBin::RealBin/../perl/lib";
use POSIX qw(floor ceil);
use warnings;
use strict;

# Parse command line options
my $CONFIG = parse_configuration();

# Prepare filters
my @F = (); # Array reference: rows created after join but before output filters are applied
my %H = ();    # Hash  reference: global hash accessible to output filter's code
my @FILTERS = ();
if (scalar @{$CONFIG->filter}) {
    foreach my $rule (@{$CONFIG->filter}) {
	my $ref = $rule;
	if (-f "$rule") {
	    open(RULE,"<$rule") || die "Could not load rules from file $rule";
	    $ref = join(" ",map { chomp; $_ } grep { !/^\#/ } <RULE>);
	    close(RULE);
	}
	$ref = eval "sub { $ref }";
	die "Error while compiling output filter $rule\n$@" if ($@);
	push(@FILTERS, $ref);
    }
}

# Load files while calculating bins
my %Count = ();
my $min = undef;
my $max = undef;
my $SEP = $CONFIG->input_delimiter;
my $precision = $CONFIG->precision;
my $total = 0;
foreach my $file (@ARGV) {
    open(F,"<$file") || die "Could not open file $file";
    while (<F>) {
	chomp;
	@F = split(/$SEP/);

	# Apply filters
	my $ok = 1;
	for (my $i=0; $i<=$#FILTERS; $i++) {
	    my $val = $FILTERS[$i]->($CONFIG, @F);
	    print STDERR "Output filter $i (".$CONFIG->filter->[$i].") returned '$val' for row:\n".join("\t",@F)."\n" if ($CONFIG->debug > 2);
	    if (!$val) { # Abort at the first filter that returns false (same as AND all filters) 
		$ok = 0;
		last;
	    }
	}
	next unless ($ok);

	my $col = $CONFIG->column;
	my $bin = sprintf("%.${precision}f", (floor($F[$col]/$CONFIG->binsize) * $CONFIG->binsize) + $CONFIG->binsize);
	$max = $bin if (!defined $max || $bin > $max);
	$min = $bin if (!defined $min || $bin < $min);
	$Count{$bin}++;
	$total++;
	print join("\t","BIN:", $total, $min, $max, $CONFIG->binsize, $F[$col], $bin),"\n" if ($CONFIG->debug);
    }
    close(F);
}

# Calculate statistics and print
if (defined $min) {
    print join("\t",qw(start end center count perc_frequency log2(count+1))),"\n"; # Header
    foreach (my $bin=$min; $bin<=$max; $bin=sprintf("%.${precision}f",$bin+$CONFIG->binsize)) {
	next unless (exists $Count{$bin} || $CONFIG->show_empty_bins);
	my $center = $precision+1;
	$center = sprintf("%.${center}f",$bin-($CONFIG->binsize/2));
	my @out = ( sprintf("%.${precision}f",$bin-$CONFIG->binsize), $bin, $center );

	# Calculate relative frequencies and log2(count+1)
	if (exists $Count{$bin}) {
	    my $count = defined $Count{$bin} ? $Count{$bin} : 0;
	    my $freq  = sprintf("%.${precision}f",(100*$count)/$total);
	    my $log2c = sprintf("%.${precision}f",log($count+1)/log(2));
	    push(@out, $count, $freq, $log2c);
	} else {
	    push(@out, 0, 0, 0);
	}

	print join("\t",@out),"\n";
    }
}

# Terminate execution nicely
exit 0;

#####
# Add your subroutines below
#####

######
# Command line parsing, debugging and help messages
######

sub parse_configuration {
    # Parser definition
    use Application::Config qw(:argcount GetConfig);
    my $appconfig = GetConfig(# The argument to this method is a hash of hashes

			      # How to process
			      'binsize' => {
				  ALIAS    => 'b', 
				  ACTION   => sub {
				      my ($s,$n,$v) = @_; 
				      (my $p = $v) =~ s/^\d*\.?//;
				      $s->set("precision",length($p)) unless ($s->get("precision"));
				      return $v;
				  },
				  DEFAULT  => 100,
				  ARGCOUNT => ARGCOUNT_ONE,
				  SUMMARY  => "Size of bins in histogram",
			      },

			      'column' => {
				  ALIAS    => 'c', 
				  DEFAULT  => 0,
				  ARGCOUNT => ARGCOUNT_ONE,
				  SUMMARY  => "Number of the column with data for the histogram. First column is zero.",
			      },

			      'filter' => {
				  DEFAULT  => [],
				  ARGCOUNT => ARGCOUNT_LIST,
				  ALIAS    => 'f',
				  SUMMARY  => "Filter input rows using Perl code",
			      },

			      'input_delimiter' => {
				  DEFAULT  => "\t",
				  ARGCOUNT => ARGCOUNT_ONE,
				  ALIAS    => 's|delimiter',
				  SUMMARY  => "column delimiter of input files",
			      },

			      'precision' => {
				  DEFAULT  => 0,
				  ARGCOUNT => ARGCOUNT_ONE,
				  ALIAS    => 'd',
				  SUMMARY  => "Number of decimal digits to use",
			      },

			      'show_empty_bins' => {
				  ALIAS    => 'empty|e', 
				  DEFAULT  => 0,
				  ARGCOUNT => ARGCOUNT_NONE,
				  SUMMARY  => "Show empty bins",
			      },
	);

    # Check arguments
    push(@ARGV,"-") unless (scalar @ARGV || -t STDIN);

    return $appconfig;
}

# MAIN PROGRAM: end

# POD: start
# Documentation (use option -doc or --doc to see it!)
#
# AppConfig::AutoDoc can automatically extract Plain Old Documentation
# from within the caller program's, add descriptions of the options
# created by L<define> and do some pretty formatting for output.
# 
# Note that POD may be added anywhere in your program, thus allowing 
# the documentation for a program to be left side by side with the
# function's definition.

=head1 NAME

 histogram - calculates number of elements per bin

=head1 SYNOPSIS

 # Default options
 histogram table.tsv

=head1 DESCRIPTION

This program counts the number of numeric values observed in each
interval (bin) at some column of the input table.

=head2 Output

The program prints a text table summarizing the distribution of the
observed values. Output columns are

 -----------------------------------------------------------------
     Column     :     Description
 -----------------------------------------------------------------
          start : minimum observed value of the interval
            end : upper limit for observed values in the interval
         center : (start+end)/2
          count : number of observed values in the interval
 perc_frequency : (100 * count) / number of input numeric values
  log2(count+1) : logarithm (base 2) of count+1 
 -----------------------------------------------------------------

Intervals are identified by the first two output columns, i.e.
columns "start" and "end" above. Note that intervals are right 
open, i.e. each interval corresponds to the set of X numbers
such that start <= X < end. Therefore values equal or superior
to "end" will be counted in the next interval [end, end+bin size[ . 

=head1 AUTHOR

 Robson Francisco de Souza

=cut
# POD: end
