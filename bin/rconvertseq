#!/usr/bin/env perl

# LIBRARIES and PRAGMAS: start
use FindBin;
use lib "$FindBin::RealBin/../perl/lib";
use Bio::SeqIO;
use Rotifer;
use strict;
use warnings;
# LIBRARIES and PRAGMAS: end

# Parse configuration/options
my $CONFIG = &parse_configuration();

# Prepare output stream
my $o = Bio::SeqIO->new(-fh=>\*STDOUT,
			-format=>$CONFIG->output_format,
			-displayname_flat=>1);
$o->preferred_id_type($CONFIG->id_type) if ($CONFIG->output_format eq "fasta");

foreach my $file (scalar(@ARGV) ? @ARGV : \*STDIN) {
    my $flag = -f $file ? "-file" : "-fh";
    my $in = Bio::SeqIO->new(-format=>$CONFIG->input_format, $flag => $file);
    while (my $seq = $in->next_seq) {
	if ($CONFIG->rename) {
	    my $oldid = $seq->id;
	    if (exists $CONFIG->rename->{$oldid}) {
		$seq->id($CONFIG->rename->{$oldid});
		$seq->desc($oldid." ".$seq->desc);
	    }
	}
	$o->write_seq($seq);
    }
}

exit 0;

# Creating the configuration object
# See perldoc AppConfig::AutoDoc for details
sub parse_configuration {
    use Application::Config qw(:argcount GetConfig);
    my $appconfig = GetConfig({},

			      "input_format" => {
				  ALIAS    => "if|informat|from",
				  ARGCOUNT => ARGCOUNT_ONE,
				  DEFAULT  => 'genbank',
				  SUMMARY  => "Bio::SeqIO-supported input file format.",
			      },

			      'id_type'  => {
				  ALIAS    => 't',
				  ARGCOUNT => ARGCOUNT_ONE,
				  DEFAULT  => 'primary',
				  SUMMARY  => "ID type for the preferred_id_type method from the Bio::SeqIO::fasta class.",
			      },

			      "output_format" => {
				  ALIAS    => "of|outformat|to",
				  ARGCOUNT => ARGCOUNT_ONE,
				  DEFAULT  => 'fasta',
				  SUMMARY  => "Bio::SeqIO-supported output file format.",
			      },

			      'rename'  => {
				  ALIAS    => "t",
				  ACTION   => 'EXPAND_FILES',
				  ARGCOUNT => ARGCOUNT_HASH,
				  DEFAULT  => {},
				  SUMMARY  => "Table of input identifiers (first column) to output identifiers (second column). Useful for renaming output sequences.",
			      },
	);

    return $appconfig;
}

# POD: start
# Documentation (use option -doc or --doc to see it!)
#
# AppConfig::AutoDoc can automatically extract Plain Old Documentation
# from within the caller program's, add descriptions of the options
# created by L<define> and do some pretty formatting for output.
# 
# Note that POD may be added anywhere in your program, thus allowing 
# the documentation for a program to be left side by side with the
# function's definition.

=head1 NAME

 rconvertseq - Rotifer's sequence reformatting tool

=head1 SYNOPSIS

 # Get sequence lengths

 rconvertseq -if genbank -of fasta seqs.gbk > seqs.fa

=head1 DESCRIPTION

This program uses BioPerl to reformat supported molecular sequence
files. Is is equivalent to tools such as readseq and bp_seqconvert.

See "rotifer -lib Bio::SeqIO" for a list of supported input/output
formats and "perldoc Bio::SeqIO" for further details.

=head1 AUTHOR

 Robson Francisco de Souza

=cut
# POD: end
