#!/usr/bin/env perl

use strict;
use Getopt::Std;
use vars qw( $opt_f $opt_i $opt_h $opt_c $opt_s $opt_t $opt_w $opt_y $opt_j $opt_x);
getopts('f:i:yjhcsxt:w');

# Help message
if ($opt_h) {
	die "
	-h: help\n
	-f: table with data on query sequences (taxonomy, etc)
         Obligatory columns: pid or block_id, to identify each neighborhood
	 Supported columns:
	  - classification : complete taxonomic data, will be simplified to lineage
	  - end            : position of the last base of the last gene in each block
	  - gene           : gene name
	  - lineage        : compact taxonomic data, like gi2taxnode
	  - locus          : locus_tag
	  - nucleotide     : nucleotide accession
	  - start          : position of the first base of the first gene in each block
	  - organism       : organism name
	  - plen           : protein length 
	  Notes:
	   * if available, the lineage will be used and the classification will be ignored
	   * if available, the locus_tag will be used and the gene name will be ignored

	-i: input file (optional, standard input is used if not set)\n
	-s: simple (faster, does not run gi2leaf and gi2gene)\n
	-t: control for increasing height (default = 10)\n
	-w: control for increasing width\n 
	(if not given width will be fixed at 90px)\n
	(if -w is given then width will be scaled to -t)\n
	-y: include taxnode and class after gi\n
	-x: make ? (unannotated genes) small\n
	-c: clean\n";
	exit 0;
}

# Main program begins

# Check and load input
if (( ! -t STDIN || scalar @ARGV) && !defined $opt_i) {
	$opt_i = *ARGV;
} elsif (defined $opt_i && -f $opt_i) {
	chomp($opt_i);
	open(FILE,"$opt_i") || die "Could not open input file $opt_i";
	$opt_i = *FILE;
} else {
	print "NO INPUT FILE\n";
	print "USE 'svg4operon' -h for more options\n";
	exit 1;
}
my @lines = (<$opt_i>);
close(FILE);

# Load qualifiers table
my ($table, %col) = defined $opt_f ? load_table($opt_f) : ({},());

# Parse input lines
my $max = 0;
my @aopns = (); my @nopns = ();
foreach my $lines (@lines) {
	chomp($lines);
	my (@operons) = split(/\s+/,$lines);
	my (@ndummy) = split(//,$lines);
	my $wl = scalar(@ndummy);
	$max = $wl if($wl > $max);
	my @opns = (); my @xopns = (); my $noperon = "";

	# Process block identifier
	my $gi = @operons[0];
	if ($lines =~ /^#/) { # Fake GIs?
		$noperon .= "$lines"."&";
	} else { # This row is what is actually used. I don't know what the other condition is here for
		$noperon .= "$gi"."&";
	}
	#$len = qx"gi2fasta $gi | faletters";
	#$noperon .= "$len"."&";

	#############################################################
	# Parse operon mostly to build another string and parse it again later
	#$gns = @operons[1];
	my $gnsc = pop(@operons); # Last column from input
	$gnsc =~ s/\>\|\</\>\</g;
	#print "$gnsc\n";
	if(($gnsc =~ /\|\|/)||(($gnsc =~ /\>/)&&($gnsc =~ /\</))) {
		(@xopns)=split(/\|\|/,$gnsc);
		foreach my $xopns (@xopns) {
			#print "ABHI $xopns\n";
			my @opnsxx = ();

			if(($xopns =~ /\>/)&&($xopns =~ /\</)) {
				(@opnsxx)=split(/\>/,$xopns);
				foreach my $opnsxx (@opnsxx) {
					if ($opnsxx !~ /\</) {
						$opnsxx =~ s/-//g;
						$noperon .= "F_"."$opnsxx"."&";
						my ($gix,@gnam) = split(/_/,$opnsxx);
						my $xx = "";
						foreach my $gtmp (@gnam)
						{
							chomp($gtmp);
							$xx .= "$gtmp"."_";
						}
						chop($xx);
						push(@aopns,$xx);
					} else {
						my @opnsxxx = ();
						(@opnsxxx)=split(/\</,$opnsxx);
						shift(@opnsxxx);
						foreach my $opnsxxx (@opnsxxx) {
							$opnsxxx =~ s/-//g;
							$noperon .= "R_"."$opnsxxx"."&";
							my ($gix,@gnam) = split(/_/,$opnsxxx);
							my $xx = "";
							foreach my $gtmp (@gnam) {
								chomp($gtmp);
								$xx .= "$gtmp"."_";
							}
							chop($xx);							
							push(@aopns,$xx);
						}
					}
				}
			}

			elsif(($xopns =~ /\</)&&($xopns !~ /\>/)) {
				my (@opnsx) = split(/\</,$xopns);
				shift(@opnsx);
				foreach my $opnsx (@opnsx) {
					$opnsx =~ s/-//g;
					$noperon .= "R_"."$opnsx"."&";
					my ($gix,@gnam) = split(/_/,$opnsx);
					my $xx = "";
					foreach my $gtmp (@gnam) {
						chomp($gtmp);
						$xx .= "$gtmp"."_";
					}
					chop($xx);
					push(@aopns,$xx);
					#print "ABHI $xopns\n";
				}
			}

			elsif(($xopns !~ /\</)&&($xopns =~ /\>/)) {
				my (@opnsx) = split(/\>/,$xopns);
				foreach my $opnsx (@opnsx) {
					$opnsx =~ s/-//g;
					$noperon .= "F_"."$opnsx"."&";
					my ($gix,@gnam) = split(/_/,$opnsx);
					my $xx = "";
					foreach my $gtmp (@gnam) {
						chomp($gtmp);
						$xx .= "$gtmp"."_";
					}
					chop($xx);
					push(@aopns,$xx);
					#print "ABHI $xopns\n";
				}
			}

			else {
				#print "$xopns\n";
			}
		} # foreach $xopns(@xopns)
	} # if(($gnsc =~ /\|\|/)||(($gnsc =~ /\>/)&&($gnsc =~ /\</)))

	##############################################################################################
	elsif(($gnsc =~ /\</)&&($gnsc !~ /\>/)) {
		(@opns)=split(/\</,$gnsc);
		shift(@opns);
		foreach my $opns (@opns) {
			$opns =~ s/-//g;
			$noperon .= "R_"."$opns"."&";
			my ($gix,@gnam) = split(/_/,$opns);
			my $xx = "";
			foreach my $gtmp (@gnam) {
				chomp($gtmp);
				$xx .= "$gtmp"."_";
			}
			chop($xx);
			push(@aopns,$xx);
		}
		#print "HERE $xopns\n";
	}

	#############################################################################################
	elsif(($gnsc =~ /\>/)&&($gnsc !~ /\</)) {
		#print "HERE $operon\n";
		(@opns) = split(/\>/,$gnsc);
		foreach my $opns (@opns) {
			$opns =~ s/-//g;
			$noperon .= "F_"."$opns"."&";
			my ($gix,@gnam) = split(/_/,$opns);
			my $xx = "";
			foreach my $gtmp (@gnam) {
				chomp($gtmp);
				$xx .= "$gtmp"."_";
			}
			chop($xx);
			push(@aopns,$xx);
		}
	}

	############################################################################################
	else {
		#print "$xopns\n";
	}

	############################################################################################
	push(@nopns,$noperon);
} # foreach $lines (@lines)

# Build color palette
#print "@aopns\n";
#print "@nopns\n";
my @rgb = ("FF","33","66","99","CC");
my @gbr = ("FF","33","66","99","CC");
my @brg = ("FF","33","66","99","CC");
my @colors = ();
for(my $r=0; $r<5; $r++) {
	for(my $g=1; $g<5; $g++) {
		for($b=2;$b<5;$b++) {
			my $color1 = "#"."@rgb[$r]"."@gbr[$g]"."@brg[$b]";
			my $color2 = "#"."@gbr[$g]"."@brg[$b]"."@rgb[$r]";
			my $color3 = "#"."@brg[$b]"."@rgb[$r]"."@gbr[$g]";
			push(@colors,$color1);
			push(@colors,$color2);
			push(@colors,$color3);
		}
	}
}
#unshift(@colors,"#CCCCCC");
#unshift(@colors,"#FFFFFF");
#@colors = ("#FFFFFF","#CCCCCC","#""#FF99FF","#CCFFFF","#CCFFCC","#CC99FF","#CCFF99","#FFCC99","#FFFF66","#CCCCCC","#CCCC00","#99FF33","#CC9966","#FF9999");

# 
my $k = 1;
my %seen = ();
my @uniq1 = ();
my $nc = scalar(@colors);
foreach my $aopns (@aopns) {
	unless ($seen{$aopns}) {
		# if we get here, we have not seen it before
		$seen{$aopns} = 1;
		if ($k > $nc) { $k = 1; }
		my $dmfig = "$aopns:$k";
		push(@uniq1, $dmfig);
		$k++;
	}
}
#print "@uniq1\n";

#########################################################################
########### printing operons image starts ###############################
my $tx = 10;
if ($opt_t) {
	chomp($opt_t);
	$tx = $opt_t;
}
my $hf1 = $tx; # change this to increase or decrease width and height 10
my $hf2 = ($hf1*2); # 20
my $wf1 = 80;
my $wf2 = 90;
if ($opt_w) {
	$wf1 = (($hf1*10)-$hf2); # 80
	$wf2 = (($hf1*10)-$hf1); # 90
}
my $tf = ($hf1+5); # 15

# Document size
my $pheight = (scalar(@lines)*50);
my $pwidth = (($max*5)+1000);

# Font settings
my $font_fam = "Verdana";
my $tsz = "12px";
my $bsz = "12px";
my $msz = "9px";
my $ssz = "6px";

# Print SVG header
print <<HTML;
<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg width="$pwidth" height="$pheight" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<defs>
<linearGradient id="MyGradient">
<stop offset="5%" stop-color="#cc0000" />
<stop offset="95%" stop-color="#FFFFFF" />
</linearGradient>

<style type="text/css"><![CDATA[
text.red    { font-style:normal;font-family:$font_fam;font-size:$bsz;font-weight:bold;text-decoration:normal;fill:#FF0000}
text.title  { font-style:normal;font-family:$font_fam;font-size:$tsz;font-weight:bold;text-decoration:normal;}
text.big    { font-style:normal;font-family:$font_fam;font-size:$bsz;font-weight:normal;text-decoration:normal;text-anchor:middle; }
text.medium { font-style:normal;font-family:$font_fam;font-size:$msz;font-weight:normal;text-decoration:normal;text-anchor:middle;}
text.small  { font-style:normal;font-family:$font_fam;font-size:$ssz;font-weight:normal;text-decoration:normal;text-anchor:middle;}	
polygon.arrow { stroke:#000000;stroke-width:0.1}
]]></style>
</defs>
HTML

# Print table header 
my $yc = 25; # Vertical reference (row position)
if ($opt_y) {
	print <<HTML;
<text class="red" id="TextElement" x="0" y="$yc">Genename_Species_GI</text>
<text class="red" id="TextElement" x="400" y="$yc">Species</text>
<text class="red" id="TextElement" x="850" y="$yc">Taxonomic Class</text>
<text class="red" id="TextElement" x="1200" y="$yc">Gene Neighborhoods</text>
HTML
} elsif ($opt_s) {
	print <<HTML;
<text class="red" id="TextElement" x="0" y="$yc">GI</text>
<text class="red" id="TextElement" x="350" y="$yc">Gene Neighborhoods</text>
HTML
} else {
	print <<HTML;
<text class="red" id="TextElement" x="0" y="$yc">Genename_Species_GI</text>
<text class="red" id="TextElement" x="400" y="$yc">Gene Neighborhoods</text>
HTML
}

#############################################################
# Lets parse operons AGAIN!!!!
$yc = 50;
foreach my $nopns (@nopns) {
	my $xc = 0;
	my @nxopns = split(/&/,$nopns);
	my $gi = shift(@nxopns);
	my $row = $table->{$gi} || [];

	#$len = shift(@nxopns);
	#my $no = scalar(@nxopns);
	my $orgn = "$gi"; my $leaf = "$gi";
	my $class = ""; my $taxnode = "";

	if ($opt_y) {
		if($gi !~ /^#/){
			if (defined $row) {
				if (exists $col{'nucleotide'} && defined $row->[$col{'nucleotide'}]) {
					$leaf = $row->[$col{'nucleotide'}];
					if (exists $col{'start'} && defined $row->[$col{'start'}]) {
						$leaf .= ":" . $row->[$col{'start'}];
						$leaf .= ".." . $row->[$col{'end'}] if (exists $col{'end'} && definde $row->[$col{'end'}]);
					}
				} elsif (exists $col{'gene'} && defined $row->[$col{'gene'}]) {
					$leaf = $row->[$col{'gene'}];
				}
				$class = $row->[$col{'lineage'}] || "";
				$taxnode = $row->[$col{'organism'}] || "";
			} else {
				$leaf = qx"gi2leaf $gi | grep '_'";
				$class = qx"gi2class $gi";
				$taxnode = qx"gi2taxnode $gi";
			}
		} else {
			$leaf = $gi;
		}
		chomp($leaf);
		chomp($class);
		chomp($taxnode);
	}

	else {
		if($gi !~ /^#/){
			$leaf = qx"gi2leaf $gi | grep '_'";
			$orgn = qx"gi2leaf $gi | grep ':'";
		} else {
			$leaf = $gi;
		}
		chomp($leaf);
		chomp($orgn);
		my (@dummy) = split(/:/,$orgn);
		$orgn = pop(@dummy);
	}

	if ($opt_s) {
		print <<HTML;
<a xlink:title='$orgn' xlink:href="http://www.ncbi.nlm.nih.gov/entrez/viewer.fcgi?db=protein&amp;id=$gi" target="new">
<text class="title" id="TextElement" x="0" y="$yc">$leaf</text></a>
HTML
		$xc = 350;
	}

	elsif ($opt_y) {
		print <<HTML;
<a xlink:title='$orgn' xlink:href="http://www.ncbi.nlm.nih.gov/entrez/viewer.fcgi?db=protein&amp;id=$gi" target="new">
<text class="title" id="TextElement" x="0" y="$yc">$leaf</text></a>
<text class="title" id="TextElement" x="400" y="$yc">$taxnode</text>
<text class="title" id="TextElement" x="850" y="$yc">$class</text>
HTML
		$xc = 1200;
	}

	else {
		print <<HTML;
<a xlink:title='$orgn' xlink:href="http://www.ncbi.nlm.nih.gov/entrez/viewer.fcgi?db=protein&amp;id=$gi" target="new">
<text class="title" id="TextElement" x="0" y="$yc">$leaf</text></a>
HTML
		$xc = 350;
	}

	####################################
	# Drop unannotated genes at the start and end of the block
	if ($opt_c) {
		while (@nxopns[0] =~ /\?/) {
			shift(@nxopns);
		}
		my @nnxopns = reverse(@nxopns);
		while (@nnxopns[0] =~ /\?/) {
			shift(@nnxopns);
		}
		@nxopns = reverse(@nnxopns);
	}

	####################################
	foreach my $nxopns (@nxopns) {
		my ($dr,$gin,@nam) = split(/_/,$nxopns);
		my $gnam = "";
		my $xx = "";
		foreach my $n (@nam) {
			chomp($n);
			$xx .= "$n"."_";
		}
		chop($xx);
		my $nam = $xx;

		my @chars = split(//,$nam);
		my $nchars = scalar(@chars);
		my $size = "big";
		if ($nchars > 20) {
			$size = "small";
		} elsif(($nchars > 10)&&($nchars < 21)) {
			$size = "medium";
		}

		# Set colors
		#($nm) = substr($nam,0,8); 
		my $col = "#cccccc"; my $fcol = "#FFFFFF";
		foreach my $uniq1 (@uniq1) {
			my ($onam,$op)=split(/:/,$uniq1);
			if ($nam eq $onam) {
				$col = @colors[$op];
				my @acols = split(//,$col);
				$fcol = "#000000" if ((@acols[3] =~ /[CF9]/)&&(@acols[4] =~ /[CF9]/));
			}
		}
		if ($nam =~ /\?/) {
			$col = "#cccccc";
			$fcol = "#000000";
		}
		if ($nam =~ /\*/) {
			$col = "#cc0000";
			#$col = "url(#MyGradient)";
			$fcol = "#ffffff";
		}

		if ($opt_s) {
			$gnam = $gin;
		} else {
			if (exists $col{'locus'} && defined $row->[$col{'locus'}]) {
				$gnam = $row->[$col{'locus'}];
			} else {	
				$gnam = qx"gi2gene $gin";
			}
			chomp($gnam);
		}

		# 
		my $yp = ($yc - $tf);
		my $yt = ($yc);
		my $xt = ($xc + ($wf2/2));

		# Print forward gene (strand == 1)
		if ($dr =~ /F/) {
			my $xcc1=$xc;
			my $ycc1=$yp;
			my $xcc2=($xc+$wf1);
			my $ycc2=$yp;
			my $xcc3=($xc+$wf2);
			my $ycc3=($yp+$hf1);
			my $xcc4=($xc+$wf1);
			my $ycc4=($yp+$hf2);
			my $xcc5=$xc;
			my $ycc5=($yp+$hf2);
			if (($nam =~ /\?/)&&($opt_x)) {
				$xcc2= ($xcc2-($wf1-10));
				$xcc3= ($xcc3-($wf1-10));
				$xcc4= ($xcc4-($wf1-10));
				$xt = ($xt-(($wf1-10)/2));
				$xc = ($xc-($wf1-10));
			}
			print <<HTML;
<a xlink:title='$gnam' xlink:href="http://www.ncbi.nlm.nih.gov/entrez/viewer.fcgi?db=protein&amp;id=$gin"  target="new">
<polygon class="arrow" id="polygon" points="$xcc1,$ycc1 $xcc2,$ycc2 $xcc3,$ycc3 $xcc4,$ycc4 $xcc5,$ycc5" style="fill:$col;"/><text class="$size" id="TextElement" x="$xt" y="$yt" style="fill:$fcol">$nam</text>
</a>
HTML
		}

		# Print reverse gene (strand == -1)
		else {
			my $xcc1=$xc;
			my $ycc1=($yp+$hf1);
			my $xcc2=($xc+$hf1);
			my $ycc2=$yp;
			my $xcc3=($xc+$wf2);
			my $ycc3=$yp;
			my $xcc4=($xc+$wf2);
			my $ycc4=($yp+$hf2);
			my $xcc5=($xc+$hf1);
			my $ycc5=($yp+$hf2);
			if (($nam =~ /\?/)&&($opt_x)) {
				#$xcc1= ($xcc1-80);
				$xcc3= ($xcc3-($wf1-10));
				$xcc4= ($xcc4-($wf1-10));
				$xt = ($xt-(($wf1-10)/2));
				$xc = ($xc-($wf1-10));
			}
			print <<HTML;
<a xlink:title='$gnam' xlink:href="http://www.ncbi.nlm.nih.gov/entrez/viewer.fcgi?db=protein&amp;id=$gin" target="new">
<polygon class="arrow" id="polygon" points="$xcc1,$ycc1 $xcc2,$ycc2 $xcc3,$ycc3 $xcc4,$ycc4 $xcc5,$ycc5" style="fill:$col;"/><text class="$size" id="TextElement" x="$xt" y="$yt" style="fill:$fcol">$nam</text>
</a>
HTML
		}

		# Increment horizontal position marker
		$xc =($xc + $wf2);
	} # foreach $nxopns (@nxopns)
	$yc = ($yc + ($hf2+10));
} # foreach $nopns (@nopns)

########### printing operons image finished ############################################
print <<HTML;
</svg>
HTML

########################################################################################
# Subroutines
########################################################################################

########################################################################################
# Load operon data from table (taxonomy, gene name, etc)
sub load_table {
	my $file = shift;
	my %tax = (); my $add_lineage = 0;
	my $table = {};
	my %columns = ();
	open(TABLE,"<$file") || die "Unable to open table $file";
	while (<TABLE>) {
		chomp;
		my @F = split(/\t/);

		# Load header and lineages
		if (!scalar(keys %col)) {
			%columns = map { ($F[$_],$_) } 0..$#F;
			die "Input table for option -f should contain a column named 'block_id' or, alternatively, a column named 'pid'." unless (exists $columns{"pid"});
			if (exists $columns{"classification"}) {
				if ( -f "$ENV{TASS_DATA}/taxonomy.txt" ) {
					open(TAX,"<$ENV{TASS_DATA}/taxonomy.txt") || die "Could not open taxonomy file $ENV{TASS_DATA}/taxonomy.txt";
					%tax = map { chomp; ($_,1) } grep { length($_) && $_ !~ /^\#/ } <TAX>;
					$columns{'lineage'} = $#F+1 unless (exists $columns{'lineage'});
					$add_lineage == scalar(keys %tax);
					close(TAX);
				}
			}
			$opt_y = 1 if (grep { exists $columns{$_} } qw(organism classification lineage)); # Auto-activate printing taxonomic data
			$opt_s = 0 if (exists $columns{'locus'} || exists $columns{'gene'}); # Make sure gene and locus data are printed
			next;
		}

		# Add lineage column
		if ($add_lineage && !defined($F[$columns{'lineage'}]) && exists $columns{'classification'} && defined $F[$columns{'classification'}]) {
			my @taxonomy = split(/\; */,$F[$columns{'classification'}]);
			$F[$columns{'lineage'}] = join(">", map { lc($_) } grep { exists $tax{$_} } @taxonomy);
			$F[$columns{'lineage'}] = $taxonomy[0] if (!defined $F[$columns{'lineage'}] || !length $F[$columns{'lineage'}]);
		}

		# Make sure locus column has data
		$F[$columns{'locus'}] = $F[$columns{'gene'}] if (!defined $F[$columns{'locus'}] && defined $F[$columns{'gene'}]);

		my $id = exists $columns{"block_id"} && defined $columns{"block_id"} ? $F[$columns{"block_id"}] : $F[$columns{"pid"}];
		$table->{$id} = [ @F ];
	} # while (<TABLE>)
	close(TABLE);

	return ($table,%columns);
}
