#!/usr/bin/env perl

# LIBRARIES and PRAGMAS: start
use autodie qw(:all);
use Cwd;
use FindBin;
use lib "$FindBin::RealBin/../perl/lib";
use File::Path qw(make_path remove_tree);
use File::Spec;
use Rotifer;
use Rotifer::Config::Environment;
use Rotifer::DB::Base;
use Rotifer::Tools::Rrsw;
use Rotifer::Utils qw(array_of_arrays_to_text);
use Sys::Hostname;
use strict;
use warnings;
# LIBRARIES and PRAGMAS: end

# MAIN PROGRAM: start
# Parse configuration/options
my $CONFIG = &parse_configuration();
my $TABLE  = load_targets_table($CONFIG->table);
my $log    = File::Spec->catfile($Rotifer::RealBaseDir, "log", "${Rotifer::RealBasename}.log");

# Filter targets
@{$TABLE} = grep { !exists $CONFIG->_exclude->{uc $_->[0]} } @{$TABLE};
my %include = map { (uc($_), 1) } @ARGV;
@{$TABLE} = grep { $_->[0] eq 'NAME' || exists $include{uc $_->[0]} } @{$TABLE} if (scalar(@ARGV) && !exists $include{ALL});

# Print paths and exit
if ($CONFIG->list) {
    print array_of_arrays_to_text(@{$TABLE});
    exit 0;
}

# Process each target
unlink($log) if (!$CONFIG->test && -f $log);
foreach my $row (@{$TABLE}) {
    my ($name,$method,$server,$path,$processor,$options) = @$row;
    next if ($name eq "NAME"); # Avoid table header
#    next unless (exists $included{ALL} || exists $included{uc $name});

    # URIs
    my $orig = "${method}://$server/$path/";
    my $dest = File::Spec->catfile($CONFIG->source, $server, $path, "");

    # Sync: create mirror directory tree, sync and process
    make_path($dest) unless ($CONFIG->test || -d $dest);
    my $changed = $CONFIG->download ? 0 : 1; # Was any file modified/downloaded?
    if ($CONFIG->download && defined $method && length $method && $method !~ /^(off|none)$/i) {
	my $downloader = Rotifer::Tools::Rrsw->new($method,
						   target  => $name,
						   test    => $CONFIG->test,
					           debug   => $CONFIG->debug,
						   options => $options || {},
						   );
	$changed = $downloader->execute($orig, $method eq "ftp" ? $CONFIG->source : $dest);
    }

    # Process after unpacking
    if ($changed && $CONFIG->process && defined $processor && length $processor && $processor !~ /^(off|none)$/i) {
	my $processed = File::Spec->catfile($CONFIG->processed, $name);
	$processor = Rotifer::Tools::Rrsw->new($processor,
					       target  => $name,
					       test    => $CONFIG->test,
					       debug   => $CONFIG->debug,
					       options => $options || {},
					       );
	$processor->execute($dest, $processed);
    }
}

# MAIN PROGRAM: end
exit 0;

###############
# Subroutines

sub load_targets_table {
    my $name = shift;
    import YAML::XS;
    no warnings;
    $YAML::XS::LoadCode    = 1; # Enable parsing perl code from configuration
    $YAML::XS::UseCode     = 1; # 
    $YAML::XS::LoadBlessed = 1; # 
    my $table = Config::Any->load_files({ files => [ $name ], use_ext => 1, flatten_to_hash => 1 });
    return $table->{$name};
    use warnings;
}

sub get_default_table {
    my $name = Rotifer::Config::Environment->host_base_name;
    $name = File::Spec->catfile($Rotifer::RealScriptEtc, "rrsw.${name}.yml");
    $name = File::Spec->catfile($Rotifer::RealScriptEtc, "rrsw.yml") unless ( -r $name );
    return -r $name ? $name : undef;
}

# See perldoc AppConfig::AutoDoc for details
sub parse_configuration {
    use Application::Config qw(:argcount GetConfig);
    my $datadir = Rotifer::DB::Base->data_path(); # Make sure context is scalar

    # Parse
    my $appconfig = GetConfig({ EXPECT_INPUT => 0 },
#				DEACTIVATE_EXTENSION => [ "configfile" ] },

			      'download' => {
				  ALIAS    => "d",
				  ARGCOUNT => ARGCOUNT_NONE,
				  DEFAULT  => 1,
				  SUMMARY  => "Enable/disable downloading of taregts. Useful to disable downloading while testing processors.",
			      },

			      'exclude' => {
				  ALIAS    => "x",
				  ACTION   => sub { my ($s,$n,$v) = @_; my $ref = $s->get($n); $ref->[$#{$ref}] = uc($v) },
				  ARGCOUNT => ARGCOUNT_LIST,
				  DEFAULT  => [],
				  SUMMARY  => "Ignore all targets in this list.",
			      },

			      'list' => {
				  ALIAS    => "l",
				  ARGCOUNT => ARGCOUNT_NONE,
				  DEFAULT  => 0,
				  SUMMARY  => "Display configured data sources (see --table for source's definition).",
			      },

			      'process' => {
				  ALIAS    => "f",
				  ARGCOUNT => ARGCOUNT_NONE,
				  DEFAULT  => 1,
				  SUMMARY  => "Whether to (post-)process files, even if no new/modified files were downloaded.",
			      },

			      'processed' => {
				  ALIAS    => "p",
				  ARGCOUNT => ARGCOUNT_ONE,
				  DEFAULT  => $datadir,
				  SUMMARY  => "Root of the directory tree were data should be placed after it has been processed/unpacked.",
			      },

			      'source' => {
				  ALIAS    => "s",
				  ARGCOUNT => ARGCOUNT_ONE,
				  DEFAULT  => File::Spec->catfile($datadir,"src"),
				  SUMMARY  => "Root of the directory tree were your raw data was or should be downloaded to.",
			      },

			      'table' => {
				  ALIAS    => "t",
				  ARGCOUNT => ARGCOUNT_ONE,
				  DEFAULT  => &get_default_table,
				  SUMMARY  => "Path to a YAML configuration file that defines the targets and how to process them. See, for example

 $Rotifer::RealScriptEtc/rrsw.yml

",
			      },

			      'temporary_directory' => {
				  ALIAS    => "tmp",
				  ARGCOUNT => ARGCOUNT_ONE,
				  DEFAULT  => File::Spec->catfile($datadir,"tmp/rrsw"),
				  SUMMARY  => "Root of the directory tree were your temporary files, if needed, will be created.",
			      },

			      'test' => {
				  ALIAS    => "n",
				  ARGCOUNT => ARGCOUNT_NONE,
				  DEFAULT  => 0,
				  SUMMARY  => "Run in test mode, i.e. display actions that would be performed but make no changes.",
			      },
	);

    # Internal definition
    $appconfig->_pod(1) && exit 1 unless ($appconfig->list || scalar @ARGV);
    $appconfig->define("_exclude" => { DEFAULT => { map { ($_,1) } @{$appconfig->exclude} }, ARGCOUNT => ARGCOUNT_HASH });

    return $appconfig;
}

# POD: start
# Documentation (use option -doc or --doc to see it!)
#
# AppConfig::AutoDoc can automatically extract Plain Old Documentation
# from within the caller program's, add descriptions of the options
# created by L<define> and do some pretty formatting for output.
# 
# Note that POD may be added anywhere in your program, thus allowing 
# the documentation for a program to be left side by side with the
# function's definition.

=head1 NAME

 rrsw - Rotifer's RSync Wrapper: generic data downloader and manager

=head1 SYNOPSIS

 # Using default behaviour: process all targets in
 #  `rotifer -e root`/etc/rrsw/rrsw.`hostname | cut -f 1 -d .`.yml
 # or, if this file doesn't exist, process all targets from
 #  `rotifer -e root`/etc/rrsw/rrsw.yml

 rrsw all

 # Same thing on test mode

 rrsw -n all

 # Show targets configured for your system

 rrsw -l

 # Update only target name1

 rrsw name1

=head1 DESCRIPTION

Rotifer's RSync Wrapper is a tool to download and unpack or process
files from remote or local sources. It may be used to maintain 
mirrors of often used databaases or datasets available on the
Internet like the BLAST formatted files and/or other databases
maintained by the NCBI (ftp://ftp.ncbi.nlm.nih.gov) or the files
distributed by the Biomirror repositories (http://www.bio-mirror.net/).  

It works by providing a simplified and configurable interface for a 
variety of download and synchronazation tools that are commonly found
in Unix-like environments like rsync, wget and LWP.

See below for details on how to configure it for your environment.

=head1 CONFIGURATION

=head2 The table of targets

The main configuration file is the table defined by the option --table
(see below). This table is a YAML file (http://www.yaml.org).

If present, the file

 <ROTIFER_ROOT>/etc/rotifer/rrsw/rrsw.${HOSTNAME}.yml

is used as the default table. If this file does not exist, the file

 <ROTIFER_ROOT>/etc/rotifer/rrsw/rrsw.yml

provided with this package is used as the  default table. 

In addition to the table of targets, some files named after each target
may be provided and will be used by the different downloaders and
processors to control the download and processing of the targets 
(see below).

=head2 Rules

If a target is downloaded and synchronized using rsync, an rsync rules 
file named ROTIFER_ROOT/etc/rotifer/rrsw/<target name>.rules may be 
created to control rsync's behaviour. See the examples include in this
package and refer to the section "FILTER RULES" in the rsync manual
("man rsync") for details on the syntax of rsync rules.

=head2 Target YAML files

Users may also control the behaviour of rrsw when processing each target
by creating YAML files names <target>.yml in the etc/rotifer/rrsw directory.
See example files in this distribution for details.

=head1 AUTHOR

 Robson Francisco de Souza

=cut
# POD: end
