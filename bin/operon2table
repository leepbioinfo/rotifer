#!/usr/bin/env perl

# LIBRARIES and PRAGMAS: start
use FindBin;
use lib "$FindBin::RealBin/../perl/lib";
use strict;
use warnings;
# LIBRARIES and PRAGMAS: end

# Parse configuration/options
my $CONFIG = &parse_configuration();

# MAIN PROGRAM: start
while (<>) {
    chomp;
    next if /^\s*$/; # Ignore empty rows
    my @F = split(/ {2,}/);
    $F[3] =~ s/^<-//; $F[3] =~ s/->$//; 
    my $a = $F[3]; $a =~ s/(\|\||-><-|<-|->)/\t/g;
    my @a = split(/\t/,$a); 
    map { ($a,$b) = /^([^\_]+)_(\S+)/; print join("\t",$a,$F[0],$b),"\n" } @a;
}

exit 0;
# MAIN PROGRAM: end

###############
# Subroutines

# See perldoc AppConfig::AutoDoc for details
sub parse_configuration {
    use Application::Config qw(:argcount GetConfig);
    # Here I'm passing GetConfig a hash that serves both as an example and
    # prototype for the kind of argument expected by the method
    # "define" (see below) from AppConfig::AutoDoc.
    my $appconfig = GetConfig(# 
	);

    return $appconfig;
}


# POD: start
# Documentation (use option -doc or --doc to see it!)
#
# AppConfig::AutoDoc can automatically extract Plain Old Documentation
# from within the caller program's, add descriptions of the options
# created by L<define> and do some pretty formatting for output.
# 
# Note that POD may be added anywhere in your program, thus allowing 
# the documentation for a program to be left side by side with the
# function's definition.

=head1 NAME

 operon2table - extract annotations from operon_parse output format

=head1 SYNOPSIS

 operon2table operons.txt

=head1 DESCRIPTION

This program extracts and prints sequence identifiers and annotations
from within files conforming to the output of the operon_parse script
(TASS package).

The data is printed in a table format suitable for Rotifer's table tools.

=head1 AUTHOR

 Robson Francisco de Souza

=cut
# POD: end
