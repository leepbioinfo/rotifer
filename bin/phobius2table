#!/usr/bin/env perl

# LIBRARIES and PRAGMAS: start
use FindBin;
use lib "$FindBin::RealBin/../perl/lib";
use Rotifer::Utils qw(nr2ids);
use strict;
use warnings;
# LIBRARIES and PRAGMAS: end

# Parse configuration/options
my $CONFIG = &parse_configuration();

# MAIN PROGRAM: start
my $id = "";
foreach my $file (@ARGV) {
    open(F,"<$file") || die "Could not open file $file";
    while (<F>) {
	chomp;

	/^ID\s+(\S+)/ && do { 
	    my ($hash) = nr2ids($1);
	    $id = $hash->{accession};
	    next;
	};

	/^FT\s+(TRANSMEM|SIGNAL)/ && do {
	    my @a = split(/\s+/);
	    print join("\t", $id, $a[1]=~/SIGNAL/? "SP" : "TM", @a[2..3], $CONFIG->evalue),"\n";
	    next;
	};
    }
    close(F);
}

# Exit cleanly
exit 0;
# MAIN PROGRAM: end

###############
# Subroutines

# Creating the configuration object
#
# The Application::Config library we are using here is just
# a wrapper that facilitates the use of AppConfig::AutoDoc.
#
# Because it depends on other libraries,Application::Config
# documentation is far from complete but contains the pointers
# to detailed documentation on its dependencies. The user should
# start reading "perldoc Application::Config" and them read the
# docs on each of its dependencies in the order below:
#
# Application::Config
#  AppConfig::AutoDoc
#   AppConfig
#    AppConfig::State
#
# The argument for new is an anonymous hash. This hash is
# used to control the bahaviour of AppConfig::AutoDoc. In
# This case, setting EXPAND_ARGV to 1 enables tranfers of
# all words in input files to @ARGV. EXPAND_STDIN does the
# same for text comming through pipelines (standard input)
#
# See perldoc AppConfig::AutoDoc for details
sub parse_configuration {
    use Application::Config qw(:argcount GetConfig);

    # Here I'm passing GetConfig a hash that serves both as an example and
    # prototype for the kind of argument expected by the method
    # "define" (see below) from AppConfig::AutoDoc.
    my $appconfig = GetConfig(# First, lets configure AppConfig::Autodoc by
			      # giving a hash reference with parameters
			      {},

			      'evalue' => {
				  ALIAS    => 'e',
				  ARGCOUNT => ARGCOUNT_ONE,
				  DEFAULT  => 0,
				  SUMMARY  => "Set an arbitrary E-value for the evalue column.",
			      },
	);
    unshift(@ARGV,"-") if ( ! -t STDIN );

    return $appconfig;
}


# POD: start
# Documentation (use option -doc or --doc to see it!)
#
# AppConfig::AutoDoc can automatically extract Plain Old Documentation
# from within the caller program's, add descriptions of the options
# created by L<define> and do some pretty formatting for output.
# 
# Note that POD may be added anywhere in your program, thus allowing 
# the documentation for a program to be left side by side with the
# function's definition.

=head1 NAME

 phobius2table - convert phobius output to a domain table

=head1 SYNOPSIS

 phobius input.fa | phobius2table > input.phobius.table

=head1 DESCRIPTION

This program parses Phobius output and reformats it as a table
decribing the coordinates of the matches.

=head1 AUTHOR

 Robson Francisco de Souza

=cut
# POD: end
