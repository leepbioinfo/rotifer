#!/usr/bin/env perl

use FindBin;
use lib "$FindBin::RealBin/../perl/lib";
use Rotifer;
use Scalar::Util qw(reftype);
use strict;
use warnings;
our $VERSION = "0.99.95";

# Parse command line options
my $CONFIG = parse_configuration();

# Compile post-join filters
# This block and the joining block below require declaration of the
# variables @F and %H, which might be referred to output filter's
# code set at run time by command line option --filter.
my @F = undef; # Array reference: rows created after join but before output filters are applied
my %H = ();    # Hash  reference: global hash accessible to output filter's code
my @FILTERS = ();
if (scalar @{$CONFIG->filter}) {
    foreach my $rule (@{$CONFIG->filter}) {
	my $ref = $rule;
	if (-f "$rule") {
	    open(RULE,"<$rule") || die "Could not load rules from file $rule";
	    $ref = join(" ",map { chomp; $_ } grep { !/^\#/ } <RULE>);
	    close(RULE);
	}
	$ref = eval "sub { $ref }";
	die "Error while compiling output filter $rule\n$@" if ($@);
	push(@FILTERS, $ref);
    }
}

# Parsing input tables
my ($Header1, $Header2, %table1, %table2);
($Header1,%table1) = parse_table($CONFIG, $ARGV[0], 1);
($Header2,%table2) = defined $ARGV[1] ? parse_table($CONFIG, $ARGV[1], 2) : ([],());

# Join
my ($Length, $RESULT) = hashJoin($CONFIG, $Header1, \%table1, $Header2, \%table2);

# Print header
if (scalar(@$Header1) || scalar(@$Header2)) {
    # Build header
    my @header = ();
    if (defined $CONFIG->exclusive) {
	if ($CONFIG->exclusive == 1) {
	    @header = map { $Header1->[$_] || "c$_" } @{$CONFIG->include1};
	} elsif ($CONFIG->exclusive == 2) {
	    @header = map { $Header2->[$_] || "c$_" } @{$CONFIG->include2};
	}
	@header = map { "c$_" } 0..$#{$Length} unless (scalar @header);
    } else {
	if (scalar @{$CONFIG->include1}) {
	    @header = map { $Header1->[$_] || "c$_" } @{$CONFIG->include1};
	} else {
	    @header = map { "c$_" } 0..$#{$Header1};
	}
	if (scalar @{$CONFIG->include2}) {
	    push(@header, map { $Header2->[$_] || "c$_" } @{$CONFIG->include2});
	} elsif ($#{$Header2} > -1) {
	    push(@header, map { "c$_" } 0..$#{$Header2});
	}
    }

    # Rename duplicate columns
    if ($CONFIG->rename_duplicates) {
	my %columnCount = ();
	for (my $i=0; $i<=$#header; $i++) {
	    $header[$i] = "c$i" unless (defined $header[$i]);
	    (my $basename = $header[$i]) =~ s/_\d+$//;
	    if (exists $columnCount{$basename}) {
		$header[$i] = $basename . "_" . ++$columnCount{$basename};
	    } else {
		$columnCount{$basename} = 1;
	    }
	}
    }

    # Replace column names with indices in sorting specs
    my $sortRef = $CONFIG->sort;
    for (my $i=0; $i<=$#{$sortRef}; $i++) {
	my $reverse = ($sortRef->[$i] =~ s/\,+r$//);
	for (my $j=0; $j<=$#header; $j++) {
	    if ($sortRef->[$i] eq $header[$j]) {
		$sortRef->[$i] = $j;
		last;
	    }
	}
	$sortRef->[$i] .= ",r" if ($reverse);
    }

    # Print header
    print join($CONFIG->output_delimiter,
	       map {
		   $Length->[$_] = (!defined($Length->[$_]) || $Length->[$_] < length($header[$_] || '')) ? length($header[$_] || '') : $Length->[$_];
		   pad($CONFIG, $Length->[$_], $header[$_])
	       } 0..$#header),"\n";
} # if (scalar(@$Header1) || scalar(@$Header2))

# Sort and print joined table
foreach my $row (sort sort_matrix_rows @$RESULT) {
    pop(@$row) for 0..1;
    print join($CONFIG->output_delimiter,map { pad($CONFIG, $Length->[$_], $row->[$_]) } 0..$#{$row}),"\n";
}

exit 0;

##########################
## Subroutines
##########################

sub hashJoin {
    my ($conf, $header1, $table1, $header2, $table2) = @_;

    # Joining tables
    my $nCol1 = scalar(@{$conf->include1});
    my $nCol2 = scalar(@{$conf->include2});
    my @keys  = keys %$table1;
    push(@keys, grep { !exists $table1->{$_} } keys %$table2);
    my $colLength = []; # Column length
    my $joinedTable = [];
    foreach my $key (@keys) {
	my @joined = (); # Array of rows after join is applied

	if (exists($table1->{$key}) && exists($table2->{$key})) { # Common value(s) at target columns in both tables!
	    if ($conf->_check_overlap) { # True if user wants to join tables based on interval overlap (--overlap)
		my %matched2 = (); # Hash to store matched rows from the 2nd file
		foreach my $l1 (@{ $table1->{$key} }) {
		    my @out1 = (); map { push(@out1,$l1->[$_]) } @{$conf->include1};
		    my $ov1 = 0; my $i = 0;
		    foreach my $l2 (@{ $table2->{$key} }) {
			if (overlap($conf, $l1, $l2)) {
			    if (!defined $conf->exclusive) {
				my @out2 = (); map { push(@out2,$l2->[$_]) } @{$conf->include2};
				push(@joined, [ @out1, @out2, $l1->[$#{$l1}], $l2->[$#{$l2}] ]);
			    }
			    $ov1 = 1;
			    $matched2{$i} = 1; # Rows that overlap
			}
			$i++;
		    }
		    if (!$ov1) { # No overlaps found: print intervals found only in table 1!
			next if ($conf->type !~ /^(left|full)/);
			if (defined $conf->exclusive) {
			    next if ($conf->exclusive == 2);
			} else {
			    map { push(@out1, $conf->empty) } 1..$nCol2;
			}
			push(@joined, [ @out1, $l1->[$#{$l1}], undef ]);
		    }
		}
		if (scalar(keys %matched2) != scalar(@{$table2->{$key}})) { # Not all rows from the second file matched!
		    if ($conf->type =~ /^(right|full)/ && (!defined $conf->exclusive || $conf->exclusive == 2)) {
			for (my $i=0; $i<=$#{$table2->{$key}}; $i++) {
			    next if (exists $matched2{$i});
			    my @out2 = (); map { push(@out2,$table2->{$key}->[$i][$_]) } @{$conf->include2};
			    map { unshift(@out2, $conf->empty) } 1..$nCol1 unless (defined $conf->exclusive);
			    push(@joined, [ @out2, undef, $table2->{$key}->[$i][$#{$table2->{$key}}] ]);
			}
		    }
		}
	    } elsif (!defined $conf->exclusive) {
		foreach my $l1 (@{ $table1->{$key} }) {
		    my @out1 = (); map { push(@out1,$l1->[$_]) } @{$conf->include1};
		    foreach my $l2 (@{ $table2->{$key} }) {
			my @out2 = (); map { push(@out2,$l2->[$_]) } @{$conf->include2};
			push(@joined, [ @out1, @out2, $l1->[$#{$l1}], $l2->[$#{$l2}] ]);
		    }
		}
	    }
	}

	elsif (exists($table1->{$key})  && !exists($table2->{$key})) { # Table1 only
	    next if (defined $conf->exclusive && $conf->exclusive == 2);
	    next unless ($conf->type =~ /^(left|full)/);
	    foreach my $l1 (@{ $table1->{$key} }) {
		my @out1 = map { $l1->[$_] } @{$conf->include1};
		unless (defined $conf->exclusive) {
		    my @out2 = ();
		    if ($conf->auto_fill && scalar(keys %$table2) && $#{$conf->column1} == $#{$conf->column2}) {
			my $col1 = $conf->column1;
			my $col2 = $conf->column2;
			my @tmp2 = map { $conf->empty } 0..$#{$header2};
			for (my $i=0; $i<=$#{$col1}; $i++) {
			    $tmp2[$col2->[$i]] = $l1->[$col1->[$i]];
			}
			@out2 = map { $tmp2[$_] } @{$conf->include2};
		    } else {
			@out2 = map { $conf->empty } 1..$nCol2;
		    }
		    push(@out1, @out2);
		}
		push(@joined, [ @out1, $l1->[$#{$l1}], undef ]);
	    }
	}

	elsif (!exists($table1->{$key}) &&  exists($table2->{$key})) { # Table2 only
	    next if (defined $conf->exclusive && $conf->exclusive == 1);
	    next unless ($conf->type =~ /^(right|full)/);
	    foreach my $l2 (@{ $table2->{$key} }) {
		my @out2 = map { $l2->[$_] } @{$conf->include2};
		unless (defined $conf->exclusive) {
		    my @out1 = ();
		    if ($conf->auto_fill && scalar(keys %$table1) && $#{$conf->column1} == $#{$conf->column2}) {
			my $col1 = $conf->column1;
			my $col2 = $conf->column2;
			my @tmp1 = map { $conf->empty } 0..$#{$header1};
			for (my $i=0; $i<=$#{$col2}; $i++) {
			    $tmp1[$col1->[$i]] = $l2->[$col2->[$i]];
			}
			@out1 = map { $tmp1[$_] } @{$conf->include1};
		    } else {
			@out1 = map { $conf->empty } 1..$nCol1;
		    }
		    unshift(@out2, @out1);
		}
		push(@joined, [ @out2, undef, $l2->[$#{$l2}] ]);
	    }
	}

	# Post-processing: post-join filters
	foreach my $joined (@joined) {
	    @F = @$joined; # Set @F value inside the loop to force use of the global variable referred by the filter code
	    my @rnum = (pop @F); # Extract row numbers
	    unshift(@rnum, pop(@F)) if (defined $ARGV[1]);
	    my $ok = 1;
	    for (my $i=0; $i<=$#FILTERS; $i++) {
		my $val = $FILTERS[$i]->($conf, @F);
		print STDERR "Output filter $i (".$conf->filter->[$i].") returned '$val' for row:\n".join("\t",@F)."\n" if ($conf->debug);
		if (!$val) { # Abort at the first filter that returns false (same as AND all filters) 
		    $ok = 0;
		    last;
		}
	    }
	    next unless ($ok);

	    # Merge row with growing joined table
	    map { $colLength->[$_] = (!defined($colLength->[$_]) || $colLength->[$_] < length($F[$_] || '')) ? length($F[$_] || '') : $colLength->[$_] } 0..$#F;
	    push(@F, @rnum); # Reload row numbers
	    push(@$joinedTable, [ @F ]); # Store joined rows
	}
    } # foreach my $key (keys %table1, grep { !exists $table1->{$_} } keys %table2)
    exit 0 if (!scalar @$joinedTable); # Nothing to do if table is empty

    return ($colLength, $joinedTable);
}

sub pad {
    my ($conf, $length, $text) = @_;
    if ($conf->pad) {
	return sprintf("%-${length}s", defined $text && length $text ? $text : $conf->empty);
    } else {
	return defined $text && length $text ? $text : $conf->empty;
    }
}

sub overlap {
    my ($conf, $ref1, $ref2) = @_;
    return not ($ref1->[$conf->overlap->{'start1'}] > $ref2->[$conf->overlap->{'end2'}] ||
		$ref1->[$conf->overlap->{'end1'}]   < $ref2->[$conf->overlap->{'start2'}]);
}

sub parse_table {
    my ($conf, $file, $number) = @_;

    # Parse arguments
    my $sep = $conf->input_delimiter;
    my (%remove, @include);
    my (@columns, @filter, $maxcols, %update, @setheader);
    if ($number == 1) {
	$maxcols = $conf->max_number_of_columns1;
	@columns = @{$conf->column1};
	map { $remove{$_} = 1 } @{$conf->exclude1};
	@include   = @{$conf->include1};
	%update    = %{$conf->update1};
	@filter    = @{$conf->filter1};
	@setheader = @{$conf->setheader1};
    } elsif ($number == 2) {
	$maxcols = $conf->max_number_of_columns2;
	@columns = @{$conf->column2};
	map { $remove{$_} = 1 } @{$conf->exclude2};
	@include = @{$conf->include2};
	%update  = %{$conf->update2};
	@filter = @{$conf->filter2};
	@setheader = @{$conf->setheader2};
    }

    # Compiling filters before parsing input table
    my @F = (); # Array to be used by eval block
    my %H = (); # Hash  to be used by eval block
    for (my $i=0; $i<=$#filter; $i++) {
	(my $rule = $filter[$i]) =~ s/\n/ /g;
	if (-f "$rule") {
	    open(RULE,"<$rule") || die "Could not load rules from file $rule";
	    $filter[$i] = join(" ",map { chomp; $_ } grep { !/^\#/ } <RULE>);
	    close(RULE);
	}
	$filter[$i] = eval "sub { $filter[$i] }";
	die "Error while compiling filter $rule\n$@" if ($@);
    }

    # Check whether a list of columns was specified
    my $user_include =  @include ? 1 : 0;

    # Parse file
    my $load_header = $conf->header;
    my $cnum   = 0;
    my $rnum   = 0;
    my $loaded = 0;
    my $header = []; # Column names!
    my %hash   = (); # Table is stored as a hash of matrices
    my $index  = {};
    my $fh = reftype($file);
    open($fh,"<$file") || die "Could not open file $file";
  F1: while (<$fh>) {
      chomp;

      # Unpad
      if ($conf->unpad) {
	  @F = map { s/^\s*//; s/\s*$//; $_ } split(/$sep/,$_,$maxcols);
      } else {
	  @F = split(/$sep/,$_,$maxcols);
      }

      # Header
      if (!$loaded) {
	  @{$header} = scalar(@setheader) ? @setheader : ($load_header ? @F : ());
	  if (@$header) { # If there is a header, it must be processed!
	      my %included = ();
	      my %columnsUsed = ();
	      my %columnCount = ();
	      foreach (my $i=0; $i<=$#F; $i++) {
		  # Column index is the default column name
		  $header->[$i] = "c$i" unless (length $header->[$i]);

		  # Rename duplicated columns
		  if ($conf->rename_duplicates) {
		      (my $basename = $header->[$i]) =~ s/^(.+)_\d+$/$1/;
		      if (exists $columnCount{$basename}) {
			  $header->[$i] = $basename . "_" . ++$columnCount{$basename};
		      } else {
			  $columnCount{$basename} = 1;
		      }
		  }

		  # Replace selected column names with indices
		  # For hash based options, all columns ith the same name will be affected
		  if (exists $remove{$header->[$i]}) {
		      $remove{$i} = 1;
		      delete $remove{$header->[$i]};
		  }
		  if (exists $update{$header->[$i]}) {
		      $update{$i} = $update{$header->[$i]};
		      delete $update{$header->[$i]};
		  }

		  # For options that handle data using lists, we need a slightly different
		  # code that ensures repeated entries are treated sequentially
		  if ($user_include) {
		      for (my $j=0; $j<=$#include; $j++) {
			  if ($include[$j] eq $header->[$i]) {
			      $include[$j] = $i;
			      $included{$header->[$i]} = $i;
			      last;
			  }
		      }
		  }
		  for (my $j=0; $j<=$#columns; $j++) {
		      if ($columns[$j] eq $header->[$i]) {
			  $columns[$j] = $i;
			  $columnsUsed{$header->[$i]} = $i;
			  last; # Make sure repeated entries are processed in input order
		      }
		  }

		  # Add columns names to stack
		  #push(@$header, $header->[$i]);
	      } # foreach (my $i=0; $i<=$#F; $i++)

	      # Replace repeated instances of column names with the last observed index
	      foreach my $key (keys %included) {
		  @include = map { (!/^\d+$/ && exists $included{$_}) ? $included{$_} : $_ } @include;
	      }
	      foreach my $key (keys %columnsUsed) {
		  @columns = map { (!/^\d+$/ && exists $columnsUsed{$_}) ? $columnsUsed{$_} : $_ } @columns;
	      }
	  } # if (@$header) { # If there is a header, it must be processed!

	  # Detect non-numerical column identifiers
	  if (my %unknown = map { ($_,1) } grep { !/^\d+$/ } (@columns, @include, keys %remove, keys %update)) {
	      my $status = $conf->header ? "ENABLED" : "DISABLED";
	      die "The following column names could not be loaded from table $file:\n".join("\n",sort keys %unknown),"\nColumn name parsing is $status!!!";
	  }

	  $loaded = 1;
	  next if ($conf->header && !scalar @setheader);
      } # if (!$loaded)

      # Input filters
      if (scalar @filter) {
	  for (my $i=0; $i<=$#filter; $i++) {
	      my $val = $filter[$i]->();
	      next F1 if (!$val);
	  }
      }

      # Update data on load
      map { $F[$_] = $update{$_}->{$F[$_]} if (/^\d+$/ && exists $update{$_}->{$F[$_]}) } keys %update;

      # Indexing and storing
      my $key = scalar @columns ? join("\cA",map { $F[$_] || '_missing_key_' } @columns) : '_no_keys_';
      push(@{ $hash{$key} }, [ @F ]);   # We need to store new array references because @F will be redefined in the next iteration
      push(@{ $index->{$key} }, $rnum); # Row numbers
      @include = 0..$#F if (!$user_include && $#include < $#F); # Output as many columns as the longest row, unless set by the user
      $cnum = $#F+1 if ($cnum < $#F+1);
      $rnum++;
  } # F1: while (<$fh>)
    close($fh);

    # Exclude unwanted columns
    @include = grep { !exists($remove{$_}) } @include;
    if ($number == 1) {
	$conf->_default('include1');
	map { $conf->include1($_) } @include;
	$conf->_default('column1');
	map { $conf->column1($_) } @columns;
    } elsif ($number == 2) {
	$conf->_default('include2');
	map { $conf->include2($_) } @include;
	$conf->_default('column2');
	map { $conf->column2($_) } @columns;
    }

    # Add row numbers
    foreach my $key (keys %hash) {
	for (my $i=0; $i<=$#{$hash{$key}}; $i++) {
	    $hash{$key}->[$i][$cnum] = $index->{$key}->[$i];
	}
    }

    #print STDERR join("\t","DEBUG:",$number,@columns,":",@{ $conf->get("include$number") }),"\n";
    return ($header, %hash);
}

sub sort_matrix_rows {
    my $ret = 0;
    my @sort = @{$CONFIG->sort};
    if (!scalar @sort) {
	my $max  = $#{$a};
	$max = $#{$b} if ($#{$b} > $max);
	push(@sort, $max-1);
	push(@sort, $max) if (defined $ARGV[1]);
    } elsif (my @unk = grep { !/^\d+\,?r?$/ } @sort) {
	die "Attempt to sort output table using the unidentified columns:\n",join("\n",@unk),"\n";
    }

    foreach my $field (@sort) {
	(my $column = $field) =~ s/\,+r$//;
	my $v1 = $a->[$column];
	my $v2 = $b->[$column];
	if (defined $v1 && !defined $v2) {
	    $ret ||= -1;
	} elsif (!defined $v1 && defined $v2) {
	    $ret ||= 1;
	} elsif (!defined $v1 && !defined $v2) {
	    $ret ||= 0;
	} elsif ($v1 =~ /^\-?\d+\.?\d*e?[\-\+]?\d*$/ &&
		 $v2 =~ /^\-?\d+\.?\d*e?[\-\+]?\d*$/) {
	    $ret ||= ($v1 <=> $v2);
	} else {
	    $ret ||= ($v1 cmp $v2);
	}
	$ret *= -1 if ($field =~ /\,+r$/);
	return $ret if ($ret);
    }

    return $ret;
}

######
# Command line parsing, debugging and help messages
######

sub hash_of_hash_from_table {
    my ($s,$n,$v) = @_;
    my $ref = $s->get($n);
    $v=~s/=\S+//;
    open(HoH,"<".$ref->{$v}) || die "Could not open hash file ".$ref->{$v};
    $ref->{$v} = { map { chomp; s/^\s+//; s/\s+$//; split(/\t+/,$_,2) } <HoH> };
    close(HoH);
}

sub expand_numeric_interval {
    my ($s,$n,$v) = @_;
    if ($v =~ /\d+\.\.\d+/) {
	$s = $s->get($n);
	pop(@$s);
	push(@$s, eval "$v");
    }
}

sub parse_configuration {
    # Parser definition
    use Application::Config qw(:argcount GetConfig);
    my $appconfig = GetConfig(# See perldoc Application::Config for details

			      #
			      # Input options
			      #
			      'column1' => {
				  DEFAULT  => [],
				  ACTION   => \&expand_numeric_interval,
				  ARGCOUNT => ARGCOUNT_LIST,
				  ALIAS    => '1',
				  SUMMARY  => "matched column from first file",
			      },

			      'column2' => {
				  DEFAULT  => [],
				  ACTION   => \&expand_numeric_interval,
				  ARGCOUNT => ARGCOUNT_LIST,
				  ALIAS    => '2',
				  SUMMARY  => "matched column from second file",
			      },

			      'filter1' => {
				  DEFAULT  => [],
				  ARGCOUNT => ARGCOUNT_LIST,
				  ALIAS    => 'f1',
				  SUMMARY  => "(pre-join) filter rows in the first file",
			      },

			      'filter2' => {
				  DEFAULT  => [],
				  ARGCOUNT => ARGCOUNT_LIST,
				  ALIAS    => 'f2',
				  SUMMARY  => "(pre-join) filter rows in the second file",
			      },

			      'max_number_of_columns1' => {
				  DEFAULT  => -1,
				  ARGCOUNT => ARGCOUNT_ONE,
				  ALIAS    => 'maxcols1|mc1',
				  SUMMARY  => "Limit row parsing of the FIRST input file to this number of columns. This parameter is used as the third argument (LIMIT) of a call for the 'split' Perl built-in function ((see perldoc -f split). The default value (a negative number) implies each row will be parsed into as many columns as possible.",
			      },

			      'max_number_of_columns2' => {
				  DEFAULT  => -1,
				  ARGCOUNT => ARGCOUNT_ONE,
				  ALIAS    => 'maxcols2|mc2',
				  SUMMARY  => "Limit row parsing of the FIRST input file to this number of columns. This parameter is used as the third argument (LIMIT) of a call for the 'split' Perl built-in function ((see perldoc -f split). The default value (a negative number) implies each row will be parsed into as many columns as possible.",
			      },

			      'parse_header' => {
				  DEFAULT  => 0,
				  ARGCOUNT => ARGCOUNT_NONE,
				  ALIAS    => 'header|he|y',
				  SUMMARY  => "Boolean flag that indicates first row contain column names. See also documentation of option --rename_duplicates.",
			      },

			      'setheader1' => {
				  DEFAULT  => [],
				  ACTION   => "EXPAND_FILES",
				  ARGCOUNT => ARGCOUNT_LIST,
				  ALIAS    => 'sh1',
				  SUMMARY  => "Input a list of column names",
			      },

			      'setheader2' => {
				  DEFAULT  => [],
				  ACTION   => "EXPAND_FILES",
				  ARGCOUNT => ARGCOUNT_LIST,
				  ALIAS    => 'sh2',
				  SUMMARY  => "Input a list of column names",
			      },

			      'input_delimiter' => {
				  DEFAULT  => "\t",
				  ARGCOUNT => ARGCOUNT_ONE,
				  ALIAS    => 's',
				  SUMMARY  => "column delimiter of input files",
			      },

			      'unpad' => {
				  DEFAULT  => 1,
				  ARGCOUNT => ARGCOUNT_NONE,
				  ALIAS    => 'u',
				  SUMMARY  => "Remove leading/trailing invisible characters from all INPUT columns.",
			      },

			      'update1' => {
				  DEFAULT  => {},
				  ARGCOUNT => ARGCOUNT_HASH,
				  ACTION   => \&hash_of_hash_from_table,
				  ALIAS    => 'replace1|u1',
				  SUMMARY  => "Replace/update column contents of the first (left) input file while loading. This option operates by storing the mapping of old data to new data in a hash and simply replacing the column contents where there is an exact match. Usage:

tjoin --update1 column=map.tsv

where 'column' is the name or number (starting at zero) of the column to be updated and map.tsv is a two column text table, columns separated by TABS, with old values in the first column and new ones in the second."
			      },

			      'update2' => {
				  DEFAULT  => {},
				  ARGCOUNT => ARGCOUNT_HASH,
				  ACTION   => \&hash_of_hash_from_table,
				  ALIAS    => 'replace2|u2',
				  SUMMARY  => 'Replace/update column contents of the second (right) input file while loading. See --update1 for more details.'
			      },

			      #
			      # Output options
			      #
			      'auto_fill' => {
				  DEFAULT  => 1,
				  ARGCOUNT => ARGCOUNT_NONE,
				  ALIAS    => 'af',
				  SUMMARY  => "Automatically fill columns for non-matching rows. This feature requires that the same number of columns from each table is used for joininig (see options --column1 and --column2).",
			      },

			      'empty' => {
				  DEFAULT  => '',
				  ARGCOUNT => ARGCOUNT_ONE,
				  ALIAS    => 'e',
				  SUMMARY  => "string to fill empty cells",
			      },

			      'exclusive' => {
				  DEFAULT  => undef,
				  ARGCOUNT => ARGCOUNT_ONE,
				  ALIAS    => 'x',
				  SUMMARY  => "show the entries found only in file",
			      },

			      'output_delimiter' => {
				  DEFAULT  => "\t",
				  ARGCOUNT => ARGCOUNT_ONE,
				  ALIAS    => 'r',
				  SUMMARY  => "column delimiter for output table",
			      },

			      'pad' => {
				  DEFAULT  => 0,
				  ARGCOUNT => ARGCOUNT_NONE,
				  ALIAS    => 'p',
				  SUMMARY  => "Add trailing spaces all OUTPUT rows in all columns so that each column's length is constant.",
			      },

			      'rename_duplicates' => {
				  DEFAULT  => 1,
				  ACTION   => sub { my ($s,$n,$v) = @_; $s->set("parse_header",1) },
				  ARGCOUNT => ARGCOUNT_NONE,
				  ALIAS    => 'rd|duplicates',
				  SUMMARY  => "Add _{number} to duplicated column names. This action applies to both input files and the output stream and it implies turning on header parsing, i.e. option --header will be enabled.",
			      },

			      'sort' => {
				  DEFAULT  => [],
				  ACTION   => \&expand_numeric_interval,
				  ARGCOUNT => ARGCOUNT_LIST,
				  ALIAS    => 'o',
				  SUMMARY  => "list of output columns for sorting",
			      },

			      #
			      # Output selection
			      'filter' => {
				  DEFAULT  => [],
				  ARGCOUNT => ARGCOUNT_LIST,
				  ALIAS    => 'f',
				  SUMMARY  => "(post-join) filter for rows in the output table",
			      },

			      'include1' => {
				  DEFAULT  => [],
				  ACTION   => \&expand_numeric_interval,
				  ARGCOUNT => ARGCOUNT_LIST,
				  ALIAS    => 'i1',
				  SUMMARY  => "Select columns from the first file. Columns may be selected using interval syntax of the form start..end, e.g. 0..4 refers to the first to fifth elements.",
			      },

			      'include2' => {
				  DEFAULT  => [],
				  ACTION   => \&expand_numeric_interval,
				  ARGCOUNT => ARGCOUNT_LIST,
				  ALIAS    => 'i2',
				  SUMMARY  => "Select columns from the second file. Columns may be selected using interval syntax of the form start..end, e.g. 0..4 refers to the first to fifth elements.",
			      },

			      'exclude1' => {
				  DEFAULT  => [],
				  ACTION   => \&expand_numeric_interval,
				  ARGCOUNT => ARGCOUNT_LIST,
				  ALIAS    => 'remove1|r1|x1',
				  SUMMARY  => "Remove columns from the first file. Columns may be selected using interval syntax of the form start..end, e.g. 0..4 refers to the first to fifth elements.",
			      },

			      'exclude2' => {
				  DEFAULT  => [],
				  ACTION   => \&expand_numeric_interval,
				  ARGCOUNT => ARGCOUNT_LIST,
				  ALIAS    => 'remove2|r2|x2',
				  SUMMARY  => "Remove columns from the second file. Columns may be selected using interval syntax of the form start..end, e.g. 0..4 refers to the first to fifth elements.",
			      },

			      # Join operation options
			      'type' => {
				  DEFAULT  => 'full',
				  ARGCOUNT => ARGCOUNT_ONE,
				  ALIAS    => 't',
				  SUMMARY  => "Type of join to perform. Could be set to

 inner : returns only the combined rows that match all user criteria
 left  : returns all rows for the first file, including those that do not match 
 right : returns all rows for the second file, including those that do not match 
 full  : returns all combined rows from both files, including those that do not match 
",
			      },

			      'overlap' => {
				  DEFAULT  => {},
				  ARGCOUNT => ARGCOUNT_HASH,
				  ALIAS    => 'd',
				  SUMMARY  => "find rows describing interval overlaps
This option applies only to tables containing columns defining one-dimensional
intervals, i.e. both tables should have a start and end column (start < end).
The syntax for this option is, e.g.

tjoin -d start1=2 -d end1=3 -d start2=2 -d end2=3 table1.txt table2.txt

where the parameters are

 start1 : index of column with start coordinates in the first file
 end1   : index of column with end   coordinates in the first file
 start2 : index of column with start coordinates in the second file
 end2   : index of column with start coordinates in the second file
",
			      },
	);

    # Default columns to match rows
    $appconfig->column1(0) unless (scalar @{$appconfig->column1} || scalar(keys %{$appconfig->overlap}));
    $appconfig->column2(0) unless (scalar @{$appconfig->column2} || scalar(keys %{$appconfig->overlap}));

    # Check arguments and set flags for evaluating overlaps
    $appconfig->define('_check_overlap' => { DEFAULT  => 0, ARGCOUNT => ARGCOUNT_ONE });
    if (scalar(keys %{$appconfig->overlap})) {
	my $message = "Searching for overlaps requires at least four columns:
start1 : index of column with start coordinates in the first file
end1   : index of column with end   coordinates in the first file
start2 : index of column with start coordinates in the second file
end2   : index of column with start coordinates in the second file
";
	foreach my $arg (qw(start1 end1 start2 end2)) {
	    die $message if (!exists $appconfig->overlap->{$arg});
	}
	$appconfig->_check_overlap(1);
    }

    # Compile output delimiter:
    # you can use Perl regexp escape codes like \t
    # to set the output column delimiter
    foreach my $stream (qw(output)) {
	my $sep = $appconfig->get("${stream}_delimiter");
	$sep = eval qq{return "$sep"};
	$appconfig->set("${stream}_delimiter", $sep);
    }

    # Use STDIN
    push(@ARGV, "-") unless ( -t STDIN || scalar(grep { $_ eq "-" } @ARGV) );

    # Since we make a lot of changes to the configuration object after parsing it
    # we need a replacement for AppConfig::AutoDoc's "--debug config" debugging method
    $appconfig->_dump_to_stderr if ($appconfig->debug eq 'postconfig');

    return $appconfig;
}

# POD: start
# Documentation (use option -doc or --doc to see it!)

=head1 NAME

 tjoin - compare and merge/join text tables

=head1 SYNOPSIS

 # Simplest usage: full outer join of two text tables based
 # on the contents of the first column of each file

 tjoin table1.txt table2.txt 

=head1 DESCRIPTION

This program implements the JOIN operation of relational calculus/algebra.
The join of two tables is equivalent to a cross-product of the contents of
the tables, based on matches of values in user specified columns.

=head2 Notes

You can requested that a column be sorted in reverse order by adding ",r" to the 
column index. Example: 

  tjoin -o 0 -o 1,r table.tsv

The above flags will request the output to be sorted by the first column, in
ascending order, and by the second column, in descending order.

=head1 AUTHOR

 Robson Francisco de Souza

=cut
# POD: end
