#!/usr/bin/env perl

use FindBin;
use lib "$FindBin::RealBin/../perl/lib";
use Rotifer;
use strict;
use warnings;

# Parse command line options
my $CONFIG = parse_configuration();

# Main: START
my  ($header, $table, %column) = parse_table(@ARGV);

# Main: END
exit 0;

##########################
## Subroutines
##########################

sub column_name_to_number {
    my $column = shift;

    my @indices = ();
    foreach my $name (@_) {
	if (exists $column->{$_}) {
	    push(@indices, @{$column->{$name}});
	} elsif (/^\d+$/) {
	    push(@indices, $name);
	} else {
	    die "No such column $name";
	}
    }

    return @indices;
}

sub parse_table {
    my ($conf, @files) = @_;

    # Parse arguments
    my $sep    = $conf->input_delimiter;
    my @filter = @{$conf->filter};

    # Compiling filters before parsing input table
    my @F = (); # Array to be used by eval block
    my %H = (); # Hash  to be used by eval block
    for (my $i=0; $i<=$#filter; $i++) {
	(my $rule = $filter[$i]) =~ s/\n/ /g;
	if (-f "$rule") {
	    open(my $rule,"<$rule") || die "Could not load rules from file $rule";
	    $filter[$i] = join(" ",map { chomp; $_ } grep { !/^\#/ } <$rule>);
	    close($rule);
	}
	$filter[$i] = "sub { $filter[$i] }" unless ($filter[$i] =~ /^\s*sub\s*\{.+\}$/);
	$filter[$i] = eval "$filter[$i]";
	die "Error while compiling filter $rule\n$@" if ($@);
    }

    # (Re)set variables
    my $header = []; # Column names for each file
    my $table  = []; # All tables are stored into one anonymous array of arrays

    # Parse file
    warn "Loading input table(s)..." if ($conf->debug);
    foreach my $file (@files) {
	open(my $t,"<$file") || die "Could not open file $file";
	my $loaded = 0;  # Flag signalling whether column names were loaded
      F1: while (<$t>) {
	  chomp;

	  # Unpad
	  if ($conf->unpad) {
	      @F = map { s/^\s*//; s/\s*$//; $_ } split(/$sep/);
	  } else {
	      @F = split(/$sep/);
	  }

	  # Header
	  if (!$loaded) {
	      if (scalar @$header) {
		  my $oldheader = join("\cA",@$header);
		  my $newheader = join("\cA",@F);
		  die "All tables should have the same set of columns (identical headers) but $file is different." unless ($newheader eq $oldheader);
	      } else {
		  $header = [ @F ];
	      }
	      $loaded = 1;
	      next;
	  }

	  # Input filters
	  if (scalar @filter) {
	      for (my $i=0; $i<=$#filter; $i++) {
		  my $val = $filter[$i]->();
		  print STDERR "$_\nFilter $i returned '$val' when applied to the row above\n" if ($conf->debug);
		  next F1 if (!$val);
	      }
	  }

	  # Indexing and storing
	  push(@$table, [ @F ]);
      } # F1: while (<$t>)
	close($t);
    } # foreach my $file (@files)
    warn "Input table(s) loaded!" if ($conf->debug);

    # Index and check columns
    my %column = (); map { push(@{ $column{$header->[$_]} },$_) } 0..$#{$header};
    foreach my $required (qw(start end)) {
	die "Missing coordinate column '$required' in at least one of your input tables" unless (exists $column{$required});
	warn "I'll ignore any but the first instance of coordinate column '$required' (found ".scalar(@{$column{$requited}})." columns." 
	    if (scalar @{$column{$required}} > 1);
    }

    # Sort input
    warn "Sorting input table(s)..." if ($conf->debug);
    my %cols = (); map { push(@{ $cols{$header->[$_]} },$_) } 0..$#{$header};
    my ($seqidCol) = &column_name_to_number(\%column, $conf->chromosome);
    my ($startCol) = &column_name_to_number(\%column, "start");
    my ($endCol)   = &column_name_to_number(\%column, "end");
    @$table = sort {
	my $ret = 0;
	foreach my $colID (qw(start end)) {
	    $ret ||= $a->[$colID] <=> $b->[$colID];
	}
	my $as = 
	my $bs = $b->[$startCol];
	my $ae = $a->[$endCol];
	my $be = $b->[$endCol];
	$a->[$seqidCol] cmp $b->[$seqidCol] || $as <=> $bs || $ae <=> $be
    } @$table;
    warn "Input table(s) sorted!" if ($conf->debug);

    #print STDERR join("\t","DEBUG:",$number,@{$columns},":",@{ $conf->get("include$number") }),"\n";
    return ($header, $table, %column);
}

sub sort_matrix_rows {
    my $ret = 0;
    my @sort = @{$CONFIG->sort};
    if (!scalar @sort) {
	my $max  = $#{$a};
	$max = $#{$b} if ($#{$b} > $max);
	push(@sort, $max-1);
	push(@sort, $max) if (defined $ARGV[1]);
    }
    foreach my $field (@sort) {
	(my $column = $field) =~ s/\,+r$//;
	my $v1 = $a->[$column];
	my $v2 = $b->[$column];
	if (defined $v1 && !defined $v2) {
	    $ret ||= -1;
	} elsif (!defined $v1 && defined $v2) {
	    $ret ||= 1;
	} elsif (!defined $v1 && !defined $v2) {
	    $ret ||= 0;
	} elsif ($v1 =~ /^\-?\d+\.?\d*e?[\-\+]?\d*$/ &&
		 $v2 =~ /^\-?\d+\.?\d*e?[\-\+]?\d*$/) {
	    $ret ||= ($v1 <=> $v2);
	} else {
	    $ret ||= ($v1 cmp $v2);
	}
	$ret *= -1 if ($field =~ /\,+r$/);
	return $ret if ($ret);
    }
    return $ret;
}

######
# Command line parsing, debugging and help messages
######

sub hash_of_hash_from_table {
    my ($s,$n,$v) = @_;
    my $ref = $s->get($n);
    $v=~s/=\S+//;
    open(HoH,"<".$ref->{$v}) || die "Could not open hash file ".$ref->{$v};
    $ref->{$v} = { map { chomp; s/^\s+//; s/\s+$//; split(/\t+/,$_,2) } <HoH> };
    close(HoH);
}

sub expand_numeric_interval {
    my ($s,$n,$v) = @_;
    if ($v =~ /\d+\.\.\d+/) {
	$s = $s->get($n);
	pop(@$s);
	push(@$s, eval "$v");
    }
}

sub parse_configuration {
    # Parser definition
    use Application::Config qw(:argcount GetConfig);
    my $appconfig = GetConfig(# See perldoc Application::Config for details

			      'chromosome_length' => {
				  ACTION   => 'EXPAND_FILES',
				  DEFAULT  => {},
				  ARGCOUNT => ARGCOUNT_HASH,
				  ALIAS    => 'cl|chrlength|seqlength',
				  SUMMARY  => "Table of chromosome lengths. If not provided, chromosome length is set to be the end of the last coordinate of each chromosome (see --chromosome).",
			      },

			      'filter' => {
				  DEFAULT  => [],
				  ARGCOUNT => ARGCOUNT_LIST,
				  ALIAS    => 'f',
				  SUMMARY  => "Filter rows in the input table",
			      },

			      'input_delimiter' => {
				  DEFAULT  => "\t",
				  ARGCOUNT => ARGCOUNT_ONE,
				  ALIAS    => 's|delimiter',
				  SUMMARY  => "column delimiter of input files",
			      },

			      'output_delimiter' => {
				  DEFAULT  => "\t",
				  ARGCOUNT => ARGCOUNT_ONE,
				  ALIAS    => 'r|output',
				  SUMMARY  => "column delimiter for output table",
			      },

			      'pad' => {
				  DEFAULT  => 0,
				  ARGCOUNT => ARGCOUNT_NONE,
				  ALIAS    => 'p',
				  SUMMARY  => "Add trailing spaces all OUTPUT rows in all columns so that each column's length is constant.",
			      },

			      'sort' => {
				  DEFAULT  => [],
				  ACTION   => \&expand_numeric_interval,
				  ARGCOUNT => ARGCOUNT_LIST,
				  ALIAS    => 'o',
				  SUMMARY  => "list of output columns for sorting",
			      },

			      'unpad' => {
				  DEFAULT  => 1,
				  ARGCOUNT => ARGCOUNT_NONE,
				  ALIAS    => 'u',
				  SUMMARY  => "Remove leading/trailing invisible characters from all INPUT columns.",
			      },
	);

    # Use STDIN
    unshift(@ARGV, "-") if (! -t STDIN );

    return $appconfig;
}

# POD: start
# Documentation (use option -doc or --doc to see it!)

=head1 NAME

 rcomplement - find intervals that complement a set of input intervals

=head1 SYNOPSIS

 # Just complement the concatenated input
 rcomplement table1.tsv table2.tsv > other.tsv

=head1 DESCRIPTION

This program identifies all regions in named linear intervals 
(e.g. molecular sequences) not covered by the input.

=head1 AUTHOR

 Robson Francisco de Souza

=cut
# POD: end
