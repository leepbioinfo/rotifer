#!/usr/bin/env perl

use FindBin;
use lib "$FindBin::RealBin/../perl/lib";
use warnings;
use strict;

# Parse command line options
my $CONFIG = parse_configuration();

# Process each table describing regions
my %data = parse_domain_tables($CONFIG, @ARGV);
my $SEP = $CONFIG->output_delimiter;
print join($SEP, split(/\s*\,\s*/,$CONFIG->output_args->{"columns"})),"\n"
    if (exists $CONFIG->output_args->{"header"} && $CONFIG->output_args->{"header"});
foreach my $seq (sort keys %data) {
    my ($arch, @matches) = build_architecture($CONFIG,@{ $data{$seq} });
    print join("\t", $seq, $arch, @matches),"\n";
}

# Exit cleanly
exit 0;

#####
# Subroutines
#####

# Parse input table(s)
#
# Our strategy is to load all input into memory first, therefore
# the input does not need to be ordered and can be separated into
# several files
sub parse_domain_tables {
    my ($config, @tables) = @_;
    my $map = $config->rename;
    my $max = $config->target_cutoff;

    # Set the default columns when not parsing its header
    my %header = (); 
    my $exclRef = $config->_excluded;
    unless (exists $config->input_args->{"header"} && $config->input_args->{"header"}) {
	my @header = split(/\s*\,\s*/, $config->input_args->{"columns"});
	my $j = 0; map { $header{$_} = $j++ } @header;
    }

    my %data = ();
    my $sep = $CONFIG->input_delimiter;
    foreach my $table (@tables) {
	# Parsing table name
	open(TABLE,"<$table") || die "Could not open domain table";
	my $i = 0;
	while (<TABLE>) {
	    chomp;
	    if (!$i && exists $config->input_args->{"header"} && $config->input_args->{"header"}) {
		map { $header{$_} = $i++ } split(/\t+/);
		next;
	    }
	    my @row = split(/$sep/o);

	    # Build data structure for HSP
	    my $seqID  = $row[ $header{"sequence"} ];
	    my $hash = {
		'seqid'  => $seqID,
		'domain' => exists $map->{$row[$header{"domain"}]} ? $map->{$row[$header{"domain"}]} : $row[$header{"domain"}],
		'length' => $row[$header{"end"}] - $row[$header{"start"}] + 1,
		'start'  => $row[$header{"start"}],
		'end'    => $row[$header{"end"}  ]
	    };

	    # Filter region by e-value/significance
	    if (exists $max->{$hash->{'domain'}}) {
		next if ($row[$header{"evalue"}] > $max->{$hash->{'domain'}});
	    } else {
		next if ($row[$header{"evalue"}] > $config->evalue);
	    }

	    # We can use tables without e-value columns! :)
	    next if (exists $exclRef->{ $hash->{'domain'} });
	    $hash->{'evalue'} = $row[$header{"evalue"}] if (exists($header{"evalue"}) && defined($row[$header{"evalue"}]));
	    push(@{ $data{$seqID} }, $hash);
	}
	close(TABLE);
    }

    return %data;
}

# Selecting best HSPs for each sequence
#
# The procedure is to order HSPs from smallest to largest
# e-value and then from longest to smallest length and
# store only the first (best) non-overlapping models.
#
# Overlaps between HSPs are ignored up to a value set by
# the user. Integer values for the overlap parameter are 
# treated as absolute overlap length (in number of 
# residues), while float values might be used for
# percentages of the best HSP region length.The (relative)
# length of the overlapping region should be below the
# user threshold for both HSPs.
# 
sub build_architecture {
    my ($config,@data) = @_;
    return () unless (scalar @data);

    # Sorting HSPs
    if ($config->length) {
	@data = sort { 
	    $b->{'length'} <=> $a->{'length'} || $a->{'start'} <=> $b->{'start'} || (exists($a->{'evalue'}) && $a->{'evalue'} <=> $b->{'evalue'})
	} @data;
    } else { # Give priority to HSPs with lower E-value
	@data = sort { 
	    (exists($a->{'evalue'}) && $a->{'evalue'} <=> $b->{'evalue'}) || $b->{'length'} <=> $a->{'length'} || $a->{'start'} <=> $b->{'start'}
	} @data;
    }

    # Select regions
    my @best = shift(@data);
  HSP: foreach my $hsp (@data) {
      foreach my $better (@best) { # Inspect HSPs loaded in previous iterations
          # Ignore overlaps for selected matches
	  next if (exists $config->_ignore_overlap->{all});
	  last if (exists $config->_ignore_overlap->{ $hsp->{'domain'}    });
	  next if (exists $config->_ignore_overlap->{ $better->{'domain'} });
          # Calculate length of overlap region (zero or negative for non-overlapping domains)
          my $max_start = $hsp->{'start'} > $better->{'start'} ? $hsp->{'start'} : $better->{'start'};
          my $min_end   = $hsp->{'end'}   < $better->{'end'}   ? $hsp->{'end'}   : $better->{'end'};
          my $overlap_length = $min_end - $max_start + 1;
          if ($config->overlap =~ /\d*\.\d+/ || $config->overlap =~ /\d+e-\d+/) { # Compare both HSPs when using percentage!
              my $max_overlap_better = $config->overlap * $better->{'length'};
              my $max_overlap_hsp    = $config->overlap * $hsp->{'length'};
              next HSP if ($overlap_length > $max_overlap_better || $overlap_length > $max_overlap_hsp);
          } else { # Cutoff set in number of residues: compare length of overlapping region to cutoff
              next HSP if ($overlap_length > $config->overlap);
          }
      }
      push(@best,$hsp);
  }

    # Sort best HSPs based on coordinates
    @best = sort { $a->{'start'} <=> $b->{'start'} || $a->{'end'} <=> $b->{'end'} } @best;

    # Assemble architecture
    my $arch = assemble_architecture($config, @best);

    # Compact description of selected HSPs
    my @matches = ($arch);
    push(@matches, join(",",map { $_->{'start'}."..".$_->{'end'}."&".$_->{'domain'} } @best));
    push(@matches, join(",",map { $_->{'evalue'}."&".$_->{'domain'} } @best));
    return @matches;
}

# Recursively assemble nested architectures
sub assemble_architecture {
    my ($config, @ordered) = @_;

    # Find inserted domains
    my %inside = (); my %contains = ();
    for (my $i=0; $i<=$#ordered; $i++) {
	my @contained = grep { contains($ordered[$i],$ordered[$_]) } $i+1..$#ordered;
	$ordered[$i] = $ordered[$i]->{domain};
	if (scalar @contained) {
	    $contains{$i} = [ @contained ];
	    map { $inside{$_} = $i } @contained; # Store closest container
	}
    }

    # Process nested domains
    for (my $i=$#ordered; $i>=0; $i--) {
	if (exists $contains{$i}) {
	    my @contained = grep { $inside{$_} == $i } @{$contains{$i}};
	    #print join(" ",$ordered[$i],"contains",map { $ordered[$_] } @contained),"\n";
	    $ordered[$i] .= '['.join($config->output_args->{"connector"}, map { $ordered[$_] } @contained).']';
	}
    }

    # Assemble final architecture
    return join($config->output_args->{"connector"},map { $ordered[$_] } grep { !exists $inside{$_} } 0..$#ordered);
}

sub contains {
    my ($hsp1, $hsp2) = @_;
    return $hsp1->{'start'} <= $hsp2->{'start'} && $hsp1->{'end'} >= $hsp2->{'end'};
}

######
# Command line parsing, debugging and help messages
######

sub parse_configuration {
    # Parser definition
    use Application::Config qw(:argcount GetConfig);
    my $appconfig = GetConfig(# Input/output
			      'input_args' => {
				  ALIAS    => 'ia', 
				  DEFAULT  => { columns => join(",",qw(sequence domain start end evalue)) },
				  ARGCOUNT => ARGCOUNT_HASH,
				  SUMMARY  => "Input parsing options. Available options are:
\n=over
\n=item * columns : comma separated list of input column names
\n=item * header  : (boolean) if set to true, first row is treated as a header
\n=back
",
			      },

			      'input_delimiter' => {
				  DEFAULT  => "\t",
				  ARGCOUNT => ARGCOUNT_ONE,
				  ALIAS    => 's|delimiter',
				  SUMMARY  => "column delimiter of input files",
			      },

			      'output_args' => {
				  ALIAS    => 'oa', 
				  DEFAULT  => { header => 1, connector => '+', columns => join(",",qw(ID architecture regions evalue)) },
				  ARGCOUNT => ARGCOUNT_HASH,
				  SUMMARY  => "Output parsing options. Available options are:
\n=over
\n=item * header : (boolean) add header row to the output table
\n=item * connector : string to separate domain names
\n=item * columns : comma separated list of output columns. Available columns: ID, architecture, regions, e-value
\n=back
",
			      },

			      'output_delimiter' => {
				  DEFAULT  => "\t",
				  ARGCOUNT => ARGCOUNT_ONE,
				  ALIAS    => 'r|output',
				  SUMMARY  => "column delimiter for output table",
			      },

			      # Analysis
			      'exclude' => {
				  ACTION   => "EXPAND_FILES",
				  ALIAS    => 'x', 
				  DEFAULT  => [],
				  ARGCOUNT => ARGCOUNT_LIST,
				  SUMMARY  => "Ignorem atches to these domains",
			      },

			      'length' => {
				  ALIAS    => 'l', 
				  DEFAULT  => 0,
				  ARGCOUNT => ARGCOUNT_NONE,
				  SUMMARY  => "Select longest overlapping HSPs, instead of lowest E-value",
			      },

			      'ignore_overlap' => {
				  ACTION   => 'EXPAND_FILES',
				  ALIAS    => 'i', 
				  DEFAULT  => [],
				  ARGCOUNT => ARGCOUNT_LIST,
				  SUMMARY  => "Ignore restrictions on overlaps for domains in this list.",
			      },

			      'overlap' => {
				  ALIAS    => 'o', 
				  DEFAULT  => 0.4,
				  ARGCOUNT => ARGCOUNT_ONE,
				  SUMMARY  => "Maximum overlap between pairs of conflicting regions",
			      },

			      'pcut' => {
				  ALIAS    => 'e|evalue', 
				  DEFAULT  => 0.01,
				  ARGCOUNT => ARGCOUNT_ONE,
				  SUMMARY  => "Maximum e-value for accepted matches",
			      },

			      'rename' => {
				  ALIAS    => 'm', 
				  DEFAULT  => {},
				  ARGCOUNT => ARGCOUNT_HASH,
				  SUMMARY  => "Map of old to new names for renaming domains in output architectures. You can either set it from the command lien using AppConfig's hash-syntax:

 domain2architecture -m OLD=NEW

or put all mapping in a file and use auto-loading, e.g.

 domain2architecture -m file=rename.txt

",
			      },

			      'target_cutoff' => {
				  ACTION   => 'EXPAND_FILES',
				  ALIAS    => 'tc', 
				  DEFAULT  => {},
				  ARGCOUNT => ARGCOUNT_HASH,
				  SUMMARY  => "Select domain/family specific cutoffs. Examples:

 # Set maximum e-value to 1e-10 for HTH matches from command line
 domain2architecture -tc HTH=1e-10 regions.tsv

 Load all cutoffs from TAB-separated two column text table
 domain2architecture -tc file=cutoffs.tsv regions.tsv
",
			      },
		       );

    # excluded domains
    $appconfig->define(
	'_excluded' => {
	    ARGCOUNT => ARGCOUNT_HASH, 
	    DEFAULT => { map { ($_,1) } @{$appconfig->exclude} },
	});

    # Copy list of domains to ignore all overlaps
    $appconfig->define(
	'_ignore_overlap' => {
	    ARGCOUNT => ARGCOUNT_HASH, 
	    DEFAULT => { map { ($_,1) } @{$appconfig->ignore_overlap} },
	});

    # Use STDIN when no files are given
    push(@ARGV, '-') unless ( -t STDIN || scalar(grep { $_ eq "-" } @ARGV) );

    # Debug after processing...
    $appconfig->_dump_to_stderr if ($appconfig->debug == -2);

    return $appconfig;
}

# POD: start
# Documentation (use option -doc or --doc to see it!)
#
# AppConfig::AutoDoc can automatically extract Plain Old Documentation
# from within the caller program's, add descriptions of the options
# created by L<define> and do some pretty formatting for output.
# 
# Note that POD may be added anywhere in your program, thus allowing 
# the documentation for a program to be left side by side with the
# function's definition.

=head1 NAME

 domain2architecture - generate a table of architectures from a table
                       of sequence features

=head1 SYNOPSIS

 # Convert a standard RPS-BLAST report to a table of features
 # and build domain architectures

 blast2table -c cdd -s result.rps > result.tsv
 domain2archietcture result.tsv > result.arch

=head1 DESCRIPTION

This program converts text tables describing regions in sequences
to a compact representation of the sequence's architecture, i.e.
the best combination of non-overlapping regions.

The input tables should be compatible with the ones generated by blast2table
and hmmer2table, i.e. the file should be a text file with columns separated
by TABs ("\t") and its first 5 columns must correspond to:

      Column     :         Description
                 :
 Hit             : target sequence name
 Query           : name of the region
 Hit start       : start of the region in the target sequence
 Hit end         : end of the region in the target sequence
 E-value         : region significance (e.g. expected value)

Any columns added after the fifth column will be ignored.

=head1 AUTHOR

 Robson Francisco de Souza

=cut
# POD: end
