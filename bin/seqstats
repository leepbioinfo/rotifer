#!/usr/bin/env perl

# LIBRARIES and PRAGMAS: start
use FindBin;
use lib "$FindBin::RealBin/../perl/lib";
use Bio::Tools::IUPAC;
use Bio::SeqIO;
use Bio::Tools::SeqStats;
use Rotifer;
use strict;
use warnings;
# LIBRARIES and PRAGMAS: end

# Parse configuration/options
my $CONFIG = &parse_configuration();
die "You cannot count codons and aminoacids at the same time!\n"
    if (scalar(keys %{$CONFIG->translate}) && $CONFIG->codons);

# MAIN PROGRAM: start
print join("\t","seqid","length",@{$CONFIG->oligomers}),"\n";

# Loading file
foreach my $file (@ARGV) {
    my @file = $file eq "-" ? (-fh => \*STDIN) : (-file => "<$file");
    my $in = Bio::SeqIO->new(-format=>$CONFIG->format, @file, %{$CONFIG->input_options});

  SEQ: while (my $seq = $in->next_seq) {
      my $id = $CONFIG->id_parser->($seq->id);

      # Translate coding sequence
      $seq = $seq->translate(%{$CONFIG->translate}) if scalar(keys %{$CONFIG->translate});

      # Calculate statistics
      my @count = ($id, $seq->length);
      if (scalar @{$CONFIG->oligomers}) {
	  my $hash_ref = {};
	  my $stats = Bio::Tools::SeqStats->new(-seq=>$seq);
	  if ($CONFIG->codons) {
	      $hash_ref = $stats->count_codons();
	  } else {
	      $hash_ref = $stats->count_monomers();
	  }

	  foreach my $base (@{$CONFIG->oligomers}) {
	      if (exists  $hash_ref->{$base} &&
		  defined $hash_ref->{$base} &&
		  $hash_ref->{$base} ne '') {
		  push(@count,$hash_ref->{$base});
	      } else {
		  push(@count,0);
	      }
	  }
      }

      print join("\t",@count),"\n";
  } # SEQ: while (my $seq = $in->next_seq)
} # foreach my $file (@ARGV)

exit 0;
# MAIN PROGRAM: end

###############
# Subroutines

sub my_id_parser {
    my @id = split(/\|+/,$_[0]);
    return scalar(@id) > 1 ? $id[1] : $_[0];
}

sub codon_list {
    my @d = qw(A C G T); 

    my %ret = ();
    foreach my $a (@d) {
	foreach my $b (@d) {
	    foreach my $c (@d) {
		 $ret{"$a$b$c"}++;
	    }
	}
    }

    return %ret;
}

# Compile user provided subroutines
sub compile_code {
    my ($state,$name,$value) = @_;

    if (ref($value) ne "CODE") { # Do nothing if $value is a reference to code
	my $opt = $state->get($name);

	# Compile each value
	my $key = undef;
	($key,$value) = split('=',$value,2) if (ref($opt) eq "HASH");
	my $ref = $value;
	if (-f "$value") {
	    open(RULE,"<$value") || die "Could not load rules from file $value";
	    $ref = join(" ",map { chomp; $_ } grep { !/^\#/ } <RULE>);
	    close(RULE);
	}
	$ref = eval "$ref";
	die "Error while compiling output filter $value\n$@" if ($@);

	# Update $state
	if (ref($opt) eq "ARRAY") {
	    $opt->[$#{$opt}] = $ref;
	} elsif (ref($opt) eq "HASH") {
	    $opt->{$key} = $ref;
	} else {
	    $state->set($name,$ref);
	}
    }
}


# Creating the configuration object
# See perldoc AppConfig::AutoDoc for details
sub parse_configuration {
    use Application::Config qw(:argcount GetConfig);
    my $appconfig = GetConfig({},

			      "codons" => {
				  ALIAS    => "c",
				  ARGCOUNT => ARGCOUNT_NONE,
				  DEFAULT  => 0,
				  SUMMARY  => "Count codons instead of aminoacids or bases.",
			      },

			      "input_options" => {
				  ALIAS    => "ia|input_args",
				  ARGCOUNT => ARGCOUNT_HASH,
				  DEFAULT  => { '-alphabet' => 'protein' },
				  SUMMARY  => "Hash of Bio::SeqIO::new arguments (see 'perldoc Bio::SeqIO'). E.g. -ia -alphabet=dna",
			      },

			      "input_format" => {
				  ALIAS    => "if|format",
				  ARGCOUNT => ARGCOUNT_ONE,
				  DEFAULT  => 'fasta',
				  SUMMARY  => "Bio::SeqIO supported file format.",
			      },

			      'id_parser'  => {
				  ACTION   => \&compile_code,
				  ALIAS    => 'p',
				  ARGCOUNT => ARGCOUNT_ONE,
				  DEFAULT  => \&my_id_parser,
				  SUMMARY  => "String or file with Perl code that return a reference to code to parse sequence IDs.",
			      },

			      "oligomers" => {
				  ALIAS    => "o",
				  ARGCOUNT => ARGCOUNT_LIST,
				  DEFAULT  => [],
				  SUMMARY  => "List of oligomers that should be counted ('all' for IUPAC).",
			      },

			      'translate'  => {
				  ALIAS    => "t",
				  ARGCOUNT => ARGCOUNT_HASH,
				  DEFAULT  => {},
				  SUMMARY  => "Bio::PrimarySeqI::translate() parameters (see 'perldoc Bio::PrimarySeqI').",
			      },
	);

    # Load IUPAC residue codes
    if (scalar @{$appconfig->oligomers}) {
	if ($appconfig->oligomers->[0] eq 'all') {
	    my %iupac = Bio::Tools::IUPAC::iupac_iub(); # List of DNA residues
	    if (scalar(keys %{$appconfig->translate}) || (exists $appconfig->input_options->{'-alphabet'} && $appconfig->input_options->{'-alphabet'} eq "protein")) {
		%iupac = Bio::Tools::IUPAC::iupac_iup(); # List of protein residues
		delete $iupac{'*'};
	    } elsif ($appconfig->codons) {
		%iupac = codon_list(); # Codons list
	    }
	    @{$appconfig->oligomers} = sort keys %iupac;
	}
    }

    push(@ARGV, "-") if (!-t STDIN);
    return $appconfig;
}

# POD: start
# Documentation (use option -doc or --doc to see it!)
#
# AppConfig::AutoDoc can automatically extract Plain Old Documentation
# from within the caller program's, add descriptions of the options
# created by L<define> and do some pretty formatting for output.
# 
# Note that POD may be added anywhere in your program, thus allowing 
# the documentation for a program to be left side by side with the
# function's definition.

=head1 NAME

 seqstats - wrapper around Bio::Tools::SeqStats

=head1 SYNOPSIS

 # Get sequence lengths

 seqstats seqs.fa

 # Print columns with the frequencies of
 # all residues recognized by IUPAC

 seqstats -o all seqs.fa

=head1 DESCRIPTION

This program uses BioPerl to count the number of residues in molecular
sequences and to calculate simple statistics, like hydropathicity,
molecular weight, etc. By default, it prints only the length of the
input sequences but the frequency of residues will be printed if the
user requests more data (see --oligomers option).

Additional information can be found in the documentation for the 
following BioPerl modules:

      Module name      :   Option
 ----------------------:-----------------
  Bio::PrimarySeqI     : --translate
  Bio::SeqIO           : --input_format
  Bio::SeqIO           : --input_options
  Bio::Tools::IUPAC    : --oligomers
  Bio::Tools::SeqStats : --codons
 ----------------------:-----------------

Amino acid codes for --oligomers are as in IUPAC:

          A           Ala            Alanine
          R           Arg            Arginine
          N           Asn            Asparagine
          D           Asp            Aspartic acid
          C           Cys            Cysteine
          Q           Gln            Glutamine
          E           Glu            Glutamic acid
          G           Gly            Glycine
          H           His            Histidine
          I           Ile            Isoleucine
          L           Leu            Leucine
          K           Lys            Lysine
          M           Met            Methionine
          F           Phe            Phenylalanine
          P           Pro            Proline
          S           Ser            Serine
          T           Thr            Threonine
          W           Trp            Tryptophan
          Y           Tyr            Tyrosine
          V           Val            Valine
          B           Asx            Aspartic acid or Asparagine
          Z           Glx            Glutamine or Glutamic acid
          X           Xaa            Any or unknown amino acid

=head1 AUTHOR

 Robson Francisco de Souza

=cut
# POD: end
