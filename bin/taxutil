#!/usr/bin/env perl

use FindBin;
use lib "$FindBin::RealBin/../perl/lib";
use Bio::TreeIO;
use Bio::Tree::Tree;
use Bio::DB::Taxonomy;
use warnings;
use strict;

# Parse command line options
my $CONFIG = parse_configuration();

# Create database  handler and tree object
my $db   = new Bio::DB::Taxonomy(-source => $CONFIG->source);
my $tree = Bio::Tree::Tree->new();

# Using taxon IDs: retrieve tree
if ($CONFIG->database =~ /^tax/i) {
    my $o = Bio::TreeIO->new(-format=>$CONFIG->outformat, -fh=>\*STDOUT, );
    foreach my $tree (taxids2tree($db, @ARGV)) {
	$tree->contract_linear_paths if ($CONFIG->outargs->{'contract'});
	map { $_->id(@{ $_->name('scientific') }[0]) } $tree->get_nodes if ($CONFIG->outargs->{'ncbi'});
	$o->write_tree($tree);
    }
    $o->close;
    exit 0;
}

# Fetch results for proteins
my %gi  = (); # Using a hash to avoid replicates
foreach my $gi (@ARGV) {
    my $taxon = undef;
    eval { $taxon = $db->get_taxon(-full=>1, -gi=>$gi, -db=>$CONFIG->database) };
    if ($@ || !defined $taxon) {
	warn "WARNING: problem retrieving taxonomic information for GI $gi:$@";
	next;
    }
    print join("\t",$gi,$taxon->object_id, $taxon->scientific_name, join("; ",map { $_->scientific_name } $tree->get_lineage_nodes($taxon))),"\n";
}

# Terminate execution nicely
exit 0;

#####
# Add your subroutines below
#####

# =head2 get_tree

# Title   : get_tree
# Usage   : my $tree = $db->get_tree(@species_names)
# Function: Generate a tree comprised of the full lineages of all the supplied
#           species names. The nodes for the requested species are given
#           name('supplied') values corresponding to the supplied name, such that
#           they can be identified if the real species name in the database
#           (stored under node_name()) is different.
# Returns : Bio::Tree::Tree
# Args    : a list of species names (strings)

# =cut

sub taxids2tree {
    my ($self, @taxids) = @_;

    # the full lineages of the species are merged into a single tree
    my @tree = ();
    foreach my $ncbi_id (@taxids) {
	my $node = $self->get_taxon(-taxonid => $ncbi_id);
	my $merged = 0;
	foreach my $tree (@tree) {
	    eval { $tree->merge_lineage($node); };
	    $merged = 1 unless ($@);
	}
	push(@tree, Bio::Tree::Tree->new(-verbose => $self->verbose, -node => $node)) unless ($merged);
	$tree[$#tree]->id($#tree);
	#$node->name('ncbi_taxon_id', $node->id);
	#$node->id($node->scientific_name || $node->common_name);
    }

    return @tree;
}

# Command line parsing
sub parse_configuration {
    use Application::Config qw(:argcount GetConfig);
    my $appconfig = GetConfig({ EXPAND_ARGV  => 1, EXPAND_STDIN => 1 },
			      'database' => { # Bio::DB::Taxonomy parameters
				  ALIAS    => 'd',
				  DEFAULT  => 'protein',
				  ARGCOUNT => ARGCOUNT_ONE,
				  SUMMARY  => 'Name of the Entrez database of the input identifiers. E.g. if set to "taxonomy", the program expects NCBI taxon IDs.',
			      },
			      'outformat' => {
				  ALIAS    => 'o',
				  DEFAULT  => 'newick',
				  ARGCOUNT => ARGCOUNT_ONE,
				  SUMMARY  => 'Output format',
			      },
			      'outargs' => {
				  ALIAS    => 'oa',
				  DEFAULT  => { 'ncbi' => 1, 'contract' => 1 },
				  ARGCOUNT => ARGCOUNT_HASH,
				  SUMMARY  => 'Output options',
			      },
			      'source' => {
				  ALIAS    => 's',
				  DEFAULT  => 'entrez',
				  ARGCOUNT => ARGCOUNT_ONE,
				  SUMMARY  => 'Set Bio::DB::Taxonomy driver to retrieve the taxonomical information',
			      },
	);

    return $appconfig;
}

# POD: start
# Documentation (use option -doc or --doc to see it!)
#
# AppConfig::AutoDoc can automatically extract Plain Old Documentation
# from within the caller program's, add descriptions of the options
# created by L<define> and do some pretty formatting for output.
# 
# Note that POD may be added anywhere in your program, thus allowing 
# the documentation for a program to be left side by side with the
# function's definition.

=head1 NAME

 taxutil - retrieve information from NCBI Taxonomy Database

=head1 SYNOPSIS

 # Retrieve taxonomical information for protein GI:123456
 taxutil 123456

=head1 DESCRIPTION

Command line inteerface for Bioperl's Bio::DB::Taxonomy.

=head1 AUTHOR

 Robson Francisco de Souza

=cut
# POD: end
