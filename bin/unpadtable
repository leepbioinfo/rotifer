#!/usr/bin/env perl

use FindBin;
use lib "$FindBin::RealBin/../perl/lib";
use strict;
use warnings;

# Parse command line options
my $CONFIG = parse_configuration();

# Add your main program code below
my $sep = $CONFIG->delimiter;
my $out = $CONFIG->output;
while (<>) {
    chomp;
    my @row = map { s/^ +//; s/ +$//; $_ } split(/$sep/);
    print join($out,@row),"\n";
}

# Terminate execution nicely
exit 0;

#####
# Add your subroutines below
#####

######
# Command line parsing, debugging and help messages
######

###############
# Subroutines

# Creating the configuration object
#
# The Application::Config library we are using here is just
# a wrapper that facilitates the use of AppConfig::AutoDoc.
#
# Because it depends on other libraries,Application::Config
# documentation is far from complete but contains the pointers
# to detailed documentation on its dependencies. The user should
# start reading "perldoc Application::Config" and them read the
# docs on each of its dependencies in the oerder below:
#
# Application::Config
#  AppConfig::AutoDoc
#   AppConfig
#    AppConfig::State
#
# The argument for new is an anonymous hash. This hash is
# used to control the bahaviour of AppConfig::AutoDoc. In
# This case, setting EXPAND_ARGV to 1 enables tranfers of
# all words in input files to @ARGV. EXPAND_STDIN does the
# same for text comming through pipelines (standard input)
#
# See perldoc AppConfig::AutoDoc for details
sub parse_configuration {
    use Application::Config qw(:argcount GetConfig);
    # Here I'm passing GetConfig a hash that serves both as an example and
    # prototype for the kind of argument expected by the method
    # "define" (see below) from AppConfig::AutoDoc.
    my $appconfig = GetConfig(# First, lets configure AppConfig::Autodoc by
			      # giving a hash reference with parameters
			      { 
			      },

			      # Input
			      'delimiter'  => {
				  DEFAULT  => "\t",
				  ARGCOUNT => ARGCOUNT_ONE,
				  ALIAS    => 's',
				  SUMMARY  => "Column delimiter for input files",
			      },
			      'output'  => {
				  DEFAULT  => "\t",
				  ARGCOUNT => ARGCOUNT_ONE,
				  ALIAS    => 'r',
				  SUMMARY  => "Column delimiter for output",
			      },
	);

    return $appconfig;
}


# POD: start
# Documentation (use option -doc or --doc to see it!)
#
# AppConfig::AutoDoc can automatically extract Plain Old Documentation
# from within the caller program's, add descriptions of the options
# created by L<define> and do some pretty formatting for output.
# 
# Note that POD may be added anywhere in your program, thus allowing 
# the documentation for a program to be left side by side with the
# function's definition.

=head1 NAME

 unpadtable - remove leading and trailing spaces in table columns

=head1 SYNOPSIS

 # If columns are separated by tabs (default) 
 unpadtable table.txt

 # Using spaces as column delimiters
 unpadtable -s ' +' table.txt

=head1 DESCRIPTION

This program does the inverse of what padtable does, i.e. it removes
leading and trailing spaces from columns in a text table, thus 
enabling its use with tjoin and other table tools. 

=head1 AUTHOR

 Robson Francisco de Souza

=cut
# POD: end
