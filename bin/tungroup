#!/usr/bin/env perl

use FindBin;
use lib "$FindBin::RealBin/../perl/lib";
use strict;
use warnings;

# Global variables need by eval block in parse_configuration()
my @F = (); # Global array
my %H = (); # Global hash

# Parse command line options
my $CONFIG = parse_configuration();

# Parsing tables and selecting rows
my @filters           = @{$CONFIG->filter};
my $rename_duplicates = $CONFIG->rename_duplicates;
my %group             = map { ($_,1) } @{$CONFIG->group};
my $empty             = $CONFIG->empty;
my $unpad             = $CONFIG->unpad;
my $parse_header      = $CONFIG->header;
my $input_delimiter   = $CONFIG->input_delimiter;
my $method            = $CONFIG->method;
my $output_delimiter  = $CONFIG->output_delimiter;
my $split_string      = $CONFIG->split_string;
my %exclude           = map { ($_,1) } map { eval "$_" } @{$CONFIG->exclude};
foreach my $file (@ARGV) {
    $H{"current_file"} = $file;
    my @include = @{$CONFIG->include};
    my $header_was_not_parsed = 1;
    open(TABLE,"<$file") || die "Could not open file $file";
  ROW: while (<TABLE>) {
      chomp;

      # Unpad
      if ($unpad) {
	  @F = map { s/^\s*//; s/\s*$//; $_ } split(/${input_delimiter}/);
      } else {
	  @F = split(/${input_delimiter}/);
      }

      # Parse header
      if ($parse_header && $header_was_not_parsed) {
	  # Rename duplicates
	  my %count = ();
	  my %index = ();
	  for (my $i=0; $i<=$#F; $i++) {
	      $count{$F[$i]}++;
	      $F[$i] .= "_" . $count{$F[$i]} if ($rename_duplicates && $count{$F[$i]} > 1);
	      push(@{ $index{$F[$i]} }, $i);
	  }

	  # Names to indices
	  foreach my $set (qw(include exclude group)) {
	      my $ref = $CONFIG->get($set);
	      if (scalar @$ref) {
		  my @temp = @$ref;

		  my %pointer = ();
		  for (my $i=0; $i<=$#temp; $i++) {
		      if (exists $index{$temp[$i]}) {
			  my $index = $pointer{$temp[$i]}++;
			  $index = $#{ $index{$temp[$i]} } if ($index > $#{ $index{$temp[$i]} });
			  $temp[$i] = $index{$temp[$i]}->[$index];
		      } elsif ($temp[$i] !~ /^\d+$/) {
			  die "WARNING: column $temp[$i] not found in file $file. Aborting due to request to $set this column....";
		      }
		  }

		  if ($set eq "include") {
		      @include = @temp;
		  } elsif ($set eq "exclude") {
		      %exclude = map { ($_,1) } @temp;
		  } else {
		      %group = map { ($_,1) } @temp;
		  }
	      } # if (scalar @$ref)
	  } # foreach my $set (qw(include exclude))

	  my @print = scalar @include ? @include : 0..$#F;
	  print join("${output_delimiter}",map { defined $F[$_] ? $F[$_] : $empty } grep { exists $exclude{$_} ? 0 : 1 } @print),"\n"
	      if ($file eq $ARGV[0]);
	  $header_was_not_parsed = 0;
	  next;
      } # if ($header)

      # Filter
      foreach my $rule (@filters) {
	  my $val = $rule->();
	  next ROW if (!$val);
      }

      # Combine columns
      my $table = [];
      if ($method eq 'same_order') {
	  for (my $colIdx=0; $colIdx<=$#F; $colIdx++) {
	      if (exists $group{$colIdx}) {
		  map { $table->[$_][$colIdx] = $F[$colIdx] || $empty } 0..$#{$table};
	      } else {
		  my @curCol = split(/${split_string}/,$F[$colIdx] || $empty);
		  my $max = $#{$table} > $#curCol ? $#{$table} : $#curCol;
		  for (my $rowIdx=0; $rowIdx<=$max; $rowIdx++) {
		      if ($rowIdx > $#{$table}) {
			  map { $table->[$rowIdx][$_] = exists($group{$_}) ? $F[$_] : $empty } 0..$colIdx;
		      }
		      $table->[$rowIdx][$colIdx] = $rowIdx > $#curCol ? $empty : $curCol[$rowIdx];
		  }
	      }
	  }
      }

      # Print
      my @print = grep { exists $exclude{$_} ? 0 : 1 } (scalar @include ? @include : 0..$#F);
      print join("\n", map { join("${output_delimiter}",@{$_}[@print]) } @$table),"\n";
  } # ROW: while (<TABLE>)
    close(TABLE);
} # foreach my $file (@ARGV)

# Exit
exit 0;

###############
# Subroutines
#

sub parse_configuration {
    # Parser definition
    use Application::Config qw(:argcount GetTableToolsConfig expand_numeric_interval);
    my $appconfig = GetTableToolsConfig(

	'exclude' => {
	    ALIAS    => 'x',
	    ACTION   => \&expand_numeric_interval,
	    ARGCOUNT => ARGCOUNT_LIST,
	    DEFAULT  => [],
	    SUMMARY  => "List of columns to remove from the output table. Columns may be selected using interval syntax of the form start..end, e.g. 0..4 refers to the first to fifth elements.",
	},

	"filter" => {
	    ALIAS    => 'f',
	    ARGCOUNT => ARGCOUNT_LIST,
	    DEFAULT  => [],
	    SUMMARY  => "Filter(s) to select rows in input table (Perl code). All filters can access current row contents in the @F array. If you need to access/store values from previously processed rows, these values can be stored in a hash named %H. Filters must always return Perl-compatible true (keep row) or false (drop row) values.",
	},

	"group" => {
	    ALIAS    => 'g',
	    ARGCOUNT => ARGCOUNT_LIST,
	    DEFAULT  => [ 0 ],
	    SUMMARY  => "List of column(s) that should not be expanded/ungrouped. Values in these columns will be repeated in the rows added to accomodate the expansion.",
	},

	'include' => {
	    ALIAS    => 'i',
	    ACTION   => \&expand_numeric_interval,
	    ARGCOUNT => ARGCOUNT_LIST,
	    DEFAULT  => [],
	    SUMMARY  => "List of columns to include in output table. Columns may be selected using interval syntax of the form start..end, e.g. 0..4 refers to the first to fifth elements.",
	},

	'method' => {
	    ALIAS    => 'm',
	    ARGCOUNT => ARGCOUNT_ONE,
	    DEFAULT  => 'same_order',
	    SUMMARY  => "Method to match cells from expanded columns to other columns.",
	},

	'split_string' => {
	    ALIAS    => 'c',
	    ARGCOUNT => ARGCOUNT_ONE,
	    DEFAULT  => ':',
	    SUMMARY  => "String to use as separator when spliting cell values using the default expansion method (see option '--method' below).",
	});

    # Parse rules (if stored in files)
    if (scalar @{$appconfig->filter}) {
	my @rules = @{$appconfig->filter};
	$appconfig->_default('filter');
	foreach my $rule (@rules) {
	    if ($rule !~ /\n/ && -f "$rule") {
		open(RULE,"<$rule") || die "Could not load rules from file $rule";
		$rule = join(" ",map { chomp; $_ } grep { !/^\#/ } <RULE>);
		close(RULE);
	    }
	    my $ref = eval "sub { $rule }";
	    die "Error while parsing rule $rule\n$@" if ($@);
	    $appconfig->filter($ref);
	}
    }

    # Add standard input if requested or if the list of arguments is empty
    unshift(@ARGV,"-") unless ( -t STDIN );

    return $appconfig;
}

__END__

# POD: start
# Documentation (use option -doc or --doc to see it!)
#
# AppConfig::AutoDoc can (1) automatically extract Plain Old 
# Documentation from within the caller program's, (2) add 
# descriptions (SUMMARY) to the options created by L<define>
# and (3) print all this after some pretty formatting.
# 
# Note that POD may be added anywhere in your program, thus
# allowing the documentation for a program to be left side by
# side with function definitions.

=head1 NAME

 tungroup - expand collapsed/grouped table rows

=head1 SYNOPSIS

Suppose you have a table t1.tsv containing the rows

 1 2,4 a,b
 2 6   c,d

then a tungroup command like

 tungroup t1.tsv

will expand the contents of the second and third columns
and generate a table like

 1 2 a
 1 2 b
 1 4 a
 1 4 b
 2 6 c
 2 6 d

Note that it does generate all combinations of expanded cells
from all columns in each row. You can control this behavior
using the --ungroup ('-u') option, like this:

 tungroup -u 2 t1.tsv

which will generate

 1 2 a,b
 1 4 a,b
 2 6 c,d

since only the second column will be expanded.

=head1 DESCRIPTION

tungroup is a program that expands (splits) the contents of cells
in a text table without loosing the relationships of the elements
in the cell with the other cells in the same row.

Note: just like perl-arrays and all table tools in Rotifer, 
tungroup identifies columns using zero-based indices. That
means users must refer to a column by its number minus one
(index = column number - 1). 

This version of tungroup Supports column names when the option
'--header' is activated.

=head2 Paired columns

When expanding more than one column, users may choose not to 
generate all combinations of elements from  cells of different
columns. We provide a mechanism to expand columns in parallel,
i.e. matching the Nth product of the expansion of any column
to the Nth elemnet of the expansion of all other columns.
For example, consider the table t1.tsv from above and a
paired expansion


=head1 AUTHOR

 Robson Francisco de Souza

=cut
# POD: end
