#!/usr/bin/env perl

use FindBin;
use lib "$FindBin::RealBin/../perl/lib";
use Scalar::Util qw(looks_like_number);
use strict;
use warnings;

# Parse command line options
my $CONFIG = parse_configuration();

# Parsing tables
my ($maxlen, $header, $table, %H) = parse_input_files($CONFIG, @ARGV);

# Block column names
my $ColumnNames = undef;
if (scalar(@$header)) {
    my $first = $CONFIG->include->[0];
    if ($header->[$first] !~ /^\|/) {
	$header->[$first] = "|" . $header->[$first];
	$maxlen->[$first] = length($header->[$first]) if (length($header->[$first]) > $maxlen->[$first]);
    }
    my @colnames = map { pad($CONFIG, $maxlen->[$_], $header->[$_]) } @{$CONFIG->include};
    $ColumnNames = join($CONFIG->output_delimiter, @colnames) . "\n";
}

# Process data
my $sortRef = $CONFIG->sort_blocks;
foreach my $block (sort $sortRef values %$table) {
    print $CONFIG->block_header->($CONFIG, $block, $header);
    print $ColumnNames if ($CONFIG->header);
    foreach my $row (sort sort_matrix_rows @$block) {
	my @row = map { pad($CONFIG, $maxlen->[$_], $row->[$_]) } @{$CONFIG->include};
	print join($CONFIG->output_delimiter, @row),"\n";
    }
}

exit 0;

###############
# Subroutines

sub pad {
    my ($conf,$length,$string) = @_;
    if ($conf->pad) {
	return sprintf("%-${length}s", (defined $string && length $string) ? $string : $conf->empty);
    } else {
	return (defined $string && length $string) ? $string : $conf->empty;
    }
}

sub unpad {
    my @ret = ();
    foreach my $string (@_) {
	$string =~ s/^\s+//;
	$string =~ s/\s+$//;
	push(@ret, $string);
    }
    return @ret;
}

#
# Header library
#

sub operons {
    my ($config, $block, $header) = @_;
    my $query = grep { $_->[0] eq '-->' } @$block;
    return "---------------------------------------\nORGANISM  ".$query->[11]."  accession no is ".$query->[10]." gi is ".$_->[4]."\n";
}

sub default_block_header {
    my ($config, $block, $header) = @_;
    return "# ".scalar(@$block).";\n";
}

sub column2header {
    my ($config, $block, $header) = @_;
    my @group = @{$block->[0]}[@{$config->group}];
    return "# ".scalar(@$block)."; ".join(", ",scalar(@group) ? @group : ""),"\n";
}

#
# Input parser
sub parse_input_files {
    my $conf  = shift;
    my @files = @_;
    my $SEP  = $conf->input_delimiter;
    my $exact = $conf->exact_match;

    # Compile row filters
    my @F = (); # array of column values for each row
    my %H = (); # global hash, for storing data while processing table rows 
    my @filter = ();
    if (scalar @{$conf->filter}) {
	foreach my $rule (@{$conf->filter}) {
	    my $ref = $rule;
	    if (-f "$rule") {
		open(RULE,"<$rule") || die "Could not load rules from file $rule";
		$ref = join(" ",map { chomp; $_ } grep { !/^\#/ } <RULE>);
		close(RULE);
	    }
	    if ($ref !~ /^\s*sub\s*\{.+\}\s*$/) {
		$ref = "sub { $ref }";
	    }
	    $ref = eval "$ref";
	    die "Error while compiling output filter $rule\n$@" if ($@);
	    push(@filter, $ref);
	}
    }

    # Parse table(s)
    my @collen = ();
    my %table = ();
    my $nCol1 = 0;
    my @header = ();
    foreach my $file (@files) {
	open(F,"<$file") || die "Could not open table $file";
	my $header_loaded = 0;
      F1: while (<F>) {
	  chomp;
	  next if /^\s*$/;
	  @F = defined $conf->number_of_columns ? split(/$SEP/, $_, $conf->number_of_columns) : split(/$SEP/);
	  @F = map { unpad($_) if (defined $_); $_ } @F if ($conf->unpad);

	  # Parse header
	  if ($conf->header && !$header_loaded) {
	      if (!scalar @{header}) {
		  @header = @F;

		  # Replace column names with indices
		  foreach my $option (qw(exclude group include sort_rows_in_block)) {
		      my $ref = $conf->get($option);

		      # Scan option parameters for named columns
		      my @unk = ();
		      my $lastMatch = undef;
		      for (my $j=0; $j<=$#{$ref}; $j++) {
			  my $oldvalue = $ref->[$j];
			  $oldvalue =~ s/\,+r$// if ($option eq "sort_rows_in_block");

			  # Scan all column names for new matches to this option
			  for (my $i=0; $i<=$#header; $i++) {
			      if ($oldvalue eq $header[$i]) {
				  next if (defined $lastMatch && $lastMatch == $i);
				  my $newvalue = ($option eq "sort_rows_in_block" && $ref->[$j] =~ /\,+r$/) ? "${i},r" : $i;
				  $lastMatch = $newvalue;
				  $ref->[$j] = $newvalue;
				  last;
			      }
			  } # for (my $i=0; $i<=$#header; $i++)

			  # Does it look like a valid column index? Great! Lets move on...
			  next if ($ref->[$j] =~ /^\d+$/ || ($option eq "sort_rows_in_block" && $ref->[$j] =~ /^\d+\,+r$/));

			  # Checked all columns and no NEW match?
			  # Use last previous matching column or record an unknown column
			  if (defined $lastMatch) {
			      $ref->[$j] = $lastMatch;
			  } else {
			      push(@unk, $ref->[$j]);
			  }
		      } # for (my $j=0; $j<=$#{$ref}; $j++)

		      # Report remaining unknown columns
		      if ($option eq "sort_rows_in_block") {
			  warn "Ignoring unknown columns given to --$option:\n",join(", ",@unk),"\n" if (scalar @unk && $conf->debug);
		      } else {
			  die "Unknown columns given to --$option:\n",join(", ",@unk),"\n" if (scalar @unk);
		      }
		  } # foreach my $option (qw(exclude group include sort))

		  # Reset _exclude_hash
		  $conf->_default("sort") if (!scalar @{$conf->sort_rows_in_block});
		  $conf->set("_exclude_hash",{});
		  foreach my $column (@{$conf->exclude}) {
		      $conf->_exclude_hash->{$column}++ unless (grep { $_ eq $column } @{$conf->include});
		  }
	      } # if (!scalar @header)

	      # Calculate column length
	      foreach (0..$#F) {
	          $collen[$_] = length($conf->empty) if (!defined $collen[$_]);
	          $collen[$_] = length($F[$_] || "") if ($collen[$_] < length($F[$_] || ""));
	      }

	      $header_loaded = 1;
	      next;
	  }

          # Exact matches
          foreach my $column (keys %$exact) {
             next F1 if (!exists $exact->{$column}{$F[$column]});
          }

	  # Apply row filters
	  if (scalar @filter) {
	      for (my $i=0; $i<=$#filter; $i++) {
		  my $val = $filter[$i]->(@header);
		  print STDERR "$_\nFilter $i returned '$val' when applied to the row above\n" if ($conf->debug);
		  next F1 if (!$val);
	      }
	  }

	  # Store number of columns
	  $nCol1 = $#F unless ($nCol1 > $#F);
	  #die "File $file does not preserve the number of columns" if (scalar(@F) != $nCol1);

	  # Row key
	  my @key = map { $F[$_] || '_mising_key_' } @{$conf->group};
	  my $key = join("\cA",@key);

	  # Calculate column length
	  foreach (0..$#F) {
	      $collen[$_] = length($conf->empty) if (!defined $collen[$_]);
	      $collen[$_] = length($F[$_] || "") if ($collen[$_] < length($F[$_] || ""));
	  }

	  # Parse row
	  push(@{ $table{$key} }, [ @F ]);
      } # F1: while (<$fh>)
	close(F);
    } # foreach my $file (@files)

    # Set list of output columns
    if (defined $nCol1 && !scalar @{$conf->include}) {
	foreach my $column (0..$nCol1) {
	    $conf->include($column) unless (exists $conf->_exclude_hash->{$column});
	}
    }

    return (\@collen, \@header, \%table, %H);
}

sub sort_matrix_rows {
    my $ret = 0;

    my @sort = @{$CONFIG->sort_rows_in_block};
    if (!scalar @sort) {
	my $max  = $#{$a};
	$max = $#{$b} if ($#{$b} > $max);
	push(@sort, $max-1);
	push(@sort, $max) if (defined $ARGV[1]);
    }

    foreach my $field (@sort) {
	(my $column = $field) =~ s/\,+r$//;
	next unless looks_like_number($column);
	my $v1 = defined $a->[$column] ? $a->[$column] : "";
	my $v2 = defined $b->[$column] ? $b->[$column] : "";
	if (looks_like_number($v1) && looks_like_number($v2)) {
	    $ret ||= ($v1 <=> $v2);
	} else {
	    $ret ||= ($v1 cmp $v2);
	}
	$ret *= -1 if ($field =~ /\,+r$/);
	return $ret if ($ret);
    }

    return $ret;
}

sub _compare_keys {
    my $ret = 0;
    foreach my $colIdx (@{$CONFIG->group}) {
	     my $va = defined $a->[0][$colIdx] ? $a->[0][$colIdx] : "";
	     my $vb = defined $b->[0][$colIdx] ? $b->[0][$colIdx] : "";
	     if (looks_like_number($va) && looks_like_number($vb)) {
	        $ret ||= ($va <=> $vb);
	    } else {
	        $ret ||= ($va cmp $vb);
        }
    }

    return $ret;
}

sub _block_size {
    return scalar(@$b) <=> scalar(@$a) || _compare_keys;
}

sub parse_configuration {
    # Parser definition
    use Application::Config qw(:argcount GetConfig quote_string expand_numeric_interval);
    my $appconfig = GetConfig(# See perldoc Application::Config and AppConfig::AutoDoc

			      'block_header' => {
				  ALIAS    => 'b',
				  ARGCOUNT => ARGCOUNT_ONE,
				  DEFAULT  => 'column2header',
				  SUMMARY  => "
Users may either choose a pre-defined block header generator or define one of their own with code that returns a reference to an anonymous Perl subroutine.
The 'block_header' anonymous subroutine must return a single string, which will be used as block header.
The following arguments are passed to the block_header subroutine:

\n=over
\n=item * (1) Reference to AppConfig::AutoDoc configuration object
\n=item * (2) Reference to array of arrays. Each anonymous array is a row in the current block
\n=item * (3) Reference to the table header (anonymous array). This value is set to undef if the input table doesn't have a header.
\n=back

The following pre-defined subroutines may be used as generators and referred to by their names:
\n=over
\n=item * simple : header is just a hash (#) folowed by the cluster number and a semi-colon. I<E.g.>:
\n=back

 # 1;
 A 11 12 13
 A 21 22 23
 A 31 32 33
 # 2;
 B 11 12 13
 B 21 22 23

\n=over
\n=item * column2header : like default plus the content of the columns used to define each block (separated by commas). I<E.g.>:
\n=back

 # 1; A, B
 A B 11 12 13
 A B 21 22 23
 # 2; A, C
 A C 31 32 33
 # 3; B, D
 B D 11 12 13
 B D 21 22 23

Note that, in the last example, the 1st and 2nd columns were used to define blocks (-g 0..1).
",
			      },

			      'empty' => {
				  ALIAS    => 'e',
				  ARGCOUNT => ARGCOUNT_ONE,
				  DEFAULT  => "-",
				  SUMMARY  => "String to fill in empty columns.",
			      },

			      'exact_match' => {
				  ALIAS    => 'm',
				  ACTION   => \&hash_of_arrays_from_file,
				  ARGCOUNT => ARGCOUNT_HASH,
				  DEFAULT  => {},
				  SUMMARY  => "Select rows using exact matches of column values to a list of values. For example, to select all rows from table.tsv whose values in the first column (0) are exact matches to the rows of a file named list.txt, use 'tfilter -m 0=list.txt table.tsv'",
			      },

			      'exclude' => {
				  ALIAS    => 'x',
				  ACTION   => \&expand_numeric_interval,
				  ARGCOUNT => ARGCOUNT_LIST,
				  DEFAULT  => [],
				  SUMMARY  => "List of columns to remove from the output. Columns may be selected using interval syntax of the form start..end, e.g. 0..4 refers to the first to fifth elements.",
			      },

			      "filter" => {
				  ALIAS    => 'f',
				  ARGCOUNT => ARGCOUNT_LIST,
				  DEFAULT  => [],
				  SUMMARY  => "filter(s) to select rows from the input table (Perl code)",
			      },

			      "group" => {
				  ALIAS    => 'g',
				  ACTION   => \&expand_numeric_interval,
				  ARGCOUNT => ARGCOUNT_LIST,
				  DEFAULT  => [ 0 ],
				  SUMMARY  => "List of column(s) whose values will be used to define blocks.",
			      },

			      "parse_header" => {
				  ALIAS    => 'y|header',
				  ARGCOUNT => ARGCOUNT_NONE,
				  DEFAULT  => 0,
				  SUMMARY  => "Parse column names from input files.",
			      },

			      'include' => {
				  ALIAS    => 'i',
				  ACTION   => \&expand_numeric_interval,
				  ARGCOUNT => ARGCOUNT_LIST,
				  DEFAULT  => [],
				  SUMMARY  => "List of columns to include in the output. Columns may be selected using interval syntax of the form start..end, e.g. 0..4 refers to the first to fifth elements.",
			      },

			      # Input/output options
			      'input_delimiter' => {
				  DEFAULT  => "\t",
				  ACTION   => \&quote_string,
				  ARGCOUNT => ARGCOUNT_ONE,
				  ALIAS    => 's',
				  SUMMARY  => "column delimiter of input files",
			      },

			      'number_of_columns' => {
				  ALIAS    => 'n',
				  ARGCOUNT => ARGCOUNT_ONE,
				  DEFAULT  => undef,
				  SUMMARY  => "Specify the maximum number of columns in the input table. When this option is not set, the program will use the column separator character alone to identify columns in each row (see option --input_delimiter below).",
			      },

			      'pad' => {
				  ALIAS    => 'p',
				  ARGCOUNT => ARGCOUNT_NONE,
				  DEFAULT  => 1,
				  SUMMARY  => "Add trailing spaces to data so that all rows in the output column have the same length. Note: applies to the output table only. See also --unpad.",
			      },

			      'sort_blocks' => {
				  ALIAS    => 'sb',
				  ARGCOUNT => ARGCOUNT_ONE,
				  DEFAULT  => 'by_size',
				  SUMMARY  => "Perl code to sort blocks. This Perl code should return a reference to a subroutine, i.e. be surrounded by 'sub { }'. Using Perl's builtin 'sort' function, a pair of variables, \$a and \$b, will be set to correspond to references to slices of the input table, i.e. each will be a reference to a list of lists. This subroutine must return 0 if the two blocks of rows are to be considered equivalent while sorting, -1 if \$a < \$b and 1 if \$a > \$b. Some predefined sorting subroutines are provided and may be referenced by the names listed below:

\n\=over
\n=item * by_size            : sort by the nnumber of rows in each block, from largest to smallest (default)
\n=item * by_grouped_columns : sort by using values in the grouped columns
\n=cut",
			      },

			      'sort_rows_in_block' => {
				  ALIAS    => 'sort|o',
				  ACTION   => \&expand_numeric_interval,
				  ARGCOUNT => ARGCOUNT_LIST,
				  DEFAULT  => [ 0 ],
				  SUMMARY  => "List of columns used to order rows in each block.",
			      },

			      'output_delimiter' => {
				  DEFAULT  => "\t",
				  ACTION   => \&quote_string,
				  ARGCOUNT => ARGCOUNT_ONE,
				  ALIAS    => 'r',
				  SUMMARY  => "column delimiter for output table",
			      },

			      'unpad' => {
				  ALIAS    => 'u',
				  ARGCOUNT => ARGCOUNT_NONE,
				  DEFAULT  => 1,
				  SUMMARY  => "Remove leading and trailing spaces from data in the input table. Note: applies to the input table only. See also --pad.",
			      },
	);

    # Choose header builder
  RULE: {
      local $_ = $appconfig->block_header;

      /^column2header$/i && do {
	  $appconfig->block_header(\&column2header);
	  last RULE;
      };

      /^simple$/i && do {
	  $appconfig->block_header(\&default_block_header);
	  last RULE;
      };

      ( -f $_ ) && do {
	  open(RULE,"<$_") || die "Could not load user defined header generator $_";
	  my $rule = join("",<RULE>);
	  close(RULE);
	  my $ref = eval "$rule";
	  die "Error while compiling header generator from file $_\n$@" if ($@);
	  $appconfig->block_header($ref);
	  last RULE;
      };

      # Compiling string
      my $ref = eval "$_";
      die "Error while attempting to compiling block header generator:\n$_\n$@" if ($@);
      $appconfig->block_header($ref);
    }

    # Sort block subroutine
  SORT: {
      local $_ = $appconfig->sort_blocks;

      /^by_size/i && do {
	  $appconfig->sort_blocks(\&_block_size);
	  last SORT;
      };

      /^by_grouped_columns/i && do {
	  $appconfig->sort_blocks(\&_compare_keys);
	  last SORT;
      };

      ( -f $_ ) && do {
	  open(RULE,"<$_") || die "Could not load user defined header generator $_";
	  my $rule = join("",<RULE>);
	  close(RULE);
	  my $ref = eval "$rule";
	  die "Error while compiling header generator from file $_\n$@" if ($@);
	  $appconfig->sort_blocks($ref);
	  last SORT;
      };

      # Compile string
      my $ref = eval "$_";
      die "Error while compiling header generator $_\n$@" if ($@);
      $appconfig->sort_blocks($ref);
    };

    # Test and index excluded columns (array -> hash)
    $appconfig->define("_exclude_hash", { DEFAULT  => {}, ARGCOUNT => ARGCOUNT_HASH });
    foreach my $column (@{$appconfig->exclude}) {
	$appconfig->_exclude_hash->{$column}++ unless (grep { $_ eq $column } @{$appconfig->include});
    }

    # Add standard input if requested or if the list of arguments is empty
    push(@ARGV, '-') unless ( -t STDIN || scalar(grep { $_ eq "-" } @ARGV) );

    return $appconfig;
}

sub hash_of_arrays_from_file {
    my ($s,$n,$v) = @_;
    my $ref = $s->get($n);
    my ($col,$new) = split(/=/,$v,2);
    $new =~ s|^\~/|$ENV{HOME}/|; # ~/ doesn't work on MacOS?????
    $ref->{$col} = {}; # Unfortunately there is no way to access the previous value of this hash!
    if ( -r $new ) {
        open(my $HoA,"<".$ref->{$col}) || die "Could not open hash file ".$ref->{$col};
        while (<$HoA>) {
            chomp; s/^\s+//; s/\s+$//;
            $ref->{$col}{$_} = 1;
        }
        close($HoA);
    } elsif ($new eq "-") {
        while (<STDIN>) {
            chomp; s/^\s+//; s/\s+$//;
            $ref->{$col}{$_} = 1;
        }
    } else {
        $ref->{$col}{$new} = 1;
    }
}

__END__

# POD: start
# Documentation (use option -doc or --doc to see it!)
#
# AppConfig::AutoDoc can (1) automatically extract Plain Old 
# Documentation from within the caller program's, (2) add 
# descriptions (SUMMARY) to the options created by L<define>
# and (3) print all this after some pretty formatting.
# 
# Note that POD may be added anywhere in your program, thus
# allowing the documentation for a program to be left side by
# side with function definitions.

=head1 NAME

 table2block - delimite blocks of rows in a table

=head1 SYNOPSIS

 table2block table.tsv > blocks.txt

=head1 DESCRIPTION

The goal of this program is to divide a table into blocks of rows and
add headers between blocks to make it easier to visually identify such
sets of rows.

In order to do that, this program processes delimited text tables, such
as CSV (comma-separated) and TSV (TAB-separated) tables, and identifies
all rows sharing the same values in a set of user-defined columns. These
rows are then printed in the same block of rows, separated from other
blocks by header lines.

=head2 $CONFIG global variable

Although table2blocks provides fully capable routines for tasks such as
building block headers, sorting blocks and rows inside blocks, the user
want to replace these defaults with her/his own methods using command 
line options or a compatible configuration file.

The B<$CONFIG> global variable is an instance of the B<L<AppConfig::AutoDoc>>
class generated by program's parsing of command line options and/or configuration 
files. This variable is available from within the code of any of the subroutines
provided by the user using the options --sort_rows_in_blocks, --block_header and
any other option that accepts Perl-code as argument.

For details on the information provided as arguments to any pre- or user-defined 
subroutines, see the corresponding section in the description of each 
configuration option below.

=head1 AUTHOR

 Robson Francisco de Souza

=cut
# POD: end
