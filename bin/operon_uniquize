#!/usr/bin/env perl

# LIBRARIES and PRAGMAS: start
use FindBin;
use lib "$FindBin::RealBin/../perl/lib";
use strict;
use warnings;
# LIBRARIES and PRAGMAS: end

# Parse configuration/options
my $CONFIG = &parse_configuration();

# Load operon file and perform unionfind simulataneously
# File contents
my %rows   = (); # GI 2 row
my %rownum = (); # Only way I can think of to keep row order
# Mapping
my $acc2operons = {};    # accessions 2 operons
my $block         = {};    # gi 2 block/operon
my $operons     = {};    # operon 2 GIs
# Header
my $cols    = undef; # Block column names

# Process file while loading
my $lastacc = undef; # current accession number
my $newID   = -1;    # Current block ID
my $currID  = -1;    # Dynamic ID that is assigned to each block
my $operonheader = (); # accession number 2 row
my %colIdx = ();     # Column name to number map (per block)
while (<>) {
    chomp;
    next if (/^\s*[\-\d]*\s*$|Gis for blastclust are|Gis without accession numbers/);
#    next if /^(\S*|\s*)$/; # Ignore empty or block separator rows

    # Fixing old operon file
    s/^ +(\d+)/.   $1/;
    s/^--\>(\d+)/--> $1/;

    # Parse block header (accession row, new block!)
    if (/^ORGANISM\s.+\s+accession no is (\S+)/) {
	($lastacc) = $1;
	($operonheader = $_) =~ s/^\s+//; # Clean up header
	$operonheader =~ s/\s+$//;        # Clean up header
	#$lastacc =~ s/\.\d+//;            # Remove version number
	$newID++;
	$currID = $newID;
	next;
    }

    # Parse block header
    if (/^\.\s+cds/) { # Load table column only once then ignore
	$cols = $_ if (!defined $cols);
	my @columns = split(/\s+/);
	map { $colIdx{$columns[$_]} = $_ } 0..$#columns;
	next;
    }

    # Parse row. Example ID: NZ_BBRF01000001.1:389860..390165:-:AOP73_RS01690
    next unless /^(\.\s|\-\-\>\s)/;
    my @row = split(/\s+/, $_, 10);
    my $id = $row[$colIdx{locus} || 7] || $row[$colIdx{pid} || 4] || $row[$colIdx{gi} || 8] || "";
    $id = join(":", $lastacc, $row[$colIdx{cds} || 1], $row[$colIdx{dir} || 2], $id);
    $rows{$id} = $_ unless (exists $rows{$id} && $rows{$id} =~ /^\s*\-.\>/);
    #print STDERR join(" ","BLOCK:",$newID,$currID,"ID:",$id),"\n";

    # Compare current and previous blocks
    if (exists $block->{$id}) {
	my $mergedID = $block->{$id};
	next if ($mergedID == $currID);
	if (exists $operons->{$currID}) { # Merge: change current to older ID
	    foreach my $elm (keys %{ $operons->{$currID} }) {
		$operons->{$mergedID}{$elm} = 1;
		$block->{$elm} = $mergedID;
	    }
	    delete $operons->{$currID};
	    delete $acc2operons->{$lastacc}{$currID};
	}
	$currID = $mergedID;
    }

    # New GI
    $block->{$id} = $currID;
    $operons->{$currID}{$id} = 1;
    $acc2operons->{$lastacc}{$currID} = $operonheader unless (exists $acc2operons->{$lastacc}{$currID});
}

# Print
foreach my $accnum (sort keys %$acc2operons) {
    foreach my $opID (sort { $a <=> $b } keys %{$acc2operons->{$accnum}}) {
	print $acc2operons->{$accnum}{$opID}."\n$cols\n";
	foreach my $row (sort { get_start($a) <=> get_start($b) } map { $rows{$_} } keys %{$operons->{$opID}}) {
	    print $row,"\n";
	}
	print "-" x 39,"\n";
    }
}

# end program
exit 0;

###############
# Subroutines

# Parsing rows for sorting
sub get_start {
    my ($start) = ($_[0] =~ /(\d+)/);
    return $start;
}

# Creating the configuration object
sub parse_configuration {
    use Application::Config qw(:argcount GetConfig);
    # Here I'm passing GetConfig a hash that serves both as an example and
    # prototype for the kind of argument expected by the method
    # "define" (see below) from AppConfig::AutoDoc.
    my $appconfig = GetConfig({ EXPECT_INPUT => 1 });
    return $appconfig;
}


# POD: start
# Documentation (use option -doc or --doc to see it!)
#
# AppConfig::AutoDoc can automatically extract Plain Old Documentation
# from within the caller program's, add descriptions of the options
# created by L<define> and do some pretty formatting for output.
# 
# Note that POD may be added anywhere in your program, thus allowing 
# the documentation for a program to be left side by side with the
# function's definition.

=head1 NAME

 operon_uniquize - remove redundancy created by gi2operons

=head1 SYNOPSIS

 gi2operons something | operon_uniquize > something.better

=head1 DESCRIPTION

This program is only necessary because gi2operons does not avoid
printing the description of a gene many times.

=head1 TODO

Fix gi2operons and drop this program.

=head1 AUTHOR

 Robson Francisco de Souza

=cut
# POD: end
