#!/usr/bin/env perl

# LIBRARIES and PRAGMAS: start
use FindBin;
use lib "$FindBin::RealBin/../perl/lib";
use Rotifer::DB::NCBI qw(protein2dna);
use IO::File;
use strict;
use warnings;
# LIBRARIES and PRAGMAS: end

# MAIN: start
my $CONFIG = &parse_configuration();
my $HASH = config_to_hashref($CONFIG);

# Download DNA and extract CDS
if ($CONFIG->cds) {
    require Bio::SeqIO;
    my $out = Bio::SeqIO->new(-format => "fasta", defined($CONFIG->output) ? ("-file",$CONFIG->output) : ("-fh",\*STDOUT));
    $HASH->{output} = IO::File->new_tmpfile;
    protein2dna($HASH, @ARGV);
    my $in = Bio::SeqIO->new(-fh => $HASH->{output}, -format => "genbank");
    my %ids = map { ($_,1) } @ARGV;
    while (my $dna = $in->next_seq) {
	foreach my $feat ($dna->get_SeqFeatures) {
	    next unless ($feat->primary_tag eq 'CDS');
	    my ($accver) = $feat->has_tag("protein_id") ? $feat->get_tag_values("protein_id") : "_NO_ACCESSION_";
	    (my $acc = $accver) =~ s/\.\d+$//;
	    my ($gi) = $feat->has_tag("db_xref") ? grep { /^GI:/ } $feat->get_tag_values("db_xref") : "_NO_DBXREF_";
	    $gi =~ s/^GI://;
	    next unless (exists $ids{$gi} || exists $ids{$accver} || exists $ids{$acc});
	    my $cds = $feat->spliced_seq;
	    my ($product) = $feat->has_tag("product") ? $feat->get_tag_values("product") : "";
	    $cds->desc($product . " [" . $dna->species->scientific_name . "]");
	    my $db = ($acc =~ /[A-Z]{2}_\d+/) ? "ref" : ($acc =~ /[A-Z]{3}\d+/) ? "gb" : "lcl";
	    #my $name = join("|","gi",$gi,$db,$accver,"");
	    my $name = $accver;
	    $cds->primary_id($name); $cds->display_id($name); $cds->display_name($name);
	    $out->write_seq($cds);
	}
    }
    $in->close;
    $out->close;
}

# Just download entire DNA sequence and print
else {
    $HASH->{output} = defined $CONFIG->output ? IO::File->new($CONFIG->output,"w") : IO::Handle->new_from_fd(\*STDOUT,"w");
    protein2dna($HASH, @ARGV);
}

exit 0;
# MAIN: end

# Copy option s to hash
sub config_to_hashref {
    my $conf = shift;
    my @opts = qw(debug retmax sleep update);
    my $hash = { map { ($_,$conf->get($_)) } @opts, %{$conf->advanced_options} };
    return $hash;
}

###############
# Subroutines

sub parse_configuration {
    use Application::Config qw(:argcount GetConfig);
    # Here I'm passing GetConfig a hash that serves both as an example and
    # prototype for the kind of argument expected by the method
    # "define" (see below) from AppConfig::AutoDoc.
    my $appconfig = GetConfig({ EXPAND_ARGV  => 1,
				EXPAND_STDIN => 1,
			      },

			      "advanced_options" => {
				  ALIAS    => 'ao|oa',
				  ARGCOUNT => ARGCOUNT_HASH,
				  DEFAULT  => {},
				  SUMMARY  => "Extra parameters to send to Rotifer::DB::NCBI::protein2dna.",
			      },

			      "cds" => {
				  ALIAS    => 'c',
				  ARGCOUNT => ARGCOUNT_NONE,
				  DEFAULT  => 0,
				  SUMMARY  => "Restrict output to the coding sequences (CDS) of each query proteins.",
			      },

			      "output" => {
				  ALIAS    => 'o',
				  ARGCOUNT => ARGCOUNT_ONE,
				  DEFAULT  => undef,
				  SUMMARY  => "Output file name.",
			      },

			      "retmax" => {
				  ALIAS    => 'm|max',
				  ARGCOUNT => ARGCOUNT_ONE,
				  DEFAULT  => 500,
				  SUMMARY  => "Number of input IDs to send to server at each download request. Users should be aware this program could crash if this is set to too high a value (>500) due to the length of the URL posted to ELink.",
			      },

			      "sleep" => {
				  ALIAS    => 's',
				  ARGCOUNT => ARGCOUNT_ONE,
				  DEFAULT  => 0,
				  SUMMARY  => "Pause between downloads in seconds. This is provided to comply with NIH EUtils usage policy and intended to avoid overloading their servers.",
			      },

			      'update' => {
				  ALIAS    => 'u',
				  DEFAULT  => 0,
				  ARGCOUNT => ARGCOUNT_NONE,
				  SUMMARY  => "(Boolean) Update identifiers before searching TaxonomyDB. This option depends on the NCBI revision history server.",
			      },
	);

    return $appconfig;
}


# POD: start
# Documentation (use option -doc or --doc to see it!)
#
# AppConfig::AutoDoc can automatically extract Plain Old Documentation
# from within the caller program's, add descriptions of the options
# created by L<define> and do some pretty formatting for output.
# 
# Note that POD may be added anywhere in your program, thus allowing 
# the documentation for a program to be left side by side with the
# function's definition.

=head1 NAME

 protein2dna - download the DNA sequences that code for a set of proteins

=head1 SYNOPSIS

 protein2dna 109392429

=head1 DESCRIPTION

Use this program to retrieve GenBank flat files of the DNA 
sequences that code for the input protein identifiers.

=head1 AUTHOR

 Robson Francisco de Souza

=cut
# POD: end
