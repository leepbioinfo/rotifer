#!/usr/bin/env perl

# LIBRARIES and PRAGMAS: start
use FindBin;
use lib "$FindBin::RealBin/../perl/lib";
use Bio::AlignIO;
use Bio::TreeIO;
use Bio::Tree::TreeUtils;
use File::Basename;
#use Statistics::Descriptive;
use strict;
use warnings;
# LIBRARIES and PRAGMAS: end

# Parse configuration/options
my $CONFIG = &parse_configuration();

# MAIN PROGRAM: start
# Open output stream
my $o = undef;
if ($CONFIG->outformat ne "none" && $CONFIG->outformat ne "table") {
    $o = Bio::AlignIO->new(-fh               => \*STDOUT,
			   -format           => $CONFIG->outformat,
			   -displayname_flat => $CONFIG->displayname_flat,
			   -idlength         => $CONFIG->idlength,
			   %{$CONFIG->advanced_output_options}
	);
}

# Process files
foreach my $file (@ARGV) {
    my @in = ref($file) ? (-fh => $file) : (-file => "<$file");
    my $i = Bio::AlignIO->new(-format => $CONFIG->informat, @in);

    # Alignment basename
    my $base = $file;
    if (defined $CONFIG->name) {
	my $re = $CONFIG->name;
	if (ref($re) eq 'CODE') {
	    $base = $re->($base);
	} else {
	    $base = fileparse($base, $re);
	}
    }

    # Processing alignments
    my $num = 0;
    while (my $aln = $i->next_aln) {
	# Loading alignment identifier
	my $id = $aln->id || $aln->accession;
	$id =  $base if (!defined $id || $id eq "NoName");
	$id = "$id.$num" if ($num > 0);
	$aln->id($id);

	# Rename sequences
	if (scalar(keys %{$CONFIG->rename_sequences})) {
	    my $hash = $CONFIG->rename_sequences;
	    foreach my $s ($aln->each_seq) {
		my $oldid = $s->id;
		if (exists $hash->{$oldid}) {
		    my $newid = $hash->{$oldid};
		    if ($aln->each_seq_with_id($newid)) {
			print "WARNING: trying to rename a sequence to a name already found in the alignment! Bio::SimpleAlign does not suport such collisions!";
		    } else {
			$aln->remove_seq($s);
			$s->id($newid);
			$aln->add_seq($s);
		    }
		}
	    }
	}
	
	# Clean alignment (remove strange gap symbols)
	if ($CONFIG->clean) {
	    map { $_->desc('') } $aln->each_seq;
	    $aln->map_chars('\.','-');
	    $aln->map_chars('\*','-');
	    $aln = $aln->remove_gaps(undef, 1); # Remove empty columns
	}

	# Remove columns
	if (defined $CONFIG->gaps) {
	    if ($CONFIG->gaps == 0) {
		$aln = $aln->remove_gaps("-");
	    } else {
		my @tmp = ();
		($aln, @tmp) = reduce_gaps($aln, $CONFIG->gaps);
		print map { join("\t", 'all', 'gaps', $_->[0], $_->[1]),"\n" } @tmp if ($CONFIG->outformat eq "table");
	    }
	}

	# Add descriptions
	if (defined $CONFIG->add_descriptions) {
	    my %table = load_description_table($CONFIG->add_descriptions);
	    map { $_->desc($table{$_->id}) } $aln->each_seq;
	}

	# Try to merge sequences
	$aln = merge_fragments($aln, merge => $CONFIG->merge, tree => $CONFIG->tree, debug => $CONFIG->debug) if (defined $CONFIG->merge);

	# Remove sequences
	my @exclude = @{ $CONFIG->exclude };
	push(@exclude, map { $_->id } grep { !exists $CONFIG->_included->{$_->id} } $aln->each_seq) if (scalar @{$CONFIG->include});
	if ($CONFIG->make_no_redundant) {
	    my $identical = undef;
	    ($aln, $identical) = remove_redundancy($aln);
	} elsif (scalar @exclude) {
	    foreach my $method (@exclude) {
		if ($method =~ /max_perc_identity=(\S+)/) {
		    my $cutoff = $1;
		    $cutoff /= 100 if ($cutoff > 1);
		    $aln = $aln->purge($cutoff);
		} else {
		    my $s = $aln->get_seq_by_id($method);
		    next unless (defined $s && $s->isa("Bio::LocatableSeq"));
		    $aln->remove_seq($s);
		}
	    }
	}

	# Print alignment
	if ($CONFIG->outformat eq "table") {
	    # Preparing tabular out
	    my @table = ();
	    foreach my $seq ($aln->each_seq) {
		my @acoord = map { $seq->column_from_residue_number($_) } ($seq->start, $seq->end);
		my $perc   = sprintf("%.4f",($acoord[1]-$acoord[0]+1)/$aln->length);
		(my $organism = $seq->id) =~ s/\|.+//;
		push(@table, { id       => defined $seq->desc ? join(":",$seq->id, $seq->desc) : $seq->id,
			       type     => "coord", 
			       organism => $organism,
			       sstart   => $seq->start, 
			       send     => $seq->end, 
			       astart   => $acoord[0],  
			       aend     => $acoord[1], 
			       coverage => $perc
		     });
	    }
	    @table = sort { $a->{'organism'} cmp $b->{'organism'} || $b->{'coverage'} <=> $a->{'coverage'} || $a->{'astart'} <=> $b->{'astart'} } @table;
	    print join("\n", map { my $h = $_; join("\t", $id, map { $h->{$_} } qw(id type sstart send astart aend coverage)) } @table),"\n";
	} elsif ($CONFIG->outformat ne "none") {
	    $o->write_aln($aln);
	}

	$num++;
    }
} # foreach my $file (@ARGV)

exit 0;
# MAIN PROGRAM: end

###############
# Subroutines

sub merge_fragments {
    my ($aln, %opts) = @_;

    if (scalar(@{$opts{'merge'}}) == 1 && $opts{'merge'}->[0] =~ /^\d\.*\d*$/) {
	return merge_fragments_by_coverage($aln, %opts);
    } else {
	return merge_fragments_by_list($aln, %opts);
    }
}

sub merge_fragments_by_coverage {
    my ($aln, %opts) = @_;

    # Order input table
    my @table = ();
    foreach my $seq ($aln->each_seq) {
	my @acoord = map { $seq->column_from_residue_number($_) } ($seq->start, $seq->end);
	my $perc   = sprintf("%.4f",($acoord[1]-$acoord[0]+1)/$aln->length);
	(my $organism = $seq->id) =~ s/\|.+//;
	push(@table, { id       => $seq->id, 
		       type     => "coord", 
		       organism => $organism,
		       sstart   => $seq->start, 
		       send     => $seq->end, 
		       astart   => $acoord[0],  
		       aend     => $acoord[1], 
		       coverage => $perc
	     });
    }
    @table = sort { $b->{'coverage'} <=> $a->{'coverage'} } @table;

    # Load tree and node distances
    if (defined $opts{'tree'}) {
	my $io = Bio::TreeIO->new(-file=>"<$opts{tree}", -format=>"newick");
	my $tree = $io->next_tree;
	$io->close;
	my $tutil = Bio::Tree::TreeUtils->new();
	my (undef, $nnodes, @leaves) = $tutil->distances($tree);
	my $dist = {};
	for (my $k=0; $k<$#leaves; $k++) {
	    for (my $l=$k+1; $l<=$#leaves; $l++) {
		next unless (defined $nnodes->[$k][$l] || defined $nnodes->[$k][$l]);
		my $kID = $leaves[$k]->id || $leaves[$k]->internal_id;
		my $lID = $leaves[$l]->id || $leaves[$l]->internal_id;
		$dist->{$kID}{$lID} = $nnodes->[$k][$l];
		$dist->{$lID}{$kID} = $nnodes->[$l][$k];
	    }
	}
	@table = sort { $a->{'organism'} cmp $b->{'organism'} || $dist->{$a->{'id'}} <=> $dist->{$b->{'id'}} || $b->{'coverage'} <=> $a->{'coverage'} } @table;
    }

    # Classify sequences into sets of non-overlapping fragments
    my @best = ();
    while (my $coord = shift(@table)) {
	my $added = 0;
      SET: for (my $i=0; $i<=$#best; $i++) {
	  next if ($coord->{'organism'} ne $best[$i]->[0]->{'organism'});
	  next if (grep { overlaps($_, $coord, $opts{'merge'}->[0]) } @{$best[$i]});
	  push(@{$best[$i]}, $coord);
	  print STDERR join("\t", $aln->id, $best[$i]->[0]->{'id'}, "FRAGMENT",
			    (map { $best[$i]->[0]->{$_} } qw(astart aend coverage)),
			    map { $coord->{$_} } qw(id astart aend coverage)),"\n" if ($opts{'debug'});
	  $added = 1;
	  last SET;
      }
	if (!$added) {
	    push(@best, [ $coord ]);
	    #print STDERR join("\t", $aln->id, "NEWSET", $#best, 0, map { $coord->{$_} } qw(id astart aend coverage)),"\n" if ($opts{'debug'});
	}
    }

    # Generate merged alignment
    my $gap = $aln->gap_char;
    foreach my $set (@best) {
	@$set = sort { $a->{'astart'} <=> $b->{'astart'} } @$set;
	while (my $merged = shift(@$set)) {
	    my $seq    = $aln->get_seq_by_id($merged->{'id'});
	    next if (!defined $seq); # Avoid sequences that were merged
	    my $string = $seq->seq;

	    foreach my $frag (@$set) {
		my $fseq = $aln->get_seq_by_id($frag->{'id'});
		next if (!defined $fseq); # This sequence was removed!
		my $fragseq = $fseq->seq;
		if ($merged->{'aend'} < $frag->{'astart'}) {
		    $merged->{'id'} .= ";".join(",",$frag->{'id'},$merged->{'aend'}+1,$frag->{'aend'});
		    $merged->{'coverage'} += sprintf("%.4f",($frag->{'aend'}-$merged->{'aend'})/$aln->length);
		    $fragseq = substr($fragseq, $merged->{'aend'}, $frag->{'aend'}-$merged->{'aend'});
		    substr($string, $merged->{'aend'}, $frag->{'aend'}-$merged->{'aend'}, $fragseq);
		} else {
		    $merged->{'id'} .= ";".join(",",$frag->{'id'},$frag->{'astart'},$frag->{'aend'});
		    $merged->{'coverage'} += $frag->{'coverage'};
		    $fragseq = substr($fragseq, $frag->{'astart'}-1, $frag->{'aend'}-$frag->{'astart'}+1);
		    substr($string, $frag->{'astart'}-1, $frag->{'aend'}-$frag->{'astart'}+1, $fragseq);
		}
		$merged->{'aend'} = $frag->{'aend'};
		$seq->seq($string);
		$seq->desc(defined $seq->desc ? join(":",$seq->desc,$fseq->id) : $fseq->id);
		$aln->remove_seq($fseq);
	    }

	    push(@table, $merged);

	    # Bio::SimpleAlign is a piece of crap: see what I have to do to correct the properties of a changed sequence!
	    $string = $seq->seq;
	    $string =~ s/$gap//g;
	    $aln->remove_seq($seq);
	    $seq->end(length $string);
	    $aln->add_seq($seq);
	}
    }

    return $aln;
}

sub merge_fragments_by_list {
    my ($aln, %opts) = @_;

    # Data
    my @table = ();
    foreach my $seq ($aln->each_seq) {
	my @acoord = map { $seq->column_from_residue_number($_) } ($seq->start, $seq->end);
	my $perc   = sprintf("%.4f",($acoord[1]-$acoord[0]+1)/$aln->length);
	(my $organism = $seq->id) =~ s/\|.+//;
	push(@table, { id       => $seq->id, 
		       type     => "coord", 
		       organism => $organism,
		       sstart   => $seq->start, 
		       send     => $seq->end, 
		       astart   => $acoord[0],  
		       aend     => $acoord[1], 
		       coverage => $perc
	     });
    }

    # Generate merged alignment
    my $gap = $aln->gap_char;
    foreach my $set (@{$opts{'merge'}}) {
	# Separate what the user wants to merge
	my %set = map { ($_,1) } split(":",$set);
	my @set = sort { $a->{'astart'} <=> $b->{'astart'} } grep { exists $set{$_->{'id'}} } @table;

	# Merge
	my $merged = shift(@set);
	my $seq    = $aln->get_seq_by_id($merged->{'id'});
	my $string = $seq->seq;
	foreach my $frag (@set) {
	    my $fseq = $aln->get_seq_by_id($frag->{'id'});
	    my $fragseq = $fseq->seq;
	    if ($merged->{'aend'} < $frag->{'astart'}) {
		$merged->{'id'} .= ";".join(",",$frag->{'id'},$merged->{'aend'}+1,$frag->{'aend'});
		$merged->{'coverage'} += sprintf("%.4f",($frag->{'aend'}-$merged->{'aend'})/$aln->length);
		$fragseq = substr($fragseq, $merged->{'aend'}, $frag->{'aend'}-$merged->{'aend'});
		substr($string, $merged->{'aend'}, $frag->{'aend'}-$merged->{'aend'}, $fragseq);
	    } else {
		$merged->{'id'} .= ";".join(",",$frag->{'id'},$frag->{'astart'},$frag->{'aend'});
		$merged->{'coverage'} += $frag->{'coverage'};
		$fragseq = substr($fragseq, $frag->{'astart'}-1, $frag->{'aend'}-$frag->{'astart'}+1);
		substr($string, $frag->{'astart'}-1, $frag->{'aend'}-$frag->{'astart'}+1, $fragseq);
	    }
	    $merged->{'aend'} = $frag->{'aend'};
	    $seq->seq($string);
	    $aln->remove_seq($fseq);
	}

	# Bio::SimpleAlign is a piece of crap: see what I have to do to correct a changed sequence properties!
	$string = $seq->seq;
	$string =~ s/$gap//g;
	$aln->remove_seq($seq);
	$seq->end(length $string);
	$aln->add_seq($seq);
    }

    return $aln;
}

sub overlaps {
    my ($c1,$c2,$max) = @_;

    my $max_start = $c1->{'astart'} > $c2->{'astart'} ? $c1->{'astart'} : $c2->{'astart'};
    my $min_end   = $c1->{'aend'}   < $c2->{'aend'}   ? $c1->{'aend'}   : $c2->{'aend'};
    my $overlap_length = $min_end - $max_start + 1;

    # Convert maximum overlap expressed as percentages to integers!
    if ($max =~ /^\d+\.\d+/) {
	use POSIX qw(ceil);
	my $min_start = $c1->{'astart'} < $c2->{'astart'} ? $c1->{'astart'} : $c2->{'astart'};
	my $max_end   = $c1->{'aend'}   > $c2->{'aend'}   ? $c1->{'aend'}   : $c2->{'aend'};
	my $aligned_length = $min_end - $max_start + 1;
	$max = ceil($aligned_length*$max);
    }

    return $overlap_length > $max;
}

sub reduce_gaps {
    my ($aln, $perc) = @_;

    use POSIX qw(ceil);
    if ($perc =~ /\./) {
	$perc /= 100;
	$perc = ceil($perc*$aln->num_sequences);
    }

    # Count the number of gaps in each column
    my @gaps   = ();
    my %remove = ();
    foreach my $seq ($aln->each_seq) {
	my $s = $seq->seq;
	for (my $i=0; $i<$aln->length; $i++) {
	    if (substr($s, $i, 1) eq $aln->gap_char) {
		$gaps[$i]++;
		$remove{$i} = 1 if ($gaps[$i] > $perc);
	    }
	}
    }

    # Convert the identities of all columns with excess of gaps
    # to pairs of coordinates
    my @remove = ();
    foreach my $key (sort { $a <=> $b } keys %remove) {
	if (!scalar @remove || $remove[$#remove]->[1] < $key-1) {
	    push(@remove, [ $key, $key ]); # Start or non-contiguous
	} else {
	    $remove[$#remove]->[1] = $key;
	}
    }

    $aln = $aln->remove_columns(@remove) if (scalar @remove);
    return ($aln, @remove);
}

# Find the complementary locations, for an interval
# length and a set of locations
sub complement {
    my $len   = shift;
    my @coord = @_;

    my @flanks = ();
    push(@flanks, [ 0, $coord[0]->[0] - 1]) if ($coord[0]->[0] > 1);
    for (my $i=1; $i<=$#coord; $i++) {
	push(@flanks, [ $coord[$i-1]->[1] + 1, $coord[$i]->[0] - 1 ]);
    }
    push(@flanks,[$coord[$#coord]->[1]+1,$len]) if ($coord[$#coord]->[1]<$len);

    return @flanks;
}

sub remove_redundancy {
    my $align = shift;

    my $new = $align->new();
    my $nofRemoved = 0;
    my %nonred = ();
    my %removed = ();
    foreach my $seq ($align->each_seq) {
	my $crc64 = crc64($seq->seq);
	if (exists $nonred{$crc64}) {
	    push(@{$removed{$crc64}}, $seq->id);
	    $nofRemoved++;
	} else {
	    $nonred{$crc64} = $seq->id;
	    $new->add_seq($seq);
	}
    }

    # Print report
    print STDERR "\n#IDENTICAL SEQUENCES IN ALIGNMENT (".$nofRemoved."):\n#";
    print STDERR join("\t",qw{CRC64 KEPT REMOVED}),"\n";
    my %hash = ();
    foreach my $crc (sort { $nonred{$a} cmp $nonred{$b} } keys %nonred) {
	next unless (exists $removed{$crc});
	print STDERR 
	    join("\t", $crc, $nonred{$crc}, join(" ",@{$removed{$crc}}) ),"\n";
	$hash{$nonred{$crc}} = $removed{$crc};
    }

    return ($new, \%hash);
}

# Borrowed from Bio::SeqIO::swiss
sub crc64 {
    my $seq = shift;
    my $POLY64REVh = 0xd8000000;
    my @CRCTableh = 256;
    my @CRCTablel = 256;
    my $initialized;

    my $crcl = 0;
    my $crch = 0;
    if (!$initialized) {
        $initialized = 1;
        for (my $i=0; $i<256; $i++) {
            my $partl = $i;
            my $parth = 0;
            for (my $j=0; $j<8; $j++) {
                my $rflag = $partl & 1;
                $partl >>= 1;
                $partl |= (1 << 31) if $parth & 1;
                $parth >>= 1;
                $parth ^= $POLY64REVh if $rflag;
            }
            $CRCTableh[$i] = $parth;
            $CRCTablel[$i] = $partl;
        }
    }

    foreach (split '', $seq) {
        my $shr = ($crch & 0xFF) << 24;
        my $temp1h = $crch >> 8;
        my $temp1l = ($crcl >> 8) | $shr;
        my $tableindex = ($crcl ^ (unpack "C", $_)) & 0xFF;
        $crch = $temp1h ^ $CRCTableh[$tableindex];
        $crcl = $temp1l ^ $CRCTablel[$tableindex];
    }
    my $crc64 = sprintf("%08X%08X", $crch, $crcl);

    return $crc64;
}

sub load_description_table {
    my $file = shift;

    my %hash = ();
    open(TABLE,"<$file") || die "Could not open rename table $file";
    while (<TABLE>) {
	chomp;
	my @row = split(/\t/);
	$hash{$row[0]} = $row[1];
    }
    close(TABLE);

    return %hash;
}

# See perldoc AppConfig::AutoDoc for details
sub parse_configuration {
    use Application::Config qw(:argcount GetConfig);
    my $appconfig = GetConfig({},
			      # Now, some examples of options you can create

			      "add_descriptions" => {
				  ALIAS    => "d",
				  ARGCOUNT => ARGCOUNT_ONE,
				  DEFAULT  => undef,
				  SUMMARY  => "Name a file containing annotations of the sequences in the MSA",
			      },

			      "advanced_output_options" => {
				  ALIAS    => "advoutopts|ao",
				  ARGCOUNT => ARGCOUNT_HASH,
				  DEFAULT  => {},
				  SUMMARY  => "Extra Bio::AlignIO options for the output stream.",
			      },

			      "clean" => {
				  ALIAS    => "c",
				  ARGCOUNT => ARGCOUNT_NONE,
				  DEFAULT  => 0,
				  SUMMARY  => "Remove strange gap symbols (e.g. * or +)",
			      },

			      "displayname_flat" => {
				  ALIAS    => "flat|s",
				  ARGCOUNT => ARGCOUNT_NONE,
				  DEFAULT  => 0,
				  SUMMARY  => "Do not add coordinates to sequence names",
			      },

			      'exclude' => {
				  ACTION   => 'EXPAND_FILES',
				  ALIAS    => "x",
				  ARGCOUNT => ARGCOUNT_LIST,
				  DEFAULT  => [],
				  SUMMARY  => "Removes sequences using one or several of the following methods:\n\n - by sequence name/ID : just name the targets\n - max_perc_identity : remove sequences using an identity threshold\n\nExample: remove all sequence with more than 70% identity and, after that, remove seq1\n\n aligntool -x max_perc_identity=0.7 -x seq1",
			      },

			      'gaps' => {
				  ALIAS    => "g",
				  ARGCOUNT => ARGCOUNT_ONE,
				  DEFAULT  => undef,
				  SUMMARY  => "Maximum number of gaps allowed in columns. All columns exceeding this threshold will be removed. This option interprets decimals as percentages (i.e. 20.0 or 0.2 both mean 20% of the sequence).",
			      },

			      'idlength' => {
				  ALIAS    => "l",
				  ARGCOUNT => ARGCOUNT_ONE,
				  DEFAULT  => 20,
				  SUMMARY  => "Maximum sequence identifier length",
			      },

			      'include' => {
				  ACTION   => 'EXPAND_FILES',
				  ALIAS    => "i",
				  ARGCOUNT => ARGCOUNT_LIST,
				  DEFAULT  => [],
				  SUMMARY  => "List of sequences to be kept in the alignment",
			      },

			      'informat' => {
				  ALIAS    => "if",
				  ARGCOUNT => ARGCOUNT_ONE,
				  DEFAULT  => 'fasta',
				  SUMMARY  => "Input file format",
			      },

			      "name" => {
				  ALIAS    => "b",
				  ARGCOUNT => ARGCOUNT_ONE,
				  DEFAULT  => undef,
				  SUMMARY  => "Define a method to infer the alignment name(s). This option accepts a regular expression (that is removed from the filename to derive the alignmen's basename) or Perl code defining a subroutine to process each filename and return a basename. If a file contains several alignments, they will be named basename, basename.1, basename.2, etc.",
			      },

			      'make_no_redundant' => {
				  ALIAS    => "nr",
				  ARGCOUNT => ARGCOUNT_NONE,
				  DEFAULT  => 0,
				  SUMMARY  => "Remove identical sequences",
			      },

			      'merge' => {
				  ACTION   => 'EXPAND_FILES',
				  ALIAS    => "m",
				  ARGCOUNT => ARGCOUNT_LIST,
				  DEFAULT  => [],
				  SUMMARY  => "Activate merging of fragmented sequences and set maximum allowed overlap between aparent fragments. This method uses the first part of sequence names to determine whether two possibly fragmented sequences are from the same organism (fields in a sequence name are split by pipes, i.e. '|' characters).",
			      },

			      'outformat' => {
				  ALIAS    => "of",
				  ARGCOUNT => ARGCOUNT_ONE,
				  DEFAULT  => "fasta",
				  SUMMARY  => "Output alignment format",
			      },

			      'purge' => {
				  ALIAS    => "p",
				  ARGCOUNT => ARGCOUNT_ONE,
				  DEFAULT  => 0,
				  SUMMARY  => "Removes sequences above a sequence similarity threshold (0 < threshold <= 1)",
			      },

			      'rename_sequences' => {
				  ALIAS    => "rs",
				  ACTION   => 'EXPAND_FILES',
				  ARGCOUNT => ARGCOUNT_HASH,
				  DEFAULT  => {},
				  SUMMARY  => "Rename sequences. Input must be a two column table with old names in the first column and new ones in the second.",
			      },

			      'tree' => {
				  ALIAS    => "t",
				  ARGCOUNT => ARGCOUNT_ONE,
				  DEFAULT  => undef,
				  SUMMARY  => "Guide tree used to identify best matching fragments when merging sequences",
			      },
	);

    # Put list of included sequenecs in a hash
    $appconfig->define('_included' => { ARGCOUNT => ARGCOUNT_HASH, DEFAULT => { map { ($_,1) } @{$appconfig->include} } });

    # Compile rules to derive the alignments basename
    if (defined $appconfig->name && $appconfig->name =~ /^sub\s*\{.+\}/) {
	my $bn  = $appconfig->name;
	my $ref = eval "$bn";
	die "Error while trying to compile basename rule (option --name):\n$@" if ($@);
	$appconfig->name = $ref;
    }

    push(@ARGV, \*STDIN) unless (-t STDIN);
    return $appconfig;
}


# POD: start
# Documentation (use option -doc or --doc to see it!)
#
# AppConfig::AutoDoc can automatically extract Plain Old Documentation
# from within the caller program's, add descriptions of the options
# created by L<define> and do some pretty formatting for output.
# 
# Note that POD may be added anywhere in your program, thus allowing 
# the documentation for a program to be left side by side with the
# function's definition.

=head1 NAME

 aligntool - a generic tool to operate on preexisting multiple 
             sequence alignments

=head1 SYNOPSIS

 # Removing gapped columns and (after that) identical sequences

 aligntool -ng -nr alignment.fasta

=head1 DESCRIPTION

This program allows the user to apply some Bioperl based methods
on preexisting multiple sequence alignments.

=head1 AUTHOR

 Robson Francisco de Souza

=cut
# POD: end
