#!/usr/bin/env perl

use FindBin;
use lib "$FindBin::RealBin/../perl/lib";
use strict;
use warnings;

# Parse command line options
my $CONFIG = parse_configuration();

# Parse input
my $ire = undef;
if (scalar @{ $CONFIG->ignore }) {
    $ire = join("|",@{ $CONFIG->ignore });
    $ire = qr/$ire/;
}
my $sep = $CONFIG->input_delimiter;
my $mnc = $CONFIG->max_number_of_columns;
my @length = ();
my @table  = ();
foreach my $file (@ARGV) {
    open(FILE,"<$file") || die "Could not open $file";
    while (<FILE>) {
	chomp;
	s/\r//; # Cleaning up potential Windows mess...
	if (defined $ire && /$ire/) {
	    push(@table, $_);
	    next;
	}
	my @row = split(/$sep/,$_,$mnc);
	foreach my $i (0..$#row) {
	    my $length = length($row[$i]);
	    $length[$i] = $length if (!defined($length[$i]) || $length[$i] < $length);
	    # Set alignment option
	    unless (exists $CONFIG->align->{$i}) {
		$CONFIG->align->{$i} = exists $CONFIG->align->{'all'} ? $CONFIG->align->{'all'} : 'left';
	    }
	}
	push(@table, \@row);
    }
    close(FILE);
}

# Generate output
foreach my $row (@table) {
    my @row = ();
    if (ref $row) {
	for (my $i=0; $i<=$#length; $i++) {
	    my $content = defined $row->[$i] ? $row->[$i] : '';
	    if ($CONFIG->align->{$i} eq 'left') {
		push(@row, sprintf("%-$length[$i]s",$content));
	    } else {
		push(@row, sprintf("%$length[$i]s",$content));
	    }
	}
    } else {
	@row = $row;
    }
    print join($CONFIG->output_delimiter,@row),"\n";
}

# Terminate execution nicely
exit 0;

# Command line parsing, debugging and help messages
sub parse_configuration {
    # Parser definition
    use Application::Config qw(:argcount GetConfig);
    my $appconfig = GetConfig(# Input
			      'input_delimiter' => {
				  DEFAULT  => "\t",
				  ARGCOUNT => ARGCOUNT_ONE,
				  ALIAS    => 's',
				  SUMMARY  => "Input field delimiter",
			      },

			      # Output
			      'align' => {
				  DEFAULT  => {},
				  ARGCOUNT => ARGCOUNT_HASH,
				  ALIAS    => 'a',
				  SUMMARY  => "Set alignment type for columns",
			      },

			      'ignore' => {
				  DEFAULT  => [],
				  ARGCOUNT => ARGCOUNT_LIST,
				  ALIAS    => 'i',
				  SUMMARY  => "Regular expression for rows that should not be padded. Rows that match will be printed without any changes.",
			      },

			      'max_number_of_columns' => {
				  DEFAULT  => -1,
				  ARGCOUNT => ARGCOUNT_ONE,
				  ALIAS    => 'm',
				  SUMMARY  => "Maximum number of columns to be produced by the parser.",
			      },

			      'output_delimiter' => {
				  DEFAULT  => "\t",
				  ARGCOUNT => ARGCOUNT_ONE,
				  ALIAS    => 'r',
				  SUMMARY  => "Output field delimiter",
			      },
	);

    # Check arguments
    push(@ARGV, '-') unless ( -t STDIN || scalar(grep { $_ eq "-" } @ARGV) );

    return $appconfig;
}

# POD: start
# Documentation (use option -doc or --doc to see it!)
#
# AppConfig::AutoDoc can automatically extract Plain Old Documentation
# from within the caller program's, add descriptions of the options
# created by L<define> and do some pretty formatting for output.
# 
# Note that POD may be added anywhere in your program, thus allowing 
# the documentation for a program to be left side by side with the
# function's definition.

=head1 NAME

 padtable - align columns of text tables

=head1 SYNOPSIS

 # Simplest usage
 padtable table1.txt

 # Chaning the output column separator
 padtable -r " | " table1.txt

=head1 DESCRIPTION

This program align columns of a text table, thus generationg a
text output where all rows and columns are padded with spaces so
as to have the same length.

=head1 AUTHOR

 Robson Francisco de Souza

=cut
# POD: end
