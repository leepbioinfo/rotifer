#!/usr/bin/env python3

# Load common Python llibraries
import os
import sys
import glob
import warnings
import pandas as pd

# Add path to rotifer libraries to Python's library search list
sys.path.insert(0, os.path.join(os.path.dirname(os.path.dirname(os.path.realpath(sys.argv[0]))), "lib"))

# Add HH-suite scripts directory to Python's library search list and load the HH-suite parser
sys.path.insert(0, os.path.join(os.getenv("HHLIB", default="/home/linuxbrew/anaconda3"),"scripts"))
import hh_reader as hhr

# Documentation
__version__ = 0.1
__authors__ = 'Gianlucca G. Nicastro, Rodolfo A Ribeiro, Robson F. de Souza'
__rdoc__ = '''
DESCRIPTION:
Parse HH-suite program's output and dump data as a table
'''

# Command line parser
def parse_cli():
    import rotifer.core.cli
    import argcomplete
    parser = rotifer.core.cli.parser(description = "Parse HH-suite program's output and dump data as a table")
    parser.add(dest='file', nargs='*', helper='HH-suite output file(s)', action=rotifer.core.cli.action.buffer_stdin)
    parser.add(dest="columns", long_arg="--columns", short_arg="-c", arg_type=str, helper="List of output columns", default=[], action="append")
    argcomplete.autocomplete(parser)
    args = parser.parse_args()
    if len(args.columns) == 0: # Default columns
        args.columns.extend(['query','hit','qstart','qend','evalue','qcov','hstart','hend','aligned_cols','score',
                             'qalilen','qlen','hlen','probability','identity','similarity','sum_probs','hcov'])
    return args

# HH-suite output parser
def hhsuite2pandas(args):
    import types

    # Initialize hash for dataframe
    data = {}
    for c in args.columns: data[c] = []

    # Column name to hhr_alignment attribute or lambda function
    col2attr = { 
            'query':  'query_id',
            'hit':    'template_id',
            'qstart': lambda x: x.start[0],
            'qend':   lambda x: x.end[0],
            'qcov':   lambda x: (x.end[0] - x.start[0] + 1) / x.query_length,
            'hstart': lambda x: x.start[1],
            'hend':   lambda x: x.end[1],
            'qlen':   'query_length',
            'qalilen': lambda x: x.end[0] - x.start[0] + 1,
            'hlen':   'template_length',
            'hcov':   lambda x: (x.end[1] - x.start[1] + 1) / x.template_length if x.template_length > 0 else 0
            }

    # Transfer data from hhr_alignment's list of tuples to a dictionary of lists
    for f in args.file:
        for x in hhr.read_result(f):
            for c in args.columns:
                if c in col2attr:
                    if type(col2attr[c]) is types.LambdaType:
                        data[c].append(col2attr[c](x))
                    elif hasattr(x,col2attr[c]):
                        data[c].append(getattr(x,col2attr[c]))
                    else:
                        sys.stderr.write("Column "+c+" is not a function or hhr_alignment attribute!\n")
                elif hasattr(x,c):
                    data[c].append(getattr(x,c))
                else:
                    sys.stderr.write("Column "+c+" is unknown\n")

    df = pd.DataFrame(data=data)
    return df

if __name__ == '__main__':
    args = parse_cli()
    hhsuite2pandas(args).to_csv(sys.stdout, sep="\t", index=None)
    exit(0)
