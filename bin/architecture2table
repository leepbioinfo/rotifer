#!/usr/bin/env perl

# LIBRARIES and PRAGMAS: start
use FindBin;
use lib "$FindBin::RealBin/../perl/lib";
use strict;
use warnings;
# LIBRARIES and PRAGMAS: end

# Parse configuration/options
my $config = &parse_configuration();

# Your code could replace the lines below!!!!!!!
# See the examples below on how to access the command line
# options from inside the program

# MAIN PROGRAM: start
my $sep = $config->input_delimiter;
my $header = 1;
my $origre = $config->domain_delimiter;
$origre = qr/$origre/; # compile regular expression
while (<>) {
    chomp;
    my @F = split(/$sep/);
    if ($header && $F[0] eq 'ID') {
	print join($config->output_delimiter, qw(ID domain start end evalue)),"\n";
	$header = 0;
	next;
    }

    my @region = ();
    my $re = $origre;
    foreach my $i (1..$#F) {
	my $row = 0;
	foreach my $data (grep { defined } split(/$re/,$F[$i])) {
	    push(@{ $region[$row] }, $data);
	    $row++;
	}
	$re = qr/\,+/ unless ($i > 1);
    }
    foreach my $i (0..$#region) {
	print join($config->output_delimiter, $F[0], map { $_ = $region[$i]->[$_]; s/\.\./\t/; s/\&.+//; $_ } 0..$#F-1 ),"\n";
    }
}

exit 0;
# MAIN PROGRAM: end

###############
# Subroutines

# Creating the configuration object
# See perldoc AppConfig::AutoDoc for details
sub parse_configuration {
    use Application::Config qw(:argcount GetConfig);
    my $appconfig = GetConfig(# 
			      "domain_delimiter" => {
				  ALIAS    => 'd',
				  ARGCOUNT => ARGCOUNT_ONE,
				  DEFAULT  => '[\~\+\[\]]+',
				  SUMMARY  => "Regular expression for isolating domain names.",
			      },
			      "input_delimiter" => {
				  ALIAS    => 's',
				  ARGCOUNT => ARGCOUNT_ONE,
				  DEFAULT  => "\t",
				  SUMMARY  => "input field separator",
			      },
			      "output_delimiter" => {
				  ALIAS    => 'r',
				  ARGCOUNT => ARGCOUNT_ONE,
				  DEFAULT  => "\t",
				  SUMMARY  => "output field separator",
			      }
	);

    return $appconfig;
}


# POD: start
# Documentation (use option -doc or --doc to see it!)
#
# AppConfig::AutoDoc can automatically extract Plain Old Documentation
# from within the caller program's, add descriptions of the options
# created by L<define> and do some pretty formatting for output.
# 
# Note that POD may be added anywhere in your program, thus allowing 
# the documentation for a program to be left side by side with the
# function's definition.

=head1 NAME

 architecture2table - convert an architecture file to a table

=head1 SYNOPSIS

 architecture2table file.arch

=head1 DESCRIPTION

Architecture files are text tables that contain the following columns:

=over

=item * a sequence identifier

=item * the sequence architecture, i.e. a text string describing the 
order of domains or regions in the sequence

=item * the region/domain coordinates (separated by comma's)

=item * the region's confidence value (e-value)

=back

This program converts the architecture table in a domain table, i.e.
a table with the columns

=over

=item * sequence identifier

=item * domain or region identifier

=item * domain start

=item * domain end

=item * domain significance

=back

=head1 AUTHOR

 Robson Francisco de Souza

=cut
# POD: end
