#!/usr/bin/env python3

import os
import sys
rotifer_root = os.path.dirname(os.path.dirname(os.path.realpath(sys.argv[0])))
sys.path.insert(0,os.path.join(rotifer_root,"lib"))
import rotifer.core.cli as corecli
import rotifer.devel.beta.sequence as rdbs

# Globals
__version__ = 0.001
__authors__ = 'Gianlucca G. Nicastro; Gilberto Kaihami; Robson F. Souza'
__rdoc__='''
DESCRIPTION:
Terminal-based alignment viewer
'''

def parse_cli():
    parser = corecli.parser(description = 'Add color to alignment')

    parser.add(
                dest = 'infile',
                nargs = "*",
                helper = 'Input sequence file',
                action = corecli.action.add_stdin,
                )

    parser.add( dest = 'informat',
                long_arg = '--informat',
                short_arg = '-if',
                helper = 'Input file format',
                default = "fasta",
                action = "store"
                )

    parser.add( dest = 'scale',
                long_arg = '--scale',
                short_arg = '-s',
                helper = 'Enable alignment position markers.',
                default = True,
                )

    parser.add( dest = 'scale',
                long_arg = '--no-scale',
                short_arg = '-no-s',
                helper = 'Disable alignment position markers.',
                action = 'store_false',
                )

    parser.add( dest = 'consensus',
                long_arg = '--consensus',
                short_arg = '-k',
                helper = 'Show consensus sequence',
                default = True,
                )

    parser.add( dest = 'consensus',
                long_arg = '--no-consensus',
                short_arg = '-no-k',
                helper = 'Hide consensus sequence',
                action = 'store_false',
                )

    parser.add( dest = 'colors',
                long_arg = '--colors',
                short_arg = '-c',
                helper = 'Show colored alignment.',
                default = True,
                )

    parser.add( dest = 'colors',
                long_arg = '--no-colors',
                short_arg = '-no-c',
                helper = 'Do not use colors.',
                action = 'store_false',
                )

    parser.add( dest = 'separator',
                long_arg = '--separator',
                short_arg = '-t',
                helper = 'Character to use in separator line.',
                default = "=",
                action = "store"
                )

    parser.add( dest = 'interval',
                long_arg = '--interval',
                short_arg = '-i',
                helper = 'Distance between position markers.',
                default = 10,
                action = "store"
                )

    parser.add( dest = 'columns',
                nargs = "*",
                long_arg = '--columns',
                short_arg = '-l',
                helper = 'List of annotation columns to show. If not set, all columns are shown.',
                default = [],
                action = "store"
                )

    parser.add( dest = 'pager',
                long_arg = '--pager',
                short_arg = '-p',
                helper = 'Choose pager. Default: "less -SR"',
                default = 'less -SR',
                action = "store"
                )

    args = parser.parse_args()

    return args

if __name__ == '__main__':
    args = parse_cli()
    for infile in args.infile:
        aln = rdbs.sequence(infile, args.informat)
        aln.view(
            color = args.colors,
            scale = args.scale,
            consensus = args.consensus,
            separator = args.separator,
            interval = args.interval,
            columns = args.columns if len(args.columns) else True,
            pager = args.pager
        )
