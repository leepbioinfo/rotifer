#!/usr/bin/env perl

use Getopt::Std;
use vars qw( $opt_d $opt_s $opt_p $opt_h $opt_f $opt_l $opt_t $opt_u $opt_c);
getopts('u:f:hps:lc:t');

if($opt_h)
{
    die "
    Options:

    -h: help

    -f: sequence length file, two columns: sequence ID and length, separated by TABs (Optional)

    -l: scaling of domain images (Optional, default is 'no')

    -t: taxonomy information added to gis (Optional, default is 'no')

    -u: base URL to be used for linking
        default is NCBI protein database

    -p: pictures instead of shapes(Optional, default is 'no')
        put images in C:\images\, filenames for images should be c1,c2,c3...c20 with .png as extension

    -s: shapes to use auto/same (default is 'auto')

    The input file should have the domain2architecture output format, i.e.:
        seqid domA+domB+domC 1..100&domA,101..200&domB,201..300&domC
    where columns will be separated by tabulations.

    Example Usage with minimum input:
       cat filename | architecture2svg > output_filename.svg

        or

       architecture2svg filename > output_filename.svg

    Example Usage with scaling and taxanomy information:
       architecture2svg filename -l -t > output_filename.svg

    Example Usage with pictures as domains in output:
       architecture2svg filename -p > output_filename.svg

    ";
}

##################################################################
######################## LOAD INPUT ##############################
my @array = ();
if ( scalar @ARGV ) 
{
    foreach my $file (@ARGV) {
      open(FILE,"<$file");
      push(@array,<FILE>);
      close(FILE);
    }
}
if ( ! -t STDIN )
{
    push(@array,<STDIN>);
}
if (!scalar @array)
{
    print "NO INPUT FILE\n";
    print "USAGE: cat filename | architecture2svg > output_filename.svg\n";
    print "USAGE: architecture2svg filename > output_filename.svg\n";
    print "USAGE: architecture2svg filename -l -t > output_filename.svg\n";
    print "USE architecture2svg -h for more options\n";
    exit 1;
}

########################################################################
######################## Configure Shapes ##############################
if($opt_s =~ /same/)
{
    @shapes = ("roundrectangle");
}
else
{
    @shapes = ("ellipse","rectangle","hexagon","octagon","diamond","roundrectangle","pentagon","parallelogram");
}

#############################################################################
######################## START PRINTING OUTPUT ##############################
    print <<HTML;
<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg width="3500" height="10000" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
HTML

#############################################################################
############################# COLORS ########################################
@rgb = ("CC","99","66","33","11");
@gbr = ("11","33","66","99","CC");
@brg = ("33","66","99","CC","11");
@rgb2 = ("22","55","88","AA","DD","FF");
@gbr2 = ("FF","DD","AA","88","55","22");
@brg2 = ("AA","DD","FF","22","55","88");

@colors = ();
for($r=0;$r<5;$r++)
{
    for($g=0;$g<5;$g++)
    {
        for($b=0;$b<5;$b++)
        {
            $color = "#"."@rgb[$r]"."@gbr[$g]"."@brg[$b]";
            push(@colors,$color);
        }
    }
}
for($r=0;$r<5;$r++)
{
    for($g=0;$g<5;$g++)
    {
        for($b=0;$b<5;$b++)
        {
            $color1 = "#"."@rgb2[$r]"."@gbr2[$g]"."@brg2[$b]";
            push(@colors,$color1);
        }
    }
}

#############################################################################
$nc = scalar(@colors); # number of colors being used
$ns = scalar(@shapes); # number of shapes being used
$np = scalar(@pics);   # number of images being used

##################################
#print <<HTML;
#<linearGradient id="MyGradient" gradientUnits="userSpaceOnUse" x1="0" y1="0" x2="20" y2="20">
#<stop offset="0" style="stop-color:white"/>
#<stop offset="1" style="stop-color:green"/>
#</linearGradient>
#<radialGradient id="MyGradient2" gradientUnits="userSpaceOnUse" cx="00" cy="0" r="10" fx="10" fy="10">
#<stop offset="0" style="stop-color:blue"/>
#<stop offset="0.5" style="stop-color:white"/>
#<stop offset="1" style="stop-color:green"/>
#</radialGradient>
#HTML

###############################################################################
@tgis = (); ## array to store tax gis
my %header = ();
my $yc = 15; # Initial value for vertical positioning of output elements
if ($opt_t)
{
  $xc = 400;
} else {
  $xc = 150;
}
my %domh = ();
foreach $array(@array)
{
    chomp($array);
    @domains = ();
    ($gi,$domains,$ranges) = split(/\s+/,$array);

    if ($gi eq "ID") { # Header!
       my @cols = split(/\s+/,$array);
       map { $header{$cols[$_]} = $_ } 0..$#cols;
       print <<HTML;
<a><text id="TextElement" x="0"   y="$yc" style="font-family:Verdana;font-size:12">ID</text></a>
<a><text id="TextElement" x="$xc" y="$yc" style="font-family:Verdana;font-size:12">Architecture</text></a>
HTML
       $yc += 50;
       next;
    }

    (@domains) = split(/\,/,$ranges);
    foreach $domns (@domains)
    {
        ($junk,$doms) = split(/&/,$domns);
        $domh{$doms} = 1;
    }
}
shift(@array) if (scalar(keys %header));
@sdoms = sort { $a cmp $b } keys %domh;
$nsd = scalar(@sdoms);
if($ranges =~ /&/)
{
}
else
{
    $opt_l = "";
}

######## Increase the array for shapes #######
@shap = ();
for($m=0;$m<$nsd;$m++)
{
    foreach $shape(@shapes)
    {
        push(@shap,$shape);
    }
}
$nshp = scalar(@shap);
#print "$nshp\n";

##################################################
######## Increase the array for colors #######
@col = ();
if($nc < $nsd)
{
    for($mmm=0;$mmm<$nsd;$mmm++)
    {
        foreach $coll(@colors)
        {
            push(@col,$coll);
        }
    }
    $ncoll = scalar(@col);
}
else
{
    @col = @colors;
}
@rev_col = reverse(@col);

#####################################################################################
############################## SCALING BLOCK STARTS ####################################
$rcol = "#FF0000";
my %slen = ();
if($opt_l)
{
    if ( -f $opt_f)
    {
       open(LEN,"<$opt_f") || die "Could not open sequence length file $opt_l";
       while (<LEN>)
       {
	       chomp;
	       my @F = split(/\t/);
	       $slen{$F[0]} = $F[1];
       }
       close(LEN);
    }
    $ee = 0;$dd = 0;$cc =0;
    foreach $array(@array)
    {
        chomp($array);
        @nodes = ();
        @domains = ();
        @rang = ();
        ($gi,$domains,$ranges,@other) = split(/\s+/,$array);
        if (exists $slen{$gi})
	{
	   $len = $slen{$gi};
        } else {
	  $len = qx"gi2fasta $gi | faletters | cut -f 2";
        }
        if($opt_t)
        {
              $tgi = qx"gi2leaf  $gi | grep '_'";
        }
        else
        {
            $tgi = $gi;
        }
        chomp($len);
        chomp($tgi);
        $len = ($len+$xc);
        print <<HTML;
<a xlink:title='$orgn' xlink:href="http://www.ncbi.nlm.nih.gov/entrez/viewer.fcgi?db=protein&amp;id=$gi" target="new">
<text id="TextElement" x="0" y="$yc" style="font-family:Verdana;font-size:12">$tgi</text></a>
<line x1="$xc" y1="$yc" x2="$len" y2="$yc" style="stroke:#999999;stroke-width:5"/>
HTML

        (@domains) = split(/\+/,$domains);
        (@rang) = split(/\,/,$ranges);
        $nre = scalar(@rang);
        foreach $range(@rang)
        {
            ($rang,$dnam) = split (/&/,$range);
            ($strt,$stpp) = split (/\.\./,$rang);
            (@dletters) = split(//,$dnam);
            $ndl = scalar(@dletters);
            $twide = ($ndl*5);
            $wide = (($stpp - $strt)+1);
            $textp = (($stpp-($wide/2))+$xc);
            if($wide < $twide)
            {
                $fsz = "6";
            }
            else
            {
                $fsz = "12";
            }
            $rstrt = ($strt+$xc);
            $yp = ($yc - 15);
            $yt = ($yc + 5);
            for($ii=0;$ii<$nsd;$ii++)
            {
                if(@sdoms[$ii] =~ /$dnam/)
                {
                    $rcol = @colors[$ii];
                    @acols = split(//,$rcol);
                    if((@acols[3] =~ /[A-Z]/)||(@acols[4] =~ /[A-Z]/))
                    {
                        $fcol = "#000000";
                    }
                }
            }

            print <<HTML;
<a xlink:title='$dnam' xlink:href="http://www.ncbi.nlm.nih.gov/entrez/viewer.fcgi?db=protein&amp;id=$gi&amp;dopt=fasta&amp;from=$strt&amp;to=$stpp"  target="new">
<rect x="$rstrt" y="$yp" width="$wide" height="30" rx="10" ry="10" style="fill:$rcol;stroke-width:0.5; stroke:rgb(0,0,0)"/>
<text id="TextElement" x="$textp" y="$yt" style="font-style:normal;font-family:Verdana;font-size:$fsz;font-weight:normal;text-decoration:normal;text-anchor:middle;fill:$fcol">$dnam</text>
</a>
HTML
        }
        $yc = ($yc + 50);
    }
    ############################## SCALING BLOCK ENDS   ####################################
} # IF ENDS

#####################################################################################
############################## NO SCALING BLOCK STARTS ##############################
else
{
    $ee = 0;$dd = 0;$cc =0;
    foreach $array(@array)
    {
        chomp($array);
        @nodes = ();
        @domains = ();
        @rang = ();
        ($gi,$domains,$ranges) = split(/\s+/,$array);
        (@domains) = split(/\+/,$domains);
        $nsds = scalar(@domains);
        $len = ((length($domains))*20);
        if($opt_t)
        {
            $tgi = qx"gi2leaf  $gi | grep '_'";
        }
        else
        {
            $tgi = $gi;
        }
        chomp($len);
        chomp($tgi);
        $len = ($len+$xc);
        print <<HTML;
<a xlink:title='$orgn' xlink:href="http://www.ncbi.nlm.nih.gov/entrez/viewer.fcgi?db=protein&amp;id=$gi" target="new">
<text id="TextElement" x="0" y="$yc" style="font-family:Verdana;font-size:12">$tgi</text></a>
<line x1="$xc" y1="$yc" x2="$len" y2="$yc" style="stroke:#999999;stroke-width:5"/>
HTML

        $strt = ($xc+10);
        $fcol = "#FFFFFF";
        foreach $doms(@domains)
        {
            $dnam = $doms;
            (@dletters) = split(//,$doms);
            $ndl = scalar(@dletters);
            $twide = ($ndl*5);

            $stpp = ($strt+($ndl*15));
            $wide = (($stpp-$strt)+1);
            $textp = (($stpp-($wide/2)));
            $rstrt = ($strt);
            $yp = ($yc - 15);
            $yt = ($yc + 5);
            for($ii=0;$ii<$nsd;$ii++)
            {
                if(@sdoms[$ii] =~ /$dnam/)
                {
                    $rcol = @colors[$ii];
                    @acols = split(//,$rcol);
                    if((@acols[3] =~ /[A-Z]/)||(@acols[4] =~ /[A-Z]/))
                    {
                        $fcol = "#000000";
                    }
                }
            }

            print <<HTML;
<a xlink:title='$dnam' xlink:href="http://www.ncbi.nlm.nih.gov/entrez/viewer.fcgi?db=protein&amp;id=$gi&amp;dopt=fasta"  target="new">
<rect x="$rstrt" y="$yp" width="$wide" height="30" rx="10" ry="10" style="fill:$rcol;stroke-width:0.5; stroke:rgb(0,0,0)"/>
<text id="TextElement" x="$textp" y="$yt" style="font-style:normal;font-family:Verdana;font-size:$fsz;font-weight:normal;text-decoration:normal;text-anchor:middle;fill:$fcol">$dnam</text>
</a>
HTML
            $strt = (($rstrt+$wide)+20);
        }
        $yc = ($yc + 50);
    }

}

############################################################################
############################## CLOSE DOCUMENT ##############################
print <<HTML;
</svg>
HTML
