#!/usr/bin/env python3

import os
import sys

import rotifer.core.cli as corecli
from tempfile import mkstemp
from subprocess import Popen, PIPE, check_call
from io import StringIO
import numpy as np
import pandas as pd
__version__ = 0.1
__authors__ = 'Gilberto Kaihami, Aureliano Guedes, Gianlucca Nicastro'

def parse_cli():
    parser = corecli.parser(description = 'Find domain(s) using HHSuite')

    parser.add( long_arg = '--input_directory',
                short_arg = '-i',
                dest = 'ipt_folder',
                nargs = None,
                default = '',
                arg_type = str,
                helper = 'Input directory containing the a3m files',
                action = "store"
                )
    parser.add( long_arg = '--database',
                short_arg = '-db',
                dest = 'database',
                nargs = None,
                default = '',
                arg_type = str,
                helper = 'Use a HHM database (Input the database path)',
                action = "store"
                )
    parser.add( long_arg = '--builddb',
                short_arg = '-bb',
                dest = 'build',
                nargs = None,
                default = '',
                arg_type = str,
                helper = 'Create a database (Input the database name)',
                action = "store"
                )
    # parser.add( long_arg = '--threshold',
    #             dest = 'threshold',
    #             nargs = None,
    #             default = 4,
    #             arg_type = float,
    #            helper = 'Z-score threshold for smoothed z-score (Default: 4)',
    #             action = "store"
    #             )
    #
    # parser.add( long_arg = '--influence',
    #             dest = 'influence',
    #             nargs = None,
    #             default = 0,
    #             arg_type = float,
    #            helper = 'Input influence for smoothed z-score (Default: 0)',
    #             action = "store"
    #             )
    #
    # parser.add( long_arg = '--lag',
    #             short_arg = '-l',
    #             dest = 'lag',
    #             nargs = None,
    #             default = 5,
    #             arg_type = int,
    #            helper = 'Input lag for smoothed z-score (Default: 5)',
    #             action = "store"
    #             )

    parser.add( long_arg = '--evalue',
                short_arg = '-e',
                dest = 'evalue',
                nargs = None,
                default = 1e-2,
                arg_type = float,
               helper = 'Maximum evalue (default: 0.01)',
                action = "store"
                )

    parser.add( long_arg = '--program',
                short_arg = '-p',
                dest = 'program',
                default = 'hhsearch',
               helper = 'Select the program (hhsearch or hhblits) [Default: hhsearch]'
                )
    parser.add( long_arg = '--iteration',
                short_arg = '-n',
                dest = 'iteration',
                default = 2,
               arg_type = int,
               helper = 'Number of iterations [1-8] (default=2)'
                )
    # parser.add( long_arg = '--search_table',
    #             short_arg = '-st',
    #             dest = 'mapper',
    #             nargs = None,
    #             default = '',
    #             arg_type = str,
    #             helper = 'Input a file name to Store a m8-like tsv',
    #             action = "store"
    #             )
    parser.add( long_arg = '--search_columns',
                short_arg = '-sc',
                dest = 'mapper_columns',
                nargs = None,
                default = '',
                arg_type = str,
                helper = '''Select column if -st is set
                            Possible columns (query, target, pct_idt, length, mismatch, gapOpen, qstart, qend, tstart, tend, eval, score)''',
                action = "store"
                )
    parser.add( long_arg = '--threads',
                short_arg = '-t',
                dest = 'threads',
                nargs = None,
                default = 5,
                arg_type = int,
                helper = 'Base name HHM Database',
                action = "store"
                )
    # Add another options here

    args = parser.parse_args()

    return args

def thresholding_algo(y, lag = 5, threshold = 4, influence = 0):
    # https://ieeexplore.ieee.org/abstract/document/8541902
    signals = np.zeros(len(y))

    filteredY = np.array(y)

    avgFilter = [0]*len(y)
    stdFilter = [0]*len(y)

    avgFilter[lag - 1] = np.mean(y[0:lag])
    stdFilter[lag - 1] = np.std(y[0:lag])

    for i in range(lag, len(y)):
        if abs(y[i] - avgFilter[i-1]) > threshold * stdFilter [i-1]:
            if y[i] > avgFilter[i-1]:
                signals[i] = 1
            else:
                signals[i] = -1

            filteredY[i] = influence * y[i] + (1 - influence) * filteredY[i-1]
            avgFilter[i] = np.mean(filteredY[(i-lag+1):i+1])
            stdFilter[i] = np.std(filteredY[(i-lag+1):i+1])
        else:
            signals[i] = 0
            filteredY[i] = y[i]
            avgFilter[i] = np.mean(filteredY[(i-lag+1):i+1])
            stdFilter[i] = np.std(filteredY[(i-lag+1):i+1])

    res = []
    start = 0
    while start < signals.shape[0]:
        if signals[start] ==1:
            s = signals[start]
            tt = ''
            for end in range(start+1, y.shape[0]):
                if signals[end] != s:
                    res.append((start+1,end+1))
                    start = end
                    tt = 'a'
                    break
            if not tt:
                res.append((start+1, y.shape[0]))
                break
        start +=1

    # for x in range(0, len(signals)):
    #     print(signals[x], y[x])
    return res


def tmp_file():
    fd, path = mkstemp()
    return path

if __name__ == '__main__':
    # Param ipt
    # Create a DB
    # Run search
    # Min eval
    tmp = tmp_file()
    args = parse_cli()
    program = args.program.lower()
    ipt_folder = args.ipt_folder
    # threshold = args.threshold
    threads = args.threads
    # mapper = args.mapper
    map_cols = args.mapper_columns
    evalue = args.evalue

    database = args.database
    build = args.build

    if not ipt_folder:
        print('ERROR: Input a valid folder.')
        print('See help, -h/--help')
        sys.exit()
    if not map_cols:
        map_cols = 'query target pct_idt length mismatch gapOpen qstart qend tstart tend eval score'.split()

    # Create a DB
#    hhsuitedb2.py --ia3m='/home/acpguedes/projects/sig_trans/work/SBP_4/hhali/a3m_base/*a3m' -o test.db --cpu 10 --force
    if build:
        database = build
        # print(f'''hhsuitedb2.py --ia3m='{ipt_folder}*a3m' -o {build} --cpu {threads} --force''')
        p = Popen(f'''hhsuitedb2.py --ia3m='{ipt_folder}*a3m' -o {build} --cpu {threads} --force''',
              shell = True, stdout = PIPE, stderr = PIPE)
        p.communicate()[0]

    # if mapper:
    #     try:
    #         if os.path.isfile(mapper):
    #             os.remove(mapper)
    #     except: pass

    for f in os.listdir(ipt_folder):
        ipt = (os.path.join(ipt_folder,f))

        if program == 'hhsearch':
            p = Popen(f'{program} -i {ipt} -d {database} -o /dev/null -blasttab {tmp} -cpu {threads}',
                      shell = True, stdout = PIPE, stderr = PIPE)
        else:
            p = Popen(f'{program} -i {ipt} -d {database} -o /dev/null -blasttab {tmp} -cpu {threads} -n {args.iteration}',
                      shell = True, stdout = PIPE, stderr = PIPE)

        s, e = (p.communicate()
                )
        df = pd.read_csv(tmp, sep = '\t', header = None)
        df.columns = 'query target pct_idt length mismatch gapOpen qstart qend tstart tend eval score'.split()

        df = df[df['eval'] <= evalue]
        # Gen array
        arr = [y for x in df.apply(lambda x: np.arange(x.qstart, x.qend+1), 1).values for y in x]

        y = np.bincount(arr)/ df.shape[0]

        # res = (thresholding_algo(y, threshold = args.threshold,
        #                          lag = args.lag,
        #                          influence = args.influence))
        # for idx,r in enumerate(res, 1):
        #     print(f + '\t'+ str(r[0])+'\t', str(r[1]), df.shape[0], idx)

        pd.options.display.float_format = '${:,.2f}'.format
        s = StringIO()
        df.to_csv(s, sep = '\t', index = None, header = None,float_format='%.2e')
        print(s.getvalue()[:-1])

        # if mapper:
        #     with open(f'{mapper}', 'a') as fi:
        #         pd.options.display.float_format = '${:,.2f}'.format
        #         s = StringIO()
        #         df.to_csv(s, sep = '\t', index = None, header = None,float_format='%.2e')
        #         fi.write(s.getvalue())
        #
        # # for idx, val in enumerate(y):
        # #     if val >= threshold:
        # #         sidx = idx+1
        # #         break
        # #
        # #
        # # for idx, val in enumerate(y[::-1]):
        # #     if val >= threshold:
        # #         eidx = y.shape[0]-idx
        # #         break
        # # if not eidx:
        # #     eidx = idx+1
        #
        # # print(eidx, idx+1, y.shape[0])
        # # print(f+'\t'+str(sidx)+'\t'+ str(eidx))
        #
        #
