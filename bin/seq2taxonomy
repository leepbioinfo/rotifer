#!/usr/bin/env perl

# Libraries
use FindBin;
use lib "$FindBin::RealBin/../perl/lib";
use Rotifer::DB::Base;
use Bio::SeqIO;
use strict;
use warnings;

# Global variable: taxonomy
our $DEFAULT_TAXON_NAMES  = Rotifer::DB::Base->data_path("taxonomy","taxonomy.txt");
$|=1;

# Main program
my $CONFIG  = parse_configuration();
if ($CONFIG->input_format eq "genbank") {
    &genbank2table($CONFIG);
} else {
    &main($CONFIG, @ARGV);
}
exit 0;

###########################
# Subroutines
sub genbank2table {
    my ($conf) = @_;
    my %preferred = map { ($_,1) } @{$conf->preferred_taxons};

    my $taxa = join("|",qw(Bacteria Archaea Eukaryota Viruses Viroids [Uu]nclassified [Oo]ther));

    my @header = qw(accver locus_tag gene sourceid sourcedb coded_by taxid bioproject biosample organism lineage classification);
    print join("\t",@header),"\n" if ($conf->header);

    my $context = "none"; # Where are we?
    my %entry = ();
    while (<>) {
	chomp;
	s/\s+$//;

	if (/^(\S+)/) {
	    $context = $1;
	    $context = "none" if ($context eq '//');
	}

	if (/^LOCUS\s+/) { # New sequence entry: reset
	    %entry = ();
	}

	elsif (/^VERSION\s+(\S+)/) {
	    $entry{"accver"} = $1;
	}

	elsif ($context eq "DBSOURCE") {
	    s/^DBSOURCE\s+//; s/\s*\;?$//;
	    if (/^accession\s+(\S+)/) {
		$entry{"sourceid"} = $1;
		$entry{"sourcedb"} = "NCBI";
	    } elsif (/^(embl|REFSEQ|pdb):?\s+(accession|molecule)\s+(\S+)/) {
		$entry{"sourcedb"} = uc($1);
		$entry{"sourceid"} = $3;
	    } elsif (/^UniProtKB:\s+(.+)/) { # Example: "UniProtKB: locus HPRR_MYCGE, accession P47666;"
		my %ids = split(/[ \,]+/,$1);
		$entry{"sourceid"} = exists $ids{'accession'} ? $ids{'accession'} : $ids{'locus'};
		$entry{"sourcedb"} = "UniProtKB";
	    } elsif (/^locus\s+\S+\s+accession\s+(\S+)/) {
		$entry{"sourceid"} = $1;
		$entry{"sourcedb"} = "NCBI";
	    }
	}

	elsif ($context eq "DBLINK") {
	    s/^DBLINK//; s/^\s+//;
	    if (my ($prefix,$database,$identifier) = /^(Bio)?(Project|Sample):\s*(\S+)/io) {
		$database = lc($database);
		my $dbname = "bio$database";
		$entry{$dbname} = $identifier;
	    }
	}

	elsif (/^\s+ORGANISM\s*(.*)/) {
	    $entry{"organism"}=$1;
	    my $parsingOrganismName = 1;
	    while (<>) {
		chomp;
		last if (/^\S+/);
		s/^\s+//;
		if (/^($taxa)/o) {
		    $parsingOrganismName = 0;
		    $entry{"classification"} = $_;
		} elsif ($parsingOrganismName) {
		    $entry{"organism"} .= " $_";
		} else {
		    $entry{"classification"} .= " $_";
		}
	    }
	}

	elsif (/^\s+\/strain=\"(.+)\"/) {
	    my $strain = $1;
	    if ($strain
		&& $entry{"organism"} !~ /\b(str\.|strain)/
		&& $entry{"organism"} !~ /\b\Q${strain}\E\s+|\b\Q${strain}\E$/) {
		$strain =~ s/$entry{organism}//; # Error observed: full organism name repeated in strain field
		$strain = "strain $strain" unless ($strain =~ /\b(strain|str.|sp.)\b/);
		$entry{"organism"} .= " $strain";
		$entry{"classification"} .= " $strain";
	    }
	}

	elsif (/^\s+\/sub_strain=\"(.+)\"/) {
	    my $sub_strain = $1;
	    if ($sub_strain !~ /(un|not *)known/
		&& $entry{"organism"} !~ /\bsub_strain/
		&& $entry{"organism"} !~ /\b\Q${sub_strain}\E\s+|\b\Q${sub_strain}\E$/) {
		$sub_strain = "sub_strain $sub_strain" unless ($sub_strain =~ /\bsub_strain\b/);
		$entry{"organism"} .= " $sub_strain";
		$entry{"classification"} .= " $sub_strain";
	    }
	}

	elsif (/^\s+\/(sero|patho)var=\"(.+)\"/) {
	    my $serovar = $2;
	    if ($serovar !~ /(un|not *)known/
		&& $entry{"organism"} !~ /\b(serovar|pathovar|var\.)/ 
		&& $entry{"organism"} !~ /\b\Q${serovar}\E\s+|\b\Q${serovar}\E$/) {
		$serovar = "serovar $serovar" unless ($serovar =~ /\b(sero|patho)var\b/);
		$entry{"organism"} .= " $serovar";
		$entry{"classification"} .= " $serovar";
	    }
	}

	elsif (/^\s+\/db_xref=\"taxon:(\d+)\"/) {
	    $entry{"taxid"} = $1;
	}

	elsif (/^\s+\/coded_by=\"(.+)\"?$/) {
	    $context = "CODED_BY";
	    $entry{"coded_by"} = $1;
	} elsif ($context eq "CODED_BY") {
	    if (/^\s+\/(\S+)\=/) {
		$context = $1;
	    } else {
		s/^\s+//;
		$entry{"coded_by"} .= $_;
	    }
	}

	elsif (/^\s+\/gene=\"(\S+)\"/) {
	    $entry{"gene"} = $1;
	}

	elsif (/^\s+\/locus_tag=\"(\S+)\"/) {
	    $entry{"locus_tag"} = $1;
	}

	elsif (/^\/\/$/) {
	    if (exists $entry{"coded_by"}) {
		my %ids = map { s/:.*$//; ($_,1) } grep { /:/ } split(/[\,\(]+/,$entry{"coded_by"});
		$entry{"coded_by"} = join(",",sort keys %ids);
	    }
	    if (exists $entry{"classification"}) {
		$entry{"classification"} =~ s/\.+$//;
		$entry{"classification"} .= "; $entry{organism}" if (exists $entry{"organism"});
		$entry{"lineage"} = join(">",map { lc } grep { exists $preferred{lc $_} } split(/\; +/,$entry{"classification"}));
	    }
	    $entry{"taxid"} = 0 unless (exists $entry{"taxid"});
	    print join("\t",map { s/[,:]$//; $_ } map { exists $entry{$_} && defined $entry{$_} ? $entry{$_} : "" } @header),"\n";
	}

    } # while (<>)
} # sub main2

# Main program
sub main {
    my ($conf,@args) = @_;
    my %preferred = map { ($_,1) } @{$conf->preferred_taxons};

    foreach my $file (scalar @args ? @args : \*STDIN) {
	my @file = -f $file ? ("-file",$file) : ref($file) ? ("-fh",$file) : $file eq "-" ? ("-fh",\*STDIN) : die "This should not happen!" ;
	my $in = Bio::SeqIO->new(-format=>$conf->informat, @file);

	my $i=0;
	my $last_id;
	while (1) {
	    #last if (eof($in->fh)); # Stop condition: end-of-file reached
	    my $seq;
	    eval {
		$seq = $in->next_seq;
	    };
	    if ($@) { # Parser error
		warn "Error parsing sequence $i (after $last_id):\n$@";
		$i++;
		next;
	    } else { # End of file?
		last unless (defined $seq);
	    }

	    if (!$i && $conf->header) {
		my @header = qw(accver locus_tag gene sourceid sourcedb coded_by taxid bioproject biosample organism lineage classification);
		print join("\t",@header),"\n";
	    }

	    my $taxon = $seq->species;
	    print join("\t",
		       $seq->seq_version,
		       map { join(",",$seq->annotation->get_all_Annotations($_)) } qw(locus_tag gene)
		),"\t";
	    if (defined $taxon) {
		my @class = reverse $taxon->classification;
		print join("\t",
			   $taxon->ncbi_taxid,
			   $class[$#class],
			   join(">",map { lc } grep { exists $preferred{lc $_} } @class) || "-",
			   join("; ",@class)
		    ),"\t";
	    } else {
		print join("\t",
			   "NO_NCBI_TAXID",
			   "NO_CLASSIFICATION"
		    ),"\t";
	    }
	    print "\n";

	    #use Data::Dumper;
	    #print Dumper($seq); exit 0;

	    $i++;
	    $last_id = $seq->id;
	} # while (1)
    } # foreach my $file (@args)
}

# Command line parsing, debugging and help messages
sub parse_configuration {
    # Parser definition
    use Application::Config qw(:argcount GetConfig);
    my $appconfig = GetConfig(# Hash

			      'header' => {
				  ALIAS    => 'y|he',
				  DEFAULT  => 0,
				  ARGCOUNT => ARGCOUNT_NONE,
				  SUMMARY  => "Print column names. Use '--noheader' to turn off this feature.",
			      },

			      'input_format' => {
				  ALIAS    => 'if|informat',
				  ARGCOUNT => ARGCOUNT_ONE,
				  DEFAULT  => "genbank",
				  SUMMARY  => "Input file format",
			      },

			      'output_delimiter' => {
				  ALIAS    => 'r',
				  ARGCOUNT => ARGCOUNT_ONE,
				  DEFAULT  => "\t",
				  SUMMARY  => "Output column separator",
			      },

			      'preferred_taxons' => {
				  ALIAS    => 'preferred|p',
				  ACTION   => 'EXPAND_FILES',
				  DEFAULT  => [ "$DEFAULT_TAXON_NAMES" ],
				  ARGCOUNT => ARGCOUNT_LIST,
				  SUMMARY  => 'List(s) of clades to add to the taxonomy summary column.',
			      },

	);
    return $appconfig;
}

__END__

# POD: start
# Documentation (use option -doc or --doc to see it!)

=head1 NAME

 seq2taxonomy - Extract taxonomy information from annotated sequence files

=head1 SYNOPSIS

 # Simple usage
 seq2taxonomy file1 file2 > seqs.tax

=head1 DESCRIPTION

This program parses short desccriptions of taxons for richly annotated
sequence formats such as Genbank and EMBL files. Supported file formats
are the same as those supported by BioPerl (see 'rotifer -doc Bio::SeqIO;').

=head1 AUTHOR

 Robson Francisco de Souza

=cut
# POD: end
