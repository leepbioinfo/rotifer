#!/usr/bin/env perl

use FindBin;
use lib "$FindBin::RealBin/../perl/lib";
use Scalar::Util qw(reftype);
use strict;
use warnings;

# Global variables need by eval block in parse_configuration()
my @F = (); # Global array
my %H = (); # Global hash

# Parse command line options
my $CONFIG = parse_configuration();

# Parsing tables and selecting rows
my @filters           = @{$CONFIG->filter};
my $rename_duplicates = $CONFIG->rename_duplicates;
my $empty             = $CONFIG->empty;
my $unpad             = $CONFIG->unpad;
my $parse_header      = $CONFIG->header;
my $SEP               = $CONFIG->input_delimiter;
my $osep              = $CONFIG->output_delimiter;
my $uref              = $CONFIG->update;
my $exact             = $CONFIG->exact_match;
#my $exact             = $CONFIG->_exact_match;
my %exclude           = map { ($_,1) } map { eval "$_" } @{$CONFIG->exclude};
foreach my $file (@ARGV) {
    $H{"current_file"} = $file;
    my @include = @{$CONFIG->include};
    my $header_was_not_parsed = 1;
    open(TABLE,"<$file") || die "Could not open file $file";
  ROW: while (<TABLE>) {
      chomp;

      # Unpad
      if ($unpad) {
	  @F = map { s/^\s*//; s/\s*$//; $_ } split(/$SEP/);
      } else {
	  @F = split(/$SEP/);
      }

      # Parse header
      if ($parse_header && $header_was_not_parsed) {
	  # Rename duplicates
	  my %count = ();
	  my %index = ();
	  for (my $i=0; $i<=$#F; $i++) {
	      $count{$F[$i]}++;
	      $F[$i] .= "_" . $count{$F[$i]} if ($rename_duplicates && $count{$F[$i]} > 1);
	      push(@{ $index{$F[$i]} }, $i);
	  }

	  # Names to indices
	  foreach my $set (qw(include exclude)) {
	      my $ref = $CONFIG->get($set);
	      if (scalar @$ref) {
		  my @temp = @$ref;

		  my %pointer = ();
		  for (my $i=0; $i<=$#temp; $i++) {
		      if (exists $index{$temp[$i]}) {
			  my $index = $pointer{$temp[$i]}++;
			  $index = $#{ $index{$temp[$i]} } if ($index > $#{ $index{$temp[$i]} });
			  $temp[$i] = $index{$temp[$i]}->[$index];
		      } elsif ($temp[$i] !~ /^\d+$/) {
			  die "WARNING: column $temp[$i] not found in file $file. Aborting due to request to $set this column....";
		      }
		  }

		  if ($set eq "include") {
		      @include = @temp;
		  } else {
		      %exclude = map { ($_,1) } @temp;
		  }
	      } # if (scalar @$ref)
	  } # foreach my $set (qw(include exclude))

	  my @print = scalar @include ? @include : 0..$#F;
	  print join("$osep",map { defined $F[$_] ? $F[$_] : $empty } grep { exists $exclude{$_} ? 0 : 1 } @print),"\n"
	      if ($file eq $ARGV[0]);
	  $header_was_not_parsed = 0;
	  next;
      } # if ($header)

      # Exact matches
      foreach my $column (keys %$exact) {
	  next ROW if (!exists $exact->{$column}{$F[$column]});
      }

      # Filter
      foreach my $rule (@filters) {
	  my $val = $rule->();
	  next ROW if (!$val);
      }

      # Update
      map { $F[$_] = $uref->{$_}{$F[$_]} if (/^\d+$/ && exists $uref->{$_}{$F[$_]}) } keys %$uref;

      # Print
      my @print = scalar @include ? @include : 0..$#F;
      print join("$osep",map { defined $F[$_] ? $F[$_] : $empty } grep { exists $exclude{$_} ? 0 : 1 } @print),"\n";
  } # ROW: while (<TABLE>)
    close(TABLE);
} # foreach my $file (@ARGV)

# Terminate execution nicely
exit 0;

###############
# Subroutines

sub hash_of_hash_from_table {
    my ($s,$n,$v) = @_;
    my $ref = $s->get($n);
    $v=~s/=\S+//;
    my $HoH = undef;
    if ($ref->{$v} eq "-") {
	$HoH = \*STDIN;
    } else {
	$ref->{$v} =~ s|^\~/|$ENV{HOME}/|; # ~/ doesn't work on MacOS?????
	open($HoH,"<".$ref->{$v}) || die "Could not open hash file ".$ref->{$v};
    }
    $ref->{$v} = { map { chomp; s/^\s+//; s/\s+$//; split(/\t+/,$_,2) } <$HoH> };
    close($HoH) if ($ref->{$v} ne "-");
}

sub hash_of_arrays_from_file {
    my ($s,$n,$v) = @_;
    my $ref = $s->get($n);
    my ($col,$new) = split(/=/,$v,2);
    $new =~ s|^\~/|$ENV{HOME}/|; # ~/ doesn't work on MacOS?????
    $ref->{$col} = {}; # Unfortunately there is no way to access the previous value of this hash!
    if ( -r $new ) {
	open(my $HoA,"<$new") || die "Could not open hash file $new";
	while (<$HoA>) {
	    chomp; s/^\s+//; s/\s+$//;
	    $ref->{$col}{$_} = 1;
	}
	close($HoA);
    } elsif ($new eq "-") {
	while (<STDIN>) {
	    chomp; s/^\s+//; s/\s+$//;
	    $ref->{$col}{$_} = 1;
	}
    } else {
	$ref->{$col}{$new} = 1;
    }
}

# Creating the configuration object
sub parse_configuration {
    use Application::Config qw(:argcount GetTableToolsConfig expand_numeric_interval);
    my $appconfig = ({ ERROR => \&config_error_handler });
    $appconfig = GetTableToolsConfig(

	'exact_match'  => {
	    DEFAULT  => {},
#	    DEFAULT  => [],
	    ACTION   => \&hash_of_arrays_from_file,
#	    ACTION   => 'EXPAND_FILES',
	    ARGCOUNT => ARGCOUNT_HASH,
#	    ARGCOUNT => ARGCOUNT_LIST,
	    ALIAS    => "m",
	    SUMMARY  => "Select rows using exact matches of column values to a list of values. For example, to select all rows from table.tsv whose values in the first column (0) are exact matches to the rows of a file named list.txt, use 'tfilter -m 0=list.txt table.tsv'",
	},

	'exclude'  => {
	    DEFAULT  => [],
	    ACTION   => \&expand_numeric_interval,
	    ARGCOUNT => ARGCOUNT_LIST,
	    ALIAS    => "x",
	    SUMMARY  => "List of columns that must be removed from the output table. Columns may be selected using interval syntax (start..end), e.g. 0..4 refers to the first to fifth elements.",
	},

	'include'  => {
	    DEFAULT  => [],
	    ACTION   => \&expand_numeric_interval,
	    ARGCOUNT => ARGCOUNT_LIST,
	    ALIAS    => "i",
	    SUMMARY  => "List of columns that must be added to the output table. Columns may be selected using interval syntax (start..end), e.g. 0..4 refers to the first to fifth elements.",
	},

	'filter' => {
	    DEFAULT  => [],
	    ARGCOUNT => ARGCOUNT_LIST,
	    ALIAS    => 'f',
	    SUMMARY  => "Perl code to filter each row (operates on \@F, can access %H)",
	},

	'update' => {
	    DEFAULT  => {},
	    ARGCOUNT => ARGCOUNT_HASH,
	    ACTION   => \&hash_of_hash_from_table,
	    ALIAS    => 'up',
	    SUMMARY  => "Replace/update column contents while loading. This option operates by storing the mapping of old data to new data in a hash and simply replacing the column contents where there is an exact match. Usage:

tfilter --update column=map.tsv

where 'column' is the name or number (starting at zero) of the column to be updated and map.tsv is a two column text table, columns separated by TABS, with old values in the first column and new ones in the second."
	});

    # Parse rules (if stored in files)
    if (scalar @{$appconfig->filter}) {
	my @rules = @{$appconfig->filter};
	$appconfig->_default('filter');
	foreach my $rule (@rules) {
	    if ($rule !~ /\n/ && -f "$rule") {
		open(RULE,"<$rule") || die "Could not load rules from file $rule";
		$rule = join(" ",map { chomp; $_ } grep { !/^\#/ } <RULE>);
		close(RULE);
	    }
	    my $ref = eval "sub { $rule }";
	    die "Error while parsing rule $rule\n$@" if ($@);
	    $appconfig->filter($ref);
	}
    }

    # Expand and index lists referred for exact_match
#    $appconfig->define('_exact_match' => { DEFAULT  => {}, ARGCOUNT => ARGCOUNT_HASH });
#    if (scalar @{$appconfig->get('exact_match')}) {
#	my $ref = $appconfig->get('_exact_match');
#	foreach (@{$appconfig->get('exact_match')}) {
#	    my ($col,$new) = split(/=/);
#	    if ( -r $new ) {
#		open(EM,"<$new") || die "Could not open exact match list $new";
#		while (<EM>) {
#		    chomp; s/^\s+//; s/\s+$//;
#		    $ref->{$col}{$_} = 1;
#		}
#		close(EM);
#	    } elsif ($new eq "-") {
#		while (<STDIN>) {
#		    chomp; s/^\s+//; s/\s+$//;
#		    $ref->{$col}{$_} = 1;
#		}
#	    } else {
#		$ref->{$col}{$new} = 1;
#	    }
#	}
#    }

    push(@ARGV, '-') unless ( -t STDIN || scalar(grep { $_ eq "-" } @ARGV) );

    # Since we make a lot of changes to the configuration object after parsing it
    # we need a replacement for AppConfig::AutoDoc's "--debug config" debugging method
    $appconfig->_dump_to_stderr if ($appconfig->debug eq 'postconfig');

    return $appconfig;
}

# POD: start
# Documentation (use option -doc or --doc to see it!)
#
# AppConfig::AutoDoc can automatically extract Plain Old Documentation
# from within the caller program's, add descriptions of the options
# created by L<define> and do some pretty formatting for output.
#
# Note that POD may be added anywhere in your program, thus allowing
# the documentation for a program to be left side by side with the
# function's definition.

=head1 NAME

 tfilter - select rows from tables

=head1 SYNOPSIS

 # Select rows were the first column is greater than 0.01

 tfilter -f '$F[0] > 0.1' table.txt

 # Select rows were the first column matches a regular expression
 # and the sum of the second and third column exceeeds 50

 tfilter -f '$F[0] =~ /^chromosome_(22|21)/ && $F[1]+$F[2] > 50' table.txt

=head1 DESCRIPTION

This program selects rows from input tables based on user defined rules.
Rules are perl code that will be compiled inside an anonymous
subroutine and should return either TRUE (1) to keep or FALSE (0) to drop
any given rows.

There are two pre-defined variables that can be used by filters:

@F = array that stores the column values for the current row (like perl's -F option)

%H = (initially empty) global hash to store arbitrary values, e.g. values from previous rows.

=head1 AUTHOR

 Robson Francisco de Souza

=cut
# POD: end

