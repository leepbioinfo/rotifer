#!/usr/bin/env perl

# LIBRARIES and PRAGMAS: start
use FindBin;
use lib "$FindBin::RealBin/../perl/lib";
use Rotifer;
use Rotifer::DB qw(id2fasta);
use Rotifer::Utils qw(nr2ids);
use Bio::SeqIO;
use warnings;
use strict;
# LIBRARIES and PRAGMAS: end

$|=1; # Autoflush

# Parse configuration/options
my $CONFIG = &parse_configuration();

# MAIN PROGRAM: end
my $out = Bio::SeqIO->new(-fh=>\*STDOUT, -format=>$CONFIG->outformat);
foreach my $file (@ARGV) {
    my $table = parse_input_table($CONFIG, $file);
    my ($startCol, $endCol, $strandCol) = map { $table->{"header"}{$_} } qw(start end strand);

    # Try to download missing sequences
    foreach my $db (@{$CONFIG->database}) {
	if (! -f $db ) { # BLAST or NCBI sequence database!
	    $db = id2fasta({ clean  => $CONFIG->clean,
			     db     => $db,
			     debug  => $CONFIG->debug,
			     retry  => $CONFIG->retry,
			     fastacmd_opts => $CONFIG->fastacmd,
			   }, keys %{ $table->{"index"} });
	}

	# Local sequence file! Let's parse it... I hope it is FASTA!
	my $in = Bio::SeqIO->new(-file => $db, -format=>$CONFIG->dbformat);
	while (my $seq = $in->next_seq) {
	    my ($id) = map { $_->{accession} } nr2ids($seq->id); # Cleanup sequence ID
	    next unless (exists $table->{"index"}{$id});
	    foreach my $row (@{ $table->{"index"}{$id} }) {
		my $start  = $table->{"data"}[$row][$startCol]  || 0;
		my $end    = $table->{"data"}[$row][$endCol]    || 0;
		my $strand = $table->{"data"}[$row][$strandCol] || 0;
		$start = 1 if ($start < 1);
		$end = $seq->length if ($end > $seq->length);
		my $subseq = $seq->trunc($start, $end);
		$subseq = $subseq->revcom if ($seq->alphabet ne 'protein' && $strand eq '-1');
		$subseq->id("$id:$start..$end:$strand");
		$out->write_seq($subseq);
	    }
	    delete $table->{"index"}{$id}; # Process sequences only once!
	}
	$in->close;
    }
}
$out->close;
exit 0;

#####################
# Subroutines

# Generic parser for input files
sub parse_input_table {
    my ($conf, $file) = @_;
    if ($conf->informat eq "table") {
	return parse_table($conf, $file);
    } elsif ($conf->informat eq "boundtable") {
	die "Boundtable support not yet implemented!";
	#return parse_boundtable($file);
    } else {
	die "Unknown input format ".$conf->informat;
    }
}

# Parser for input tables
sub parse_table {
    my ($conf,$file) = @_;
    my $hash = {};
    my $sep  = $CONFIG->input_delimiter;

    # Default column indices
    my $i = 0;
    my @columns = qw(seqid start end strand);
    $hash->{"header"} = { map { ($_,$i++) } @columns };

    # Parse
    my $is_first_row = 1;
    open(F,"<$file") || die "Could not open file $file";
    while(<F>) {
	chomp;
	my @F = split(/$sep/);

	if ($is_first_row && $conf->header) {
	    $i = 0;
	    $hash->{"header"} = { map { (lc($_),$i++) } @F };
	    foreach my $name (@columns) {
		die "Required column $name missing (header parsing on)!" if (!exists $hash->{"header"}{$name});
	    }
	    $is_first_row = 0;
	    next;
	}

	my $seqid = $F[ $hash->{"header"}{"seqid"} ];
	push(@{ $hash->{"data"} },[ @F ]);
	push(@{ $hash->{"index"}{$seqid} }, $#{ $hash->{"data"} });
    }
    close(F);

    return $hash;
}

# Creating the configuration object
sub parse_configuration {
    use Application::Config qw(:argcount GetConfig);
    my $appconfig = GetConfig({},

                              "clean" => {
                                  ALIAS    => "c",
                                  ARGCOUNT => ARGCOUNT_NONE,
                                  DEFAULT  => 1,
                                  SUMMARY  => "Print sequences in a single row. This is useful to use '| grep -A 1' as a subsequent filtering step.",
                              },

                              "database" => {
                                  ALIAS    => "d|db",
                                  ARGCOUNT => ARGCOUNT_LIST,
                                  DEFAULT  => [ "nr" ],
                                  SUMMARY  => "NCBI database(s) and/or local sequence files to use as source of the sequences.",
                              },

                              "fastacmd" => {
                                  ALIAS    => "fc",
                                  ARGCOUNT => ARGCOUNT_HASH,
                                  DEFAULT  => { "-t" => "T" },
                                  SUMMARY  => "Advanced options to pass to fastacmd (see Rotifer::DB).",
                              },

                              "retry" => {
                                  ALIAS    => "r",
                                  ARGCOUNT => ARGCOUNT_ONE,
                                  DEFAULT  => 10,
                                  SUMMARY  => "Number of attempts to download sequences using the same method",
                              },

			      "header" => {
				  ARGCOUNT => ARGCOUNT_NONE,
				  ALIAS    => "y|he",
				  DEFAULT  => 0,
				  SUMMARY  => "When using the table format, this option enables parsing of the first row as column names. See --informat for a list of obligatory columns.",
			      },

			      "informat" => {
				  ARGCOUNT => ARGCOUNT_ONE,
				  ALIAS    => "if",
				  DEFAULT  => 'table',
				  SUMMARY  => "Input table format. You can use any of the following formats:
\n=over
\n=item table => simple table (see --input_delimiter below). The first four columns of this table must correspond to the following data: sequence identifier (e.g. GI), start, end and strand (0, 1 or -1), in this order (default). To change column order, you will need to name your columns and enable header parsing (see option --header).
\n=item boundtable => old style interval table used by the TASS package.
\n=back
",
			      },

			      'input_delimiter' => {
				  DEFAULT  => "\t",
				  ARGCOUNT => ARGCOUNT_ONE,
				  ALIAS    => 's|delimiter',
				  SUMMARY  => "column delimiter of input files",
			      },

			      "outformat" => {
				  ARGCOUNT => ARGCOUNT_ONE,
				  ALIAS    => "o",
				  DEFAULT  => 'fasta',
				  SUMMARY  => "Output sequence file format. You can use any format supported by BioPerl's Bio::SeqIO parsers.",
			      },

			      "dbformat" => {
				  ARGCOUNT => ARGCOUNT_ONE,
				  ALIAS    => "df",
				  DEFAULT  => 'fasta',
				  SUMMARY  => "Output sequence file format. You can use any format supported by BioPerl's Bio::SeqIO parsers.",
			      },
	);

    unshift(@ARGV,"-") if (! -t STDIN );

    return $appconfig;
}

# POD: start
# Documentation (use option -doc or --doc to see it!)
#
# AppConfig::AutoDoc can automatically extract Plain Old Documentation
# from within the caller program's, add descriptions of the options
# created by L<define> and do some pretty formatting for output.
# 
# Note that POD may be added anywhere in your program, thus allowing 
# the documentation for a program to be left side by side with the
# function's definition.

=head1 NAME

 ft2seq - extract sequence fragments

=head1 SYNOPSIS

 # Default: extract CDSs from Genbank file
 ft2seq features.tsv

=head1 DESCRIPTION

This program extracts subsequences from selected target sequences. 
Input is a table of coordinates in one of the supported text table 
formats mentioned below.

=head1 AUTHOR

 Robson Francisco de Souza

=cut
# POD: end
