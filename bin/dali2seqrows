#!/usr/bin/env perl
# input: upper/lowercase strings
# output: stacked alignment 

use FindBin;
use lib "$FindBin::RealBin/../perl/lib";
use POSIX qw(ceil);
use warnings;
use strict;

####### GLOBAL VARIABLES #######################################################
my $CONFIG = parse_configuration();
my $gap='-';

################################################################################
####### MAIN PROCEDURE - SUBROUTINE CHOSEN ACCORDING TO OPTS/ARGS PASSED ####### 
my @header  = qw(pdbid zscore rmsd lali nres id% description name n1 alignment n2 secondary_structure n3);
my %columns = map { ($header[$_],$_) } 0..$#header;
my ($data,@multali) = &parse_dali_html($CONFIG, \%columns, @ARGV);
my @longali = &poppush([ map { $_->{'poppush'} } @multali ]);
&transfer_gaps(\@multali, @longali);

# Print
if (scalar @multali) {
   # Header
   print join("\t",@header),"\n";

   # Scale rows
   my $l = length($multali[0]->{'alignment'});
   my $n = -length($l);
   my @lcols = qw(/S - - - - - scale name num);
   my @scale = ();
   foreach my $row (scale(1,$l)) {
	   $lcols[$#lcols-1] = "s".abs($n);
	   $lcols[$#lcols] = $n;
	   push(@scale,[ @lcols, $row, $n, $row, $n ]);
	   $n++;
   }
   print join("\n",map { join("\t",@$_) } @scale),"\n";

   # Separator
   my $sep = [ "/%", @lcols[1..$#lcols-3], "separator", "sep", $n, "." x $l, $n, "." x $l, $n ];
   print join("\t",@$sep),"\n";
   $n++;

   # Alignment
   my $empty = [ qw(unknown na 0.0 100 na 100 query) ];
   foreach my $hit (@multali) {
	$empty->[0] = $hit->{'name'} || 'unknown';
	$hit->{n} = $n;
	my @data = (@{ $data->{$hit->{'name'}} || $empty }, map { $hit->{$_} } qw(name n alignment n dssp n));
	print join("\t",@data),"\n";
	$n++;
   }

   # Scale again...
   $sep->[0] = "/ %/";
   $n = scalar(@multali);
   $n = ceil(($n+10*(length($n)-1 || 1))/(10**(length($n)-1)))*10**(length($n)-1);
   map { $sep->[$_] = $n } (8,10,12);
   print join("\t",@$sep),"\n";
   $n++;
   foreach my $row (@scale) {
	   $row->[7] = "s$n";
	   map { $row->[$_] = $n } (8,10,12);
	   print join("\t",@$row),"\n";
	   $n++;
   }
}

exit;

### END MAIN

################################################################################
### SUBROUTINES
###############################################################################

sub scale {
	my ($min,$max) = sort { $a <=> $b } @_;
	my $l = length($max);
	my @a = map { "" } 0..$l-1;
	for (my $c=$min; $c<=$max; $c++) {
		for (my $r=$l-1; $r>=0; $r--) {
			my $w = $c . "." x ($l-length($c));
			$a[$r] .= substr($w,$r,1);
		}
	}
	return @a;
}

sub parse_dali_html {
    my ($config, $col, $file, @chains) = @_;

    # Choose chains
    my %chains  = map { ($_,1) } @chains;
    my %exclude = map { ($_,1) } @{$config->exclude};

    my %hits   = ();
    my @hits   = ();
    my %sentry = ();
    my $noDSSP = 0;
    my $qseq   = "";
    my $sseq   = "";
    my $dssp   = "";
    my $qdssp  = "";
    my $query  = undef;
    my $schain = undef;
    my $score  = 0;
    my %data   = ();
    open(F,"<$file") || die "Could not open file $file";
    while (<F>) {
	if (/\<INPUT.+MOLECULE/) {
	   my ($pdbid,@a) = m|\<INPUT.+cd2=(\S+).+: +\S+ +(\S+) +(\S+) +(\S+) +(\S+) +(\S+).+MOLECULE: (.+)|;
	   (my $acc = $pdbid) =~ s/([A-Za-z0-9]{4})(.+)/$1_$2/;
	   $acc =~ tr/a-z/A-Z/;
	   $data{$pdbid} = [ $acc, @a ];
	   $data{$pdbid}->[$#{$data{$pdbid}}] =~ s/\; *$//;
	   next;
        }

	if (m|</PRE>| && defined($schain)) { # End of a query-subject alignment
	    #print join("\t", $query, $qseq),"\n";
	    #print join("\t", $schain, $sseq),"\n";

	    # Query: first alignment only
	    if (!scalar @hits && !exists $hits{$query}) {
		my $hit = { 'name' => $query, 'dssp' => $qdssp, 'score' => $score };
		$hit->{'dssp'} =~ s/\./\-/g;                # Remove gaps
		($hit->{'original'} = $qseq) =~ s/\./\-/g;  # Copy original alignment and replace gaps
		$hit->{'poppush'} = $qseq;                  # Add anchor to aligned sequence
		$hit->{'poppush'} =~ s/[\-\.]+//g;          # Remove gaps
		$hit->{'poppush'} =~ tr/a-z/A-Z/;           # Turn lower case into upper case
		$hit->{'poppush'} = "?".$hit->{'poppush'};  # Add anchor
		$hit->{'query'}   = 1;                      # Mark as query
		push(@hits, $hit);                          # Store
		$hits{$query} = 1;                          #
	    }

	    # Hit
	    if (!exists $hits{$schain}) {
		my $hit = { 'name' => $schain, 'dssp' => $dssp, 'score' => $score };
		$hit->{'dssp'} =~ s/\./\-/g;
		($hit->{'original'} = $sseq) =~ s/\./\-/g;
		# Change aligned charaters in the subject sequence to uppercase
		my @l = ();
		my @a = ($qseq =~ /([[:lower:]]+)/g);
		for (my $i=0; $i<=$#a; $i++) {
		    my $offset = $i > 0 ? $l[$i-1]->[0]+$l[$i-1]->[1] : 0;
		    my $c = index($qseq, $a[$i], $offset);
		    my $l = length($a[$i]);
		    substr($sseq, $c, $l, uc(substr($sseq,$c,length($a[$i]))));
		    push(@l, [ $c, $l ]);
		    #print join("\t",$offset, $c, $l, $a[$i], substr($sseq,$c,length($a[$i]))),"\n";
		}
		$sseq =~ s/\./\-/g;
		$hit->{'poppush'} = "?$sseq";
		push(@hits, $hit);
		$hits{$schain} = 1;
		#print join("\t", $schain, $sseq),"\n";
	    }

	    # Reset loop variables
	    $noDSSP = 0; $qseq = ""; $sseq = ""; $dssp = ""; $qdssp = ""; $query = undef; $schain = undef;
	}

	if (/\<h(2|3)\> .+ Query=(\S+) Sbjct=(\S+) Z-score=([\d\.]+)/) {
	    $query = $2; $schain = $3; $score = $4;
	    my $sentry = substr($schain, 0 , 4);
	    $schain = undef if (exists $exclude{$schain} ||
		                (scalar @chains && !exists $chains{$schain}) ||
	                        ($score < $config->cutoff) ||
	                        ($config->single_representative && exists $sentry{$sentry}) ||
	                        (defined $config->rmsd && exists $data{$schain} && $data{$schain}->[$col->{'rmsd'}] > $config->rmsd)
			       );
	    $sentry{$sentry} = 1;
	}

	elsif (defined $schain) {
	    if (/^Query\s+(\S+)/) {
		$qseq .= $1;
	    }
	    elsif (/^Sbjct\s+(\S+)/) {
		$sseq .= $1;
	    }
	    elsif (/^DSSP\s+(\S+)/) {
		if ($noDSSP%2) { # Odd: subject secondary structure
		    $dssp .= $1;
		} elsif (!scalar @hits) {
		    $qdssp .= $1;
		}
		$noDSSP++;
	    }
	}
    }

    # Debug
#    for (my $i=0; $i<=$#hits; $i++) {
#	print join("\t",map { $hits[$i]->{$_} } qw(name poppush)),"\n";
#    }

    return (\%data, @hits);
}

###############################################################################
sub transfer_gaps {
    my ($hits, @align) = @_;

    for (my $i=0; $i<=$#align; $i++) {
	my $k     = 0;
	my $final = "";
	my $finaldssp = "";
	my $orig = $hits->[$i]{'original'};
	my $dssp = $hits->[$i]{'dssp'};
	for (my $j=1; $j<=length($align[$i]); $j++) { # $j=1 -> avoid starting anchor character (=?)
	    my $alnchar  = substr($align[$i],$j,1);
	    my $origchar = substr($orig,$k,1);
	    my $dsspchar = substr($dssp,$k,1);
	    if (uc($alnchar) eq uc($origchar)) {
		$final     .= $origchar;
		$finaldssp .= $dsspchar;
		$k++;
	    } else {
		$final     .= '-';
		$finaldssp .= '-';
	    }
	}
	#print STDERR join("\t","DEBUG:",(map {$hits->[$i]{$_}} qw(name)),map {length($_)} ($orig,$dssp,$align[$i],$final,$finaldssp)),"\n";
	$hits->[$i]{'alignment'} = $final;
	$hits->[$i]{'dssp'}  = $finaldssp;
    }

    return $hits;
}

###############################################################################
sub poppush {
    my($multali)=@_;
    my $nseq=$#$multali;
    my @where;
    my @longali;
    foreach($[..$nseq) {
	$longali[$_]=substr($multali->[$_],$[,1);
	$where[$_]=$[;
    }
    my $finished=0;
    my @tuck;
    my @pending;
    my @current;
    while(!$finished) {
	$finished=1;
	my $tuck=0;
	my $iseq;
	foreach $iseq ($[..$nseq) {
	    my $x=$multali->[$iseq];
	    $current[$iseq]='';
	    $where[$iseq]++;
	    $tuck[$iseq]=0;
	    if($where[$iseq]<length($x)) {
		$finished=0;
		my $i=$where[$iseq];
		my $c=substr($x,$i,1);
		$_=$c;
		while(/[a-z]/) {
		    $pending[$iseq].=$c;
		    $i++; $where[$iseq]++;
		    $c=substr($x,$i,1); $_=$c;
		}
		if(/\\/) { # C-term insert
		    $i++; $where[$iseq]++;
		    $c=substr($x,$i,1);
		    $pending[$iseq].=$c;
		} elsif(/[$gap]/) { $current[$iseq].=$c;
		} else {
		    # tuck longest insert first
		    $tuck=1; $tuck[$iseq]=1;
		    $current[$iseq].=$c;
		}
	    }
	}
	if($tuck) {
	    my $i=0;
	    my $maxl=0;
	    foreach $iseq ($[..$nseq) { # free space=insert+gap-row
		if($tuck[$iseq]) {
		    my $y=$longali[$iseq];
		    my $j=0; $_=substr($y,$j-1,1);
		    while(/[$gap]/) { $j--; $_=substr($y,$j-1,1); }
		    my $x=length($pending[$iseq] || "")+$j;
		    if($x>$maxl) {
			$maxl=$x; $i=$iseq;
		    }
		}
	    }
	    $iseq=$i;
	    
	    &tuck(\@longali,\@pending,$iseq,$nseq,$pending[$iseq]);
	    $pending[$iseq]='';
	    foreach  $iseq ($[..$nseq) {
		if($tuck[$iseq]) {
		    
		    &tuck(\@longali,\@pending,$iseq,$nseq,$pending[$iseq]);
		    $pending[$iseq]='';
		}
	    }
	}
	foreach my $iseq ($[..$nseq) { $longali[$iseq].=$current[$iseq]; }
    }
    my $maxl=0;
    my $iseq;
    my @l;
    foreach $iseq ($[..$nseq) {
	my $x=$longali[$iseq];
	my $i=0; $_=substr($x,$i-1,1);
	while(/[$gap]/) { $i--; $_=substr($x,$i-1,1); }
	my $l=length($x); my $y=substr($x,$[,$l+$i);
	$x=$y.$pending[$iseq]; $longali[$iseq]=$x;
	$l=length($x); $l[$iseq]=$l;
	if ($l>$maxl) { $maxl=$l; }
    }
    foreach $iseq ($[..$nseq) { foreach($l[$iseq]+1..$maxl) { $longali[$iseq].=$gap; }}
    return(@longali);
}

#############################################################################
sub tuck {
    my ($longali,$pending,$iseq,$nseq,$insert)=@_;
    my $leni=length($insert || ""); return if($leni==0);
    my $x=$longali->[$iseq];
    my $i=0; $_=substr($x,$i-1,1); while(/[$gap]/) { $i--; $_=substr($x,$i,1);}
    my $leng;
    if($i==0) { $leng=0; } else { $leng=-1-$i; }
    my $in=''; my $k=$leni-$leng; foreach(1..$k) { $in.=$gap; }
    $i=0; $x=$longali->[$[]; $k=length($x);
    my $y=0;
    if($in ne '' && $y==0) {
	$_=substr($x,$i-1,1);
	while(-$i<$leng&&/[A-Z]/) {
	    $i--;$_=substr($x,$i,1);
	    if(/[$gap]/) { $y=1; last; }
	}
    }
    if($y) { # right-justify in-gaps if an insert starts right there
	my $xseq;
	foreach $xseq ($[..$nseq) {
	    # print "check $xseq of $nseq: $pending->[$xseq]\n";
	    next if($pending->[$xseq] eq '');
	    my $q=$longali->[$xseq]; my $z=length($q);
	    $_=substr($q,$z-1,1); # print "$z / $xseq gave $_\n";
	    if(/[A-Z]/) { $y=0; } last if(!$y);
	}
    }
    if($y) {
	foreach($[..$nseq) {
	    my $pre=substr($longali->[$_],0,$k+$i);
	    my $suf=substr($longali->[$_],$i);
	    $longali->[$_]=$pre.$in.$suf;
	}
    } else {
	my $iseq;
	foreach $iseq ($[..$nseq) { $longali->[$iseq].=$in; }
    }
    if($leng<$leni) {
	my $x=$longali->[$iseq];
	my $i=0; $_=substr($x,$i-1,1); while(/[$gap]/) { $i--; $_=substr($x,$i,1);}
	$leng=-1-$i;
    }
    my $pre=substr($longali->[$iseq],0,length($longali->[$iseq])-$leni);
    $x=$pre.$insert;
    $longali->[$iseq]=$x;
}

#############################################################################
sub parse_configuration {
    use Application::Config qw(:argcount GetConfig);
    my $appconfig = GetConfig(# Hash
			      "cutoff" => {
				  ALIAS    => "pcut|zcut|s",
				  ARGCOUNT => ARGCOUNT_ONE,
				  DEFAULT  => 4,
				  SUMMARY  => "Minimum Z-score cutoff for hits.",
			      },

			      "exclude" => {
				  ALIAS    => "remove|x",
				  ARGCOUNT => ARGCOUNT_LIST,
				  DEFAULT  => [],
				  SUMMARY  => "List of chains that should be removed from the alignment.",
			      },

			      "rmsd" => {
				  ALIAS    => "r",
				  ARGCOUNT => ARGCOUNT_ONE,
				  DEFAULT  => undef,
				  SUMMARY  => "Maximum RMSD for selecting hits.",
			      },

			      'secondary_structure' => {
				  ALIAS    => "dssp",
				  ARGCOUNT => ARGCOUNT_NONE,
				  DEFAULT  => 1,
				  SUMMARY  => "include secondary structures inferred by DSSP",
			      },

			      'single_representative' => {
				  ALIAS    => "nr|n",
				  ARGCOUNT => ARGCOUNT_NONE,
				  DEFAULT  => 1,
				  SUMMARY  => "include only one chain per PDB entry",
			      },
	);
    return $appconfig;
}

#############################################################################
# POD: start

=head1 NAME

 dali2seqrows - converts Dali HTML output to a multiple alignment

=head1 SYNOPSIS

 # Simplest usage: dump all alignments with Z-score >= 4

 dali2seqrows mol1A.html

 # Selecting some chains and do not print secondary structure

 dali2seqrows -nodssp mol1A.html 2cx1B 5ghdA

 # Print only one chain from each PDF entry and do not print secondary structure

 dali2seqrows -nodssp -nonr mol1A.html

=head1 DESCRIPTION

This program converts DALI pairwise alignments into a query-anchored
multiple sequence alignment. 

=head1 ACKNOWLEDGMENTS

Most of this code is identical to a perl script originally written by
Liisa Holm (subroutines poppush and tuck), who kindly provided us with
a copy of her code.

=head1 AUTHOR

 Liisa Holm (original code)
 Robson Francisco de Souza
 Lakshminarayan Iyer

=cut
# POD: end
