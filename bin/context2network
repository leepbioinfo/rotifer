#!/usr/bin/env perl

# LIBRARIES and PRAGMAS: start
use FindBin;
use lib "$FindBin::RealBin/../perl/lib";
use strict;
use warnings;
# LIBRARIES and PRAGMAS: end

# Parse configuration/options
my $CONFIG = &parse_configuration();

# Main program
#print join("\n",map { $_."\t".$CONFIG->rename->{$_} } sort { $CONFIG->rename->{$a} cmp $CONFIG->rename->{$b} } keys %{$CONFIG->rename}),"\n" if scalar(keys %{$CONFIG->rename});
my ($neighbor, $fused) = $CONFIG->informat =~ /^arch/i ? load_architectures($CONFIG) : load_parsed_operon($CONFIG);

# Print number of neighbors and fused targets
foreach my $target1 (sort keys %$neighbor) {
    foreach my $target2 (sort keys %{$neighbor->{$target1}}) {
	print join("\t", $target1, "neighbor", $target2, $neighbor->{$target1}{$target2}),"\n";
    }
}
foreach my $target1 (sort keys %$fused) {
    foreach my $target2 (sort keys %{$fused->{$target1}}) {
	print join("\t", $target1, "fused", $target2, $fused->{$target1}{$target2}),"\n";
    }
}

# Exit cleanly
exit 0;

# MAIN PROGRAM: end

###############
# Subroutines

sub load_architectures {
    my $conf = shift;

    # Process operons
    my %keep     = map { ($_,1) } (scalar @{$conf->include} ? @{$conf->include} : ());
    my %ignore   = map { ($_,1) } (scalar @{$conf->exclude} ? @{$conf->exclude} : ());
    my $sep      = $conf->input_delimiter;
    my $map      = $conf->rename;
    my $done     = {};
    my $fused    = {};
    foreach my $file (@ARGV) {
	open(INPUT,"<$file") || die "Could not open file $file";
	while (<INPUT>) {
	    chomp;
	    my @F = split(/$sep/);
	    next if (exists $done->{$F[0]});

	    # Parse architecture
	    next unless (defined $F[1] && length $F[1]);
	    $F[1] =~ s/\*//g;
	    $F[1] =~ s/(^\s+|\s+$)//;
	    my @domains = split(/\+/,$F[1]);

	    # Process domains
	    if (scalar @domains > 1) {
		my %seen = ();
		for (my $i=0; $i<$#domains; $i++) {
		    $domains[$i] = $map->{$domains[$i]} if (exists $map->{$domains[$i]});
		    next if (exists $ignore{$domains[$i]});

		    # Filter any domains that should be ignored
		    my $j = $i+1;
		    while ($j<=$#domains) {
			$domains[$j] = $map->{$domains[$j]} if (exists $map->{$domains[$j]});

			# Ignore excluded domains
			while ($j<=$#domains) {
			    last if (!exists $ignore{$domains[$j]});
			    $j++;
			    $domains[$j] = $map->{$domains[$j]} if (exists $map->{$domains[$j]});
			}
			last if ($j>$#domains); # Ignoring all domains after $i
			last if (scalar(keys %keep) && !(exists $keep{$domains[$i]} && exists $keep{$domains[$j]}));

			# Immediate neighbors only
			if (!$conf->allpairs) {
			    if ($conf->group) {
				$fused->{ $domains[$i] }{ $domains[$j] }++;
			    } else {
				print join("\t",$domains[$i],"fused",$domains[$j],$F[0]),"\n";
			    }
			    last;
			}

			# Process all pairs
			my @pair = sort ($domains[$i], $domains[$j]);
			my $id   = join("\cA",@pair);
			if (!exists $seen{$id}) {
			    if ($conf->group) {
				$fused->{ $pair[0] }{ $pair[1] }++;
			    } else {
				print join("\t",$pair[0],"with",$pair[1],$F[0]),"\n";
			    }
			    $seen{$id} = 1;
			}
			$j++;
		    } # while ($j<=$#domains)
		} # for (my $i=0; $i<$#domains; $i++)
	    } # if (scalar @domains > 1)

	    $done->{$F[0]} = 1;
	} # while (<INPUT>)
    } # foreach my $file (@ARGV)

    return ({}, $fused);
}

sub load_parsed_operon {
    my $conf = shift;

    # Process operons
    my %drop     = scalar @{$conf->exclude} ? map { ($_,1) } @{$conf->exclude} : ();
    my %keep     = scalar @{$conf->include} ? map { ($_,1) } @{$conf->include} : ();
    my $select   = scalar(keys %keep) ? 1 : 0; # Controls whether or not to select targets
    my $sep      = $conf->input_delimiter;
    my $map      = $conf->rename;
    my $done     = {};
    my $neighbor = {};
    my $fused    = {};
    foreach my $file (@ARGV) {
	open(INPUT,"<$file") || die "Could not open file $file";
	while (<INPUT>) {
	    chomp;
	    my @F = split(/$sep/);
	    next if ($#F < 1);
	    next unless ($F[$#F] =~ /<-|->/); # Ignore rows without gene neighborhood data

	    # Parse operons to a list of genes
	    my $operon = $F[$#F];
	    $operon =~ s/(^\s+|\s+$)//g;
	    $operon =~ s/\*//g;
	    $operon =~ s/<-/\cA<-/g;
	    $operon =~ s/->/->\cA/g;
	    $operon =~ s/\|\|/\cA/g;
	    $operon =~ s/^\cA+|\cA+$//;
	    my @genes = split(/\cA+/,$operon);
	    #print STDERR join(" ","GENES:",@genes),"\n";

	    # Parse genes and count
	    for (my $i=0; $i<$#genes; $i++) {
		# Parse strands
		my ($gene1,$gene2) = ($genes[$i],$genes[$i+1]);
		my $strand1 = $gene1 =~ s/<-// ? -1 : $gene1 =~ s/->// ? 1 : 0; # Report strand = 0 if not defined
		my $strand2 = $gene2 =~ s/<-// ? -1 : $gene2 =~ s/->// ? 1 : 0;
		next if ($conf->strand && $strand1*$strand2 == -1); # Ignore neighbors encoded by different strands...

		# Parse ids
		($gene1,$gene2) = ($gene2,$gene1) if ($strand1 == -1 && $strand2 == -1); # <-gi1<-gi2 is the same as gi2->gi1->
		my ($gi1,$arch1) = ($gene1 =~ /^([^\.]+\.\d+|\d+|\.|$F[0])__(.+)$/);
		my ($gi2,$arch2) = ($gene2 =~ /^([^\.]+\.\d+|\d+|\.|$F[0])__(.+)$/);
		next if ($gi1 eq "." || $gi2 eq "."); # Skip pseudogenes and ncRNA: should I actually ignore these? As if non-existing? 
		#print join("\t", $gi1, $gi2, $strand1, $strand2, $arch1, $arch2, $gene1, $gene2, $genes[$i], $genes[$i+1], $F[$#F]),"\n";

		# Parse architecture and rename target domains
		my @arch1 = split(/\+/,$arch1);
		my @arch2 = split(/\+/,$arch2);
		if ($conf->_use_map) {
		    @arch1 = map { exists $map->{$_} ? $map->{$_} : $_ } @arch1;
		    @arch2 = map { exists $map->{$_} ? $map->{$_} : $_ } @arch2;
		}

		# Count/print domain pairs in fused genes
		if ($conf->domains) {
		    @arch1 = grep { exists $keep{$_} } @arch1 if ($select);
		    @arch2 = grep { exists $keep{$_} } @arch2 if ($select);
		    # Upstream gene (5')
		    if (!exists $done->{$gi1}{$gi1} && scalar @arch1 > 1) {
			for (my $j=0; $j<$#arch1; $j++) {
			    if ($CONFIG->group) {
				$fused->{ $arch1[$j] }{ $arch1[$j+1] }++;
			    } else {
				print join("\t", $arch1[$j], "fused", $arch1[$j+1], $gi1, $gi1, $strand1, $strand1, $F[0]),"\n";
			    }
			}
		    }
		    # Downstream gene (3')
		    if (!exists $done->{$gi2}{$gi2} && scalar @arch2 > 1) {
			for (my $j=0; $j<$#arch2; $j++) {
			    if ($CONFIG->group) {
				$fused->{ $arch2[$j] }{ $arch2[$j+1] }++;
			    } else {
				print join("\t", $arch2[$j], "fused", $arch2[$j+1], $gi2, $gi2, $strand2, $strand2, $F[0]),"\n";
			    }
			}
		    }
		    $arch1 = $arch1[$#arch1];
		    $arch2 = $arch2[0];
		}

		# Otherwise, restore architectures
		else {
		    $arch1 = (!$select || grep { exists $keep{$_} } @arch1) ? join("+",@arch1) : undef;
		    $arch2 = (!$select || grep { exists $keep{$_} } @arch2) ? join("+",@arch2) : undef;
		}

		# Count/print gene neighbors
		if (!exists $done->{$gi1}{$gi2} && defined $arch2 && defined $arch1) {
		    if ($CONFIG->group) {
			$neighbor->{$arch1}{$arch2}++;
		    } else {
			print join("\t", $arch1, "neighbor", $arch2, $gi1, $gi2, $strand1, $strand2, $F[0]),"\n";
		    }
		}

		# Mark pair as processed
		$done->{$gi1}{$gi1} = 1;
		$done->{$gi2}{$gi2} = 1;
		$done->{$gi1}{$gi2} = 1;

	    } # for (my $i=0; $i<$#genes; $i++)
	} # while (<INPUT>)
    } # foreach my $file (@ARGV)

    return ($neighbor, $fused);
}

# Creating the configuration object
#
# The Application::Config library we are using here is just
# a wrapper that facilitates the use of AppConfig::AutoDoc.
#
# Because it depends on other libraries,Application::Config
# documentation is far from complete but contains the pointers
# to detailed documentation on its dependencies. The user should
# start reading "perldoc Application::Config" and them read the
# docs on each of its dependencies in the oerder below:
#
# Application::Config
#  AppConfig::AutoDoc
#   AppConfig
#    AppConfig::State
#
# The argument for new is an anonymous hash. This hash is
# used to control the bahaviour of AppConfig::AutoDoc. In
# This case, setting EXPAND_ARGV to 1 enables tranfers of
# all words in input files to @ARGV. EXPAND_STDIN does the
# same for text comming through pipelines (standard input)
#
# See perldoc AppConfig::AutoDoc for details
sub parse_configuration {
    use Application::Config qw(:argcount GetConfig);

    # Force tabs as column separator for the gene name mapping file
    $AppConfig::AutoDoc::EXPAND_FILES_OPTIONS{COLUMN_DELIMITER} = "\t";

    # Here I'm passing GetConfig a hash that serves both as an example and
    # prototype for the kind of argument expected by the method
    # "define" (see below) from AppConfig::AutoDoc.
    my $appconfig = GetConfig(# First, lets configure AppConfig::Autodoc by
			      # giving a hash reference with parameters
			      { },

			      'allpairs' => {
				  ALIAS    => "ap|a",
				  ARGCOUNT => ARGCOUNT_NONE,
				  DEFAULT  => 0,
				  SUMMARY  => 'True if all domain pairs in protein should be reported, including those that are not direct neighbors. Currently, this options is not supported for gene neighborhoods, i.e. it requires parsing domain architectures (--if arch).',
			      },

			      'domains' => {
				  ALIAS    => "fusions|d",
				  ARGCOUNT => ARGCOUNT_NONE,
				  DEFAULT  => 1,
				  SUMMARY  => 'True if domain architecture must be parsed into individual domains.',
			      },

			      'exclude' => {
				  ALIAS    => "x",
				  ACTION   => 'EXPAND_FILES',
				  ARGCOUNT => ARGCOUNT_LIST,
				  DEFAULT  => [],
				  SUMMARY  => 'List of gene/domain names that should NOT be reported, i.e. should be treated as if non-existing in the input operons/architectures. By default, all pairs of genes/domains are reported. Note that this option only will report surrounding elements as direct neighbors.',
			      },

			      'group' => {
				  ALIAS    => "g",
				  ARGCOUNT => ARGCOUNT_NONE,
				  DEFAULT  => 1,
				  SUMMARY  => 'Whether or not the output table should be reduced by collapsing all instances of each domain pair into the number of times this pair is observed. If false (--nogroup) the list of GIs that support a pair is printed and the counts may be obtained applying tgroup on the output.',
			      },

			      'include' => {
				  ALIAS    => "i",
				  ACTION   => 'EXPAND_FILES',
				  ARGCOUNT => ARGCOUNT_LIST,
				  DEFAULT  => [],
				  SUMMARY  => 'List of gene/domain names that should be reported. By default, all pairs of genes/domains are reported.',
			      },

			      'informat' => {
				  ALIAS    => "if",
				  ARGCOUNT => ARGCOUNT_ONE,
				  DEFAULT  => "operon",
				  SUMMARY  => 'Input data format. Supported formats: "architecture" (domain2architecture) or "operon" (operon_parse).',
			      },

			      'input_delimiter' => {
				  ALIAS    => "s|delimiter",
				  ARGCOUNT => ARGCOUNT_ONE,
				  DEFAULT  => "\t",
				  SUMMARY  => 'Column delimiter for input files.',
			      },

			      'output_delimiter' => {
				  ALIAS    => "r|output",
				  ARGCOUNT => ARGCOUNT_ONE,
				  DEFAULT  => "\t",
				  SUMMARY  => 'Column delimiter for output table.',
			      },

			      'rename' => {
				  ALIAS    => "m|map",
				  ACTION   => 'EXPAND_FILES',
				  ARGCOUNT => ARGCOUNT_HASH,
				  DEFAULT  => {},
				  SUMMARY  => 'Name of two column file to replace input gene names (1st column) with user defined names (2nd column). Note: renaming implies reporting only the renamed pairs of genes/domains unless a list if provided to --include.',
			      },

			      'strand' => {
				  ALIAS    => "o",
				  ARGCOUNT => ARGCOUNT_NONE,
				  DEFAULT  => 1,
				  SUMMARY  => 'If set to true, the coding strand is taken into account and gene neighbors encoded in different DNA strands are ignored.',
			      },
	);
    push(@ARGV,"-") unless (scalar @ARGV || -t STDIN);

    # Compile output delimiter:
    # you can use Perl regexp escape codes like \t
    # to set the output column delimiter
    foreach my $stream (qw(input output)) {
        my $sep = $appconfig->get("${stream}_delimiter");
        $sep = eval qq{return "$sep"};
        $appconfig->set("${stream}_delimiter", $sep);
    }

    # Make sure the desired gene names are known
    $appconfig->define('_use_map' => { ARGCOUNT => ARGCOUNT_NONE, DEFAULT => 0 });
    if (scalar(keys %{$appconfig->rename})) {
	my $hashRef = $appconfig->rename;
	$hashRef = { %{$appconfig->rename}, map { ($_,$_) } values %{$appconfig->rename} };
	$appconfig->_use_map(1);
    }

    return $appconfig;
}

# POD: start
# Documentation (use option -doc or --doc to see it!)
#
# AppConfig::AutoDoc can automatically extract Plain Old Documentation
# from within the caller program's, add descriptions of the options
# created by L<define> and do some pretty formatting for output.
#
# Note that POD may be added anywhere in your program, thus allowing
# the documentation for a program to be left side by side with the
# function's definition.

=head1 NAME

 operons2network - process operons as if they represent networks

=head1 SYNOPSIS

 # Simplest usage: just parse the parsed operons
 operons2network some.operons.parsed

 # Renaming genes or doamins while parsing
 operons2network -m file=rename.map some.operons.parsed

=head1 DESCRIPTION

Process operons files and print pairwise representations of networks or
network statistics.

=head1 AUTHOR

 Robson Francisco de Souza

=cut
# POD: end
