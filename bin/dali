#!/usr/bin/env perl

use FindBin;
use lib "$FindBin::RealBin/../perl/lib";
use File::Copy;
use File::Basename;
use File::Monitored qw(:temp);
use File::Temp qw(tempdir);
use Cwd;
use warnings;
use strict;

# Global variable: path to PDB files
our $PDBDIR = "$FindBin::RealBin/../data/pdb";
if ( exists $ENV{ROTIFER_DATA} &&  defined $ENV{ROTIFER_DATA}) {
   $PDBDIR = "$ENV{ROTIFER_DATA}/pdb";
}

#Store current directory path
my $CONFIG = parse_configuration();
my $cwd = getcwd();
&locate_files($CONFIG); # Locate files

# Prepare running directory
#my $tempdir = tempdir(CLEANUP=>1);
my $tempdir = undef;
if ($CONFIG->clean) {
    $tempdir = ttempdir();
} else {
    $tempdir = tempdir(UNLINK => 1);
}
print STDERR "Running DaliLite in temporary directory $tempdir\n";
chdir($tempdir);

# Calling DaliLite
my $status = 0;
if ($CONFIG->quick || $CONFIG->Q) {
    my ($OPT) = map { "-$_" } grep { $CONFIG->$_ } qw(quick Q);
    $status = &quick($CONFIG, $tempdir, $cwd, $OPT);
} elsif ($CONFIG->pairwise) {
    $status = &pairwise($CONFIG, $tempdir, $cwd);
} else {
    die "You can't do much disabling all analysis methods!";
}

# Clean running directory
chdir($cwd);
exit $status;

###################################################
# Subroutine
###################################################

sub parse_configuration {
    use Application::Config qw(:argcount GetConfig);
    my $appconfig = GetConfig({ CASE => 1 },
			      "clean" => {
				  ALIAS    => "c",
				  ARGCOUNT => ARGCOUNT_NONE,
				  DEFAULT  => 1,
				  SUMMARY  => "remove all temporary files",
			      },
			      "pairwise" => {
				  ACTION   => \&adjust_options,
				  ALIAS    => "p",
				  ARGCOUNT => ARGCOUNT_NONE,
				  DEFAULT  => 0,
				  SUMMARY  => "use pauirwise mode (needs two PDB files)",
			      },
			      "quick" => {
				  ALIAS    => "q",
				  ARGCOUNT => ARGCOUNT_NONE,
				  DEFAULT  => 1,
				  SUMMARY  => "fastest search procedure to find similar structures",
			      },
			      "Q" => {
				  ACTION   => \&adjust_options,
				  ARGCOUNT => ARGCOUNT_NONE,
				  DEFAULT  => 0,
				  SUMMARY  => "same as -quick but without GTG accelarator",
			      },
	);

    return $appconfig;
}

sub adjust_options {
    my ($state, $name, $value) = @_;
    return 0 unless ($value);
    my @disable = ();
    foreach my $option (qw(quick pairwise Q)) {
	next if ($option eq $name);
	$state->set($option, 0);
    }
    return 1;
}

# For both -pairwise
sub pairwise {
    my ($config,$tempdir,$cwd) = @_;

    my $notok = 0;
    for (my $i=0; $i<$#ARGV; $i++) {
	next unless (-r $ARGV[$i]);
	for (my $j=$i+1; $j<=$#ARGV; $j++) {
	    next unless (-r $ARGV[$j]);
	    my $name1 = basename($ARGV[$i], qw(.pdb .dat .ent));
	    $name1 =~ s/^pdb//;
	    my $name2 = basename($ARGV[$j], qw(.pdb .dat .ent));
	    $name2 =~ s/^pdb//;
	    # Run DaliLite
	    print STDERR "COMMAND LINE: DaliLite -pairwise $ARGV[$i] $ARGV[$j] > dali.out 2> dali.err\n" if ($CONFIG->debug);
	    `DaliLite -pairwise $ARGV[$i] $ARGV[$j] > dali.out 2> dali.err`;
	    if (! -f "dali.lock" ) {
		move("aln.html","$cwd/${name1}_${name2}.html") || warn "Failed to rename mol1A.html to $cwd/${name1}_${name2}.html";
	    } else {
		warn "ERROR: Dali execution was incomplete for pair ($name1,$name2)! Please check file in $tempdir";
		$notok++;
	    }
	}
    }

    return $notok;
}

# For both -Q and -quick
sub quick {
    my ($config,$tempdir,$cwd,$opt) = @_;

    my $notok = 0;
    foreach my $pdb (@ARGV) {
	next unless (-r $pdb);
	# Run DaliLite
	my $name = basename($pdb, qw(.pdb .dat .ent));
	$name =~ s/^pdb//;
	print STDERR "COMMAND LINE: DaliLite $opt $pdb > dali.out 2> dali.err\n" if ($CONFIG->debug);
	`DaliLite $opt $pdb > dali.out 2> dali.err`;
	if (! -f "dali.lock" ) {
	    foreach my $file (glob("mol1?.html"),glob("mol1?-90.html")) {
		my $chain = basename($file, ".html");
		$chain =~ s/^mol1//;
		$chain = "" if ($name =~ /${chain}$/);
	        move($file,"$cwd/${name}${chain}.html") || warn "Failed to rename $file to $cwd/${name}.html";
	    }
	} else {
	    warn "ERROR: Dali execution was incomplete! Please check file in $tempdir";
	    $notok++;
	}
    }

    return $notok;
}

# Locate and copy or download files:
sub locate_files {
    my ($config) = @_;
    my $cwd = getcwd();
    my $notFound = 0;
    for (my $i=0; $i<=$#ARGV; $i++) {
	if (-f $ARGV[$i]) {
	    if ($ARGV[$i] =~ /^\./) {
		$ARGV[$i] = "$cwd/$ARGV[$i]";
	    } elsif ($ARGV[$i] eq basename($ARGV[$i])) {
		$ARGV[$i] = "$cwd/$ARGV[$i]";
	    }
	} else {
	    if (-d "$PDBDIR" && -e "$PDBDIR/pdb$ARGV[$i].ent") {
		$ARGV[$i] = "$PDBDIR/pdb$ARGV[$i].ent";
	    } else {
		`pdbget $ARGV[$i] >> /dev/null 2>&1`;
		if (my ($file) = grep { /^$ARGV[$i]/i } glob("*.pdb")) {
		    $ARGV[$i] = $file if ( -r $file );
		    $ARGV[$i] = "$cwd/$file";
		} else {
		    print STDERR "Failed to fetch PDB entry $ARGV[$i] using pdbget: $ARGV[$i] will be ignored\n" if ($config->debug);
		    $notFound++;
		}
	    }
	}
    }
    #print join("\n",@ARGV),"\n"; exit 0;
    return $notFound;
}

# POD: start

=head1 NAME

 dali - a wrapper for Liisa Holm's DaliLite program

=head1 SYNOPSIS

 # Base (default) mode: local file and -quick method
 dali 1rs4.pdb

 # Pairwise mode: -pairwise
 dali -pairwise 1.pdb 2.pdb

 # If you put local PDB files in data/pdb or if pdbget is installed,
 # I can get PDB files for you...
 dali 1rs4

=head1 DESCRIPTION

This program is just a simple wrapper to make DaliLite's run cleaner.
It removes some unnecessary output files and takes care of locking
procedures to allow running several Dali instances in the same
directory.

=head1 Loading PDB entries

At first, the program checks whether the arguments are paths to 
readable files and, if this is the case, it assumes the files contain
PDB data and thus passes their fully qualified path to DaliLite.

If you use four letter identifiers and no file with that name is
found, the program checks if the directory data/pdb exists and
then tries to read a file named pdb<four letter code>.ent in that
directory. If it succeeds the path to this file is passed to DaliLite.

As a last resource, if a four letter code does not lead to a PDB
file using above methods, the program will attempt to download it
using the TASS program pdbget.

If a PDB cannot be found, a warning is printed and that entry is
ignored.

=head1 AUTHOR

 Robson Francisco de Souza

=cut
# POD: end
