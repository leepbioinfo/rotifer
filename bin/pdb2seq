#!/usr/bin/env perl

use FindBin;
use lib "$FindBin::RealBin/../perl/lib";
use Bio::Structure::IO; 
use Bio::SeqIO;
use Bio::Seq;
use strict;
use warnings;

# Parse command line
my $config = &parse_configuration();
require Bio::SeqUtils if ($config->residues);

# Process chains
my @out = $config->output eq "stdout" ? ('-fh', \*STDOUT) : ('-file', $config->output);
my $out = Bio::SeqIO->new(@out, -format => $config->outformat);
my $bioseq = Bio::Seq->new(); # Some SeqIO modules (e.g. genbank) can't print Bio::PrimarySeq 
foreach my $file (@ARGV) {
    my @in = (-file => $file);
    if (ref($file) eq "GLOB") {
       @in = (-fh => $file);
    } elsif ($file =~ /^\.gz$/) {
       open(GZ,"gunzip -c $file |") || die "Could not gunzip $file";
       @in = (-fh => \*GZ);
    } 
    my $i = Bio::Structure::IO->new(@in, -format => $config->informat);
    while (my $s = $i->next_structure) {
	foreach my $chain (grep { $_->id ne 'default' } $s->get_chains) {
	    next if (scalar(@{ $config->chain }) && !grep { $chain->id eq $_ } @{ $config->chain });
	    my $seq = $s->seqres($chain->id);
	    $bioseq->seq($seq->seq); $bioseq->id($seq->id); # Transfer data to Bio::Seq
	    if ($config->residues) { # Use residues from the structure (ATOM records), instead of SEQRES
		my @res = map { my $a = $_->id; $a =~ s/\-\d+//; ucfirst(lc($a)) } $s->get_residues($chain);
		my $s = join("", @res);
		$s =~ s/X+$//;
		Bio::SeqUtils->seq3in($bioseq, $s);
	    }
	    $out->write_seq($bioseq);
	}
    }
    close(GZ) if ($file =~ /^\.gz$/);
}

exit 0;

#####################################
# Subroutines
#####################################

sub parse_configuration {
    use Application::Config qw(:argcount GetConfig);
    my $appconfig = GetConfig({},

			      "chain" => {
				  ALIAS    => "c",
				  DEFAULT  => [],
				  ARGCOUNT => ARGCOUNT_LIST,
				  SUMMARY  => "List of chains to print"
			      },

			      "informat" => {
				  ALIAS    => "if",
				  DEFAULT  => "pdb",
				  ARGCOUNT => ARGCOUNT_ONE,
				  SUMMARY  => "set input file(s) format (see Bio::Structure::IO)"
			      },

			      "outformat" => {
				  ALIAS    => "of",
				  DEFAULT  => "fasta",
				  ARGCOUNT => ARGCOUNT_ONE,
				  SUMMARY  => "set output file(s) format (see Bio::SeqIO)"
			      },

			      "output" => {
				  ALIAS    => "o",
				  DEFAULT  => "stdout",
				  ARGCOUNT => ARGCOUNT_ONE,
				  SUMMARY  => "direct output to a file or stdout"
			      },

			      "residues" => {
				  ALIAS    => "r|res",
				  DEFAULT  => 0,
				  ARGCOUNT => ARGCOUNT_NONE,
				  SUMMARY  => "extract sequence from ATOM fields"
			      });

    # Use STDIN
    push(@ARGV, \*STDIN) unless ( -t STDIN || scalar(grep { $_ eq "-" } @ARGV) );

    return $appconfig;
}

#####################################
# Documentation
#####################################

=head1 NAME

 pdb2seq - extract sequences from a PDB file

=head1 DESCRIPTION

This program extracts aminoacid sequences for protein chains in
a PDB file and prints them in any sequence format supported by
Bio::SeqIO. 

=head1 AUTHOR

Robson Francisco de Souza

=cut
