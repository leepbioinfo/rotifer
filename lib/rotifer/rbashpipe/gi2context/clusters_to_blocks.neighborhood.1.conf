# Format options
+parse_header
output_delimiter = " : "

# Create blocks using these columns
group = S0.1
group = S0.2
group = S0.3

# Sort rows in blocks
sort = S0.4
sort = S0.5
sort = S0.6
sort = S0.7
sort = S0.8
sort = S0.9
sort = S1.0
sort = Classification
sort = Lineage
sort = Organism
sort = pfam
sort = profiledb
sort = length

# Remove columns
exclude = S0.1
exclude = S0.2
exclude = S0.3
#exclude = S0.4
#exclude = S0.5
#exclude = S0.6
#exclude = S0.7

# Sort blocks
# This subroutine uses the global $CONFIG variable
# to choose what columns to use for sorting blocks
#
sort_blocks =                                                    \
sub {                                                            \
 my $r = 0;                                                      \
 map { $r ||= $a->[0][$_] <=> $b->[0][$_] } (@{$CONFIG->group}); \
 return $r;                                                      \
}

# Build block headers
# This option may be set to a filename or a string that
# parses as Perl code returning an anonaymous subroutine
# 
# block_header subroutine interface:
# Arguments:
#  1) Reference to AppConfig::AutoDoc configuration object
#  2) Reference to array of arrays.
#     Each anonymous array is a row in the current block
#  3) Reference to the table header. 
#     This value is set to undef if the input table doesn't have a header.
#
block_header =                                                                                             \
sub {                                                                                                      \
 my ($config,$block,$header) = @_;                                                                         \
 my @pfam = grep { $header->[$_] eq "pfam" } 0..$#{$header};                                               \
 my @prdb = grep { $header->[$_] eq "profiledb" } 0..$#{$header};                                          \
 my %a = (); my %c = ();                                                                                   \
 foreach my $row (@$block) {                                                                               \
    $c{$row->[1]}++ if (defined $row->[1] && length $row->[1]);                                            \
    map { $c{$row->[$_]}++ if (defined $row->[$_] && length $row->[$_]) } @pfam;                           \
    map { $a{$row->[$_]}++ if (defined $row->[$_] && length $row->[$_]) } (@pfam,@prdb);                   \
 }                                                                                                         \
 my ($arch) = sort { $c{$b} <=> $c{$a} } keys %c;                                                          \
 unless (defined $arch && length $arch) {                                                                  \
    ($arch) = sort { $a{$b} <=> $a{$a} } keys %a;                                                          \
    $arch = "" unless (defined $arch);                                                                     \
 }                                                                                                         \
 return "# ".scalar(@$block)."; $arch | ".join(",",map { $block->[0][$_] || "0" } @{$config->group})."\n"; \
}
