#!/bin/bash

#========================================================================
# Scan error logs for messages and remove useless files
#========================================================================
function cleanup_and_report_issues() {
    printlog -t START "cleaning up..."
    local err=$RBASHPIPE_OUTPUT_DIR/log/gi2context.err

    # Clean up
    safe_remove $RBASHPIPE_OUTPUT_DIR/data/bigtmp.fa* $RBASHPIPE_OUTPUT_DIR/srch/*.bigtmp.* $RBASHPIPE_OUTPUT_DIR/error.log
    safe_remove ${RBASHPIPE_GI2CONTEXT_TMP}/*.p??
    safe_remove ${RBASHPIPE_GI2CONTEXT_TMP}/*.fa
    find $RBASHPIPE_OUTPUT_DIR/log -size 0c -exec rm -f \{\} \;

    # Report issues
    printlog -t WARNING "error reports and respective exit status for profiles with problems:" >> $err
    for l in $RBASHPIPE_OUTPUT_DIR/log/*
    do
	tfilter -s ' +' -f '/Exit/' \
	    -f 'defined $F[4] && $F[4] =~ /^\d+$/' -f '$F[0]=$H{"current_file"};1' \
	    -i 0 -i 4 $l >> $RBASHPIPE_OUTPUT_DIR/log/runprofiles.status
    done
    if [ -s $RBASHPIPE_OUTPUT_DIR/log/runprofiles.status ]; then
	safe_remove `tfilter -i 0 -f '$F[1]==0' $RBASHPIPE_OUTPUT_DIR/log/runprofiles.status`
	tfilter -f '$F[1]>0' $RBASHPIPE_OUTPUT_DIR/log/runprofiles.status >> $err
	safe_remove $RBASHPIPE_OUTPUT_DIR/log/runprofiles.status
    fi

    # Filter and concatenate BLAST error messages
    printlog -t WARNING "BLAST error reports:" >> $err
    for berr in $RBASHPIPE_OUTPUT_DIR/log/*.blast*.err
    do
	if [ -s $berr ]; then
	    tfilter $berr \
		-f '!/WARNING/' -f '!/^Selenocysteine/' -f '!/^\s*$/'   -f '!/ERROR: ncbiapi/' \
		-f '!/Stored query has a X/' -f '!/^X appears in the stored query/' \
		-f '@F = ($H{"current_file"}); 1' \
		| sort -u >> $err
	    if [ -s $err ] && [ "`tail -n 1 $err`" != "$berr" ]; then
		safe_remove $berr
	    fi
	fi
    done

    printlog -t END "finished cleaning!"
}
