#!/bin/bash

#========================================================================
# Parse FASTA and cluster protein sequences
#========================================================================
function seqid_to_data() {
    local gis=${RBASHPIPE_GI2CONTEXT_DATA}.gi
    local log=$RBASHPIPE_OUTPUT_DIR/log/${FUNCNAME}.log
    printlog -t START $gis

    # Prepare log file
    if [ ! -s $log ]; then touch $log; fi

    # Get leaf names
#    gi2leaf $gis > ${RBASHPIPE_GI2CONTEXT_POST}.legend
#    perl -ne '
# last if /^Legend/;
# next if /^\s*$/;
# chomp; 
# my @a=split(/_/,$_);
# print join("\t",$a[$#a],$_),"\n";
#' ${RBASHPIPE_GI2CONTEXT_POST}.legend > ${RBASHPIPE_GI2CONTEXT_POST}.leaves

    # Summary of sequence status
#    resummary $gis > ${RBASHPIPE_GI2CONTEXT_POST}.summary.tsv 2>> $log
#    local status=`perl -ane 'map { print join("\t",$c++,$_),"\n" } @F; exit' ${RBASHPIPE_GI2CONTEXT_POST}.summary.tsv | grep Status | cut -f 1`
#    tfilter -i 0 -f 'defined $F['$status'] && $F['$status'] eq "live"' ${RBASHPIPE_GI2CONTEXT_POST}.summary.tsv \
#	| sort -u > ${RBASHPIPE_GI2CONTEXT_POST}.live.gi  2>> $log

    # Download links to nucleotide
    case "${RBASHPIPE_GI2CONTEXT_NAME}" in
	*.neighborhood)
	    printlog -t WARNING "gi2context won't download nucleotide summaries for neighbors"
	    ;;
	*)
	    relink -y $gis > ${RBASHPIPE_GI2CONTEXT_POST}.nucleotide.tsv 2>> $log
	    grep -E '^[0-9]' ${RBASHPIPE_GI2CONTEXT_POST}.nucleotide.tsv \
		| cut -f 2 | sort -u | resummary -db nucleotide \
		> ${RBASHPIPE_GI2CONTEXT_POST}.nucleotide.summary.tsv
	    tjoin -rd -f1 '$F[2] ne "protein_nuccore_wgs"' -1 1 -x1 1 -x2 0 -t left \
		${RBASHPIPE_GI2CONTEXT_POST}.nucleotide.tsv ${RBASHPIPE_GI2CONTEXT_POST}.nucleotide.summary.tsv \
		> ${RBASHPIPE_GI2CONTEXT_POST}.prot2nuclsum.tsv
	    ;;
    esac

    # Get taxonomy data from NCBI Taxonomy Database
    #gi2taxonomy --noupdate -y -f $gis > ${RBASHPIPE_GI2CONTEXT_POST}.tax 2>> $log
    if [ -s ${RBASHPIPE_GI2CONTEXT_POST}.ids ]; then
	tjoin -rd -i1 0 -t inner -f1 '$F[2] ne "PDB"' -f2 '!/Eukaryota/' ${RBASHPIPE_GI2CONTEXT_POST}.ids ${RBASHPIPE_GI2CONTEXT_POST}.tax \
	    | grep -v ^GI | grep -v ^input | cut -f 1 | sort -u > ${RBASHPIPE_GI2CONTEXT_POST}.get_neighbors.gi
    else
	tfilter -i 0 -f '!/^(input|GI)/' -f '!/Eukaryota/' ${RBASHPIPE_GI2CONTEXT_POST}.tax \
	    > ${RBASHPIPE_GI2CONTEXT_POST}.get_neighbors.gi
    fi

    # Select live sequences for neighborhood analysis
#    if [ -s ${RBASHPIPE_GI2CONTEXT_POST}.get_neighbors.gi ]; then
#	tjoin -t inner ${RBASHPIPE_GI2CONTEXT_POST}.live.gi ${RBASHPIPE_GI2CONTEXT_POST}.get_neighbors.gi \
#	    | cut -f 1 > ${RBASHPIPE_GI2CONTEXT_POST}.get_neighbors.live.gi
#	if [ ! -s ${RBASHPIPE_GI2CONTEXT_POST}.get_neighbors.live.gi ]; then
#	    safe_remove ${RBASHPIPE_GI2CONTEXT_POST}.get_neighbors.live.gi
#	fi
#    fi

    printlog -t END ${RBASHPIPE_GI2CONTEXT_POST}
}

