#!/bin/bash
# Run profiles and other sequence signature methods

#========================================================================
# Parameters
#========================================================================
[ -z "${RBASHPIPE_GI2CONTEXT_NAME}" ] && gi2context_set_environment "$1"

#========================================================================
# Start
#========================================================================
printlog -t START ${RBASHPIPE_GI2CONTEXT_SPLIT_LIST}

# Call runprofiles on each type of library
runlog="$RBASHPIPE_GI2CONTEXT_LOG/${RBASHPIPE_GI2CONTEXT_NAME}.runprofiles.split.log"
runerr="$RBASHPIPE_GI2CONTEXT_LOG/${RBASHPIPE_GI2CONTEXT_NAME}.runprofiles.split.err"

# Check global runprofiles parameters
if [ "$ANNOTATION" != "default" ] && [ ! -f "$ANNOTATION" ]; then
    printlog -t ERROR "unable to find profile annotation file $ANNOTATION"
    exit 1
fi
if [ "$PROFILE_PATH" != "default" ] && ! ([ -d "$PROFILE_PATH" ] || [ -f "$PROFILE_PATH" ]); then
    printlog -t ERROR "unable to find profile path $PROFILE_PATH"
    exit 1
fi

# Cleanup old logs
safe_remove $runlog

# Execute runprofiles
cfile=$(select_from_dir -a RBASHPIPE_PIPELINE_DIR runprofiles.conf)
if [ ! -z "$cfile" ] && [ -s "$cfile" ] && [ -r "$cfile" ]; then
    ppath=$(echo ${PROFILE_PATH[@]} | sed 's/ / --profile_path /g')
    printlog -t INFO -a $runerr "Searching Pfam models with configuration file $cfile" >> $runlog
    runprofiles $QSUB -n $RBASHPIPE_OUTPUT_DIR --configfile $cfile --profile_path $ppath --ann $ANNOTATION \
		--database_path $RBASHPIPE_GI2CONTEXT_TMP -d ${RBASHPIPE_GI2CONTEXT_SPLIT_LIST} all >> $runlog 2>> $runerr
else
    printlog -t ERROR -a $runerr "RBASHPIPE_PIPELINE_DIR: ${RBASHPIPE_PIPELINE_DIR[@]}" >> $runlog
    printlog -t ERROR -a $runerr "could not find configuration file runprofiles.conf for running Pfam models: $cfile" >> $runlog
fi

# Detect other regions
parallel -N1 find_other_signatures_split ${RBASHPIPE_GI2CONTEXT_TMP}/{}.fa < ${RBASHPIPE_GI2CONTEXT_SPLIT_LIST}

# When using distributed processing, wait till everybody is done
if [ "$QSUB" != "" ]; then
    printlog -t INFO -a $runerr "Monitoring distributed processes..." >> $runlog
    qmonitor -s 30 $runlog
    printlog -t INFO -a $runerr "Distributed processes endeded!" >> $runlog
fi

printlog -t END ${RBASHPIPE_GI2CONTEXT_SPLIT_LIST}
unset cfile ppath runlog runerr
