#!/bin/bash
# Run profiles and other sequence signature methods

#========================================================================
# Parameters
#========================================================================
[ -z "${RBASHPIPE_GI2CONTEXT_NAME}" ] && gi2context_set_environment "$1"

#========================================================================
# Start
#========================================================================
printlog -t START ${RBASHPIPE_GI2CONTEXT_SPLIT_LIST}
cwd=$PWD

# Call runprofiles on each type of library
if [ "$RUNPROFILES" == "on" ]; then
    runlog="$RBASHPIPE_GI2CONTEXT_LOG/${RBASHPIPE_GI2CONTEXT_NAME}.runprofiles.split.log"
    runerr="$RBASHPIPE_GI2CONTEXT_LOG/${RBASHPIPE_GI2CONTEXT_NAME}.runprofiles.split.err"

    # Check global runprofiles parameters
    if [ "$ANNOTATION" != "default" ] && [ ! -f "$ANNOTATION" ]; then
	printlog -t ERROR "unable to find profile annotation file $ANNOTATION"
	exit 1
    fi
    if [ "$PROFILE_PATH" != "default" ] && ! ([ -d "$PROFILE_PATH" ] || [ -f "$PROFILE_PATH" ]); then
	printlog -t ERROR "unable to find profile path $PROFILE_PATH"
	exit 1
    fi

    # Cleanup old logs
    safe_remove $runlog

    # Pfam
    cfile=$(select_from_dir -a RBASHPIPE_PIPELINE_DIR runprofiles.conf)
    if [ ! -z "$cfile" ] && [ -s "$cfile" ] && [ -r "$cfile" ]; then
	printlog -t INFO -a $runerr "Searching Pfam models with configuration file $cfile" >> $runlog
	runprofiles $QSUB -n $RBASHPIPE_OUTPUT_DIR --configfile $cfile --profile_path pfam --ann $ANNOTATION \
	    --database_path $RBASHPIPE_GI2CONTEXT_TMP -d ${RBASHPIPE_GI2CONTEXT_SPLIT_LIST} all >> $runlog 2>> $runerr
    else
	printlog -t ERROR -a $runerr "RBASHPIPE_PIPELINE_DIR: ${RBASHPIPE_PIPELINE_DIR[@]}" >> $runlog
	printlog -t ERROR -a $runerr "could not find configuration file runprofiles.conf for running Pfam models: $cfile" >> $runlog
    fi

    # Default RPS libraries
    cfile=$(select_from_dir -a RBASHPIPE_PIPELINE_DIR runprofiles.conf)
    if [ ! -z "$cfile" ] && [ -s "$cfile" ] && [ -r "$cfile" ]; then
	printlog -t INFO -a $runerr "analysing RPS libraries with configuration file $cfile" >> $runlog
	runprofiles $QSUB -n $RBASHPIPE_OUTPUT_DIR --configfile $cfile --profile_path rpsdb --ann $ANNOTATION \
	    --database_path $RBASHPIPE_GI2CONTEXT_TMP -d ${RBASHPIPE_GI2CONTEXT_SPLIT_LIST} \
	    allprofiles asn1cmdprofiles asn1webprofiles >> $runlog 2>> $runerr
    else
	printlog -t ERROR -a $runerr "RBASHPIPE_PIPELINE_DIR: ${RBASHPIPE_PIPELINE_DIR[@]}" >> $runlog
	printlog -t ERROR -a $runerr "could not find configuration file runprofiles.conf for runprofiles RPS libraries: $cfile" >> $runlog
    fi

    # Dispatching non-iterative searches
    cfile=$(select_from_dir -a RBASHPIPE_PIPELINE_DIR runprofiles.no_iterative_methods.conf)
    if [ ! -z "$cfile" ] && [ -s "$cfile" ] && [ -r "$cfile" ]; then
	printlog -t INFO -a $runerr "analysing non-iterative profiles with configuration file $cfile" >> $runlog
	runprofiles $QSUB -n $RBASHPIPE_OUTPUT_DIR --configfile $cfile --ann $ANNOTATION --profile_path $PROFILE_PATH \
	    --database_path $RBASHPIPE_GI2CONTEXT_TMP -d ${RBASHPIPE_GI2CONTEXT_SPLIT_LIST} all >> $runlog 2>> $runerr
    else
	printlog -t ERROR -a $runerr "RBASHPIPE_PIPELINE_DIR: ${RBASHPIPE_PIPELINE_DIR[@]}" >> $runlog
	printlog -t ERROR -a $runerr "could not find configuration file runprofiles.no_iterative_methods.conf for non-iterative runprofiles: $cfile" >> $runlog
    fi

    # Prepare large database and run iterative searches but only if running in a cluster
    if [ "$RUNITERATIVE" == "on" ]; then
	cfile=$(select_from_dir -a RBASHPIPE_PIPELINE_DIR runprofiles.iterative_methods_only.conf)
	if [ ! -z "$cfile" ] && [ -s "$cfile" ] && [ -r "$cfile" ]; then
	    dbpath="${RBASHPIPE_OUTPUT_DIR}/data"
	    cd $dbpath
	    local nrdb="`rotifer --env data`/fadb/uniref50.fasta"
	    if [ -f $nrdb ]; then
		printlog -t INFO -a $runerr "concatenating target sequence database and $nrdb to improve specificity of iterated methods" >> $runlog
		cat ${RBASHPIPE_GI2CONTEXT_FASTA} $nrdb > ${RBASHPIPE_GI2CONTEXT_NAME}.bigtmp.fa
	    else
		printlog -t INFO -a $runerr "File $nrdb does not exist! Unable not find a copy of the UniRef50 database" >> $runlog
		printlog -t INFO -a $runerr "Search restricted to your target sequences ($LIST), expect more false positives from iterated profiles" >> $runlog
		ln -s ${RBASHPIPE_GI2CONTEXT_FASTA} ${RBASHPIPE_GI2CONTEXT_NAME}.bigtmp.fa
	    fi
	    formatdb -i ${RBASHPIPE_GI2CONTEXT_NAME}.bigtmp.fa -p T -o T
	    cd $cwd
	    runprofiles $QSUB -n $RBASHPIPE_OUTPUT_DIR --configfile $cfile --ann $ANNOTATION --profile_path $PROFILE_PATH \
		--database_path $dbpath -d ${RBASHPIPE_GI2CONTEXT_NAME}.bigtmp.fa all >> $runlog 2>> $runerr
	else
	    printlog -t INFO -a $runerr "no configuration file for iterative methods: $cfile" >> $runlog
	fi
	unset dbpath
    fi # if [ "$RUNITERATIVE" == "on" ]; then
fi # if [ "$RUNPROFILES" == "on" ]; then

# Detect other regions
parallel -N1 find_other_signatures_split ${RBASHPIPE_GI2CONTEXT_TMP}/{}.fa < ${RBASHPIPE_GI2CONTEXT_SPLIT_LIST}

# When using distributed processing, wait till everybody is done
if [ "$QSUB" != "" ]; then
    printlog -t INFO -a $runerr "Monitoring distributed processes..." >> $runlog
    qmonitor -s 30 $runlog
    printlog -t INFO -a $runerr "Distributed processes endeded!" >> $runlog
fi

# Remove background UniRef data from search result tables 
for f in $RBASHPIPE_OUTPUT_DIR/post/*.${RBASHPIPE_GI2CONTEXT_NAME}.bigtmp.*
do
    if [ -f $f ]; then
	grep -v '^UniRef50_' $f > ${f}.tmp
	safe_remove $f
	mv ${f}.tmp $f
	if [ ! -s $f ]; then
	    safe_remove $f
	fi
    fi
done

cd $cwd
printlog -t END ${RBASHPIPE_GI2CONTEXT_SPLIT_LIST}
unset cfile cwd nrdb runlog runerr
