# Table2blocks doesn't attempt to interpret information from tables
# and, although there are some predefined methods for the simplest
# data processing cases. Table2blocks leaves the analysis of table
# data to user supplied code, such as filters and block header 
# generator subroutines
#
# Note that the %H is a global hash that can be used to store table,
# block and row data during table parsing. This data can then be 
# accessed later by in block and column sorter and header generators

# Indexing columns by name (supports repeated names)
# Table2blocks always sends the header, via @_, to filters
filter =                                                         \
sub {                                                            \
 if (!exists $H{"colidx"}) {                                     \
   for (my $i=0; $i<=$#_; $i++) {                                \
     if (exists $H{"colidx"}->{$_[$i]}) {                        \
       push(@{ $H{"colidx"}->{$_[$i]} }, $i);                    \
     } else {                                                    \
       $H{"colidx"}->{$_[$i]} = [ $i ];                          \
     }                                                           \
   }                                                             \
 }                                                               \
 return 1;                                                       \
}

# Blocks in this analysis are defined by the user's choice of
# clustering parameters (see above). We use this information to
# bring related blocks together
filter =                                                         \
sub {                                                            \
 my $column = $CONFIG->group;                                    \
 for (my $g=0; $g<=$#{$column}; $g++) {                          \
   my $group = $F[$column->[$g]];                                \
   $H{"cluster_size"}->{$column->[$g]}{$group}++;                \
 }                                                               \
 return 1;                                                       \
}

# Sort blocks
# This subroutine uses the global variables  $CONFIG and %H
# to choose what columns to use when sorting blocks
sort_blocks =                                                    \
sub {                                                            \
 my $r = 0;                                                      \
 my $column = $CONFIG->group;                                    \
 for (my $i=0; $i<=$#{$column}; $i++) {                          \
     my $colidx = $column->[$i];                                 \
     my $ag = $a->[0][$colidx];                                  \
     my $bg = $b->[0][$colidx];                                  \
     my $as = $H{"cluster_size"}->{$colidx}{$ag};                \
     my $bs = $H{"cluster_size"}->{$colidx}{$bg};                \
     $r ||= $bs <=> $as || $ag <=> $bg;                          \
  }                                                              \
  return $r;                                                     \
}

# Build block headers
# This option may be set to a filename or a string that
# parses as Perl code returning an anonaymous subroutine
#
# block_header subroutine interface:
# Arguments:
#  1) Reference to AppConfig::AutoDoc configuration object
#  2) Reference to array of arrays.
#     Each anonymous array is a row in the current block
#  3) Reference to the table header.
#     This value is set to undef if the input table doesn't have a header.
#
block_header =                                                                                             \
sub {                                                                                                      \
 my ($config,$block,$header) = @_;                                                                         \
 my %a = (); my %c = ();                                                                                   \
 if (exists $H{"colidx"}) {                                                                                \
    my @pfam = exists $H{"colidx"}->{"pfam"} ? @{$H{"colidx"}->{"pfam"}} : ();                             \
    my @prdb = exists $H{"colidx"}->{"profiledb"} ? @{$H{"colidx"}->{"profiledb"}} : ();                   \
    foreach my $row (@$block) {                                                                            \
      map { $c{$row->[$_]}++ if (defined $row->[$_]) } @pfam;                                              \
      map { $a{$row->[$_]}++ if (defined $row->[$_]) } (@pfam,@prdb);                                      \
    }                                                                                                      \
 }                                                                                                         \
 my ($arch,$count) = sort { $c{$b} <=> $c{$a} } keys %c;                                                   \
 $arch = "" if ($c{$arch} < 2 || scalar(@$block) < 2);                                                     \
 if (!defined $arch || !length $arch) {                                                                    \
    ($arch) = sort { $a{$b} <=> $a{$a} } keys %a;                                                          \
    $arch = "" if ($a{$arch} < 2 || scalar(@$block) < 2);                                                  \
 }                                                                                                         \
 return "# ".scalar(@$block)."; $arch | ".join(",",map { $block->[0][$_] || "0" } @{$config->group})."\n"; \
}
