#!/bin/bash

#========================================================================
# Build array from a string
#========================================================================
function split_array() {
    IFS=$2 read -r -a $3 <<< "$1"
}

#========================================================================
# Build string from array
#========================================================================
function join_array() {
    local IFS=$1; shift; echo "$*";
}

#========================================================================
# Check whether variable is an array
#========================================================================
function is_Array() {
    declare -p $1 | grep -q "declare -a"
}

#========================================================================
# Set the value of a shell variable by calling its name
#========================================================================
function array_contains() {
    local n=$#;
    local value=$1;
    for ((i=2; i<=$#; i++)) {
	if [ "${!i}" == "$value" ]; then
	    echo yes
	    return 0
	fi
    }
    echo no
    return 1
}

#========================================================================
# Set the value of a shell variable by calling its name
#========================================================================
function set_value_by_name() {
    printf -v "$1" %s $2
}

#========================================================================
# Get value of a shell variable by calling its name
#========================================================================
function get_value_by_name() {
    if is_Array $1; then
        eval "echo \${$1[@]}"
    else
        eval "echo \${$1}"
    fi
}

#========================================================================
# Find executables
#========================================================================
function search_executable() {
    local program
    for program in $*
    do
	program=`which $program 2> /dev/null`
	if [ "$program" != "" ]; then
	    echo $program
	    return 0
	fi
    done
    if [ "$program" == "" ]; then
	printlog -t ERROR unable to find executable for $*
	return 1
    fi
}

#========================================================================
# Safely remove directories
#========================================================================
function safe_remove() {
    local d
    for d in $*
    do
        if [ -f $d ]; then
            rm -f $d
	elif [ -d $d ]; then
	    rm -fr $d
        fi
    done
}

#========================================================================
# Create non-existing directories
#========================================================================
function make_directories() {
    local d
    for d in $*
    do
        if [ ! -d $d ]; then
            mkdir -p $d
        fi
    done
}

#========================================================================
# Find files in a list of directories
#========================================================================
function select_from_dir() {
    function select_from_dir_help() {
	echo "Search for files matching 'name' in a diretory list.
The default directory list is the array RBASHPIPE_PIPELINE_DIR.

USAGE: select_from_dir [-r] name
Available options:
  -a <string>    : get list of directories from array \${string[@]}
  -d <directory> : add directories to the search path
  -p <path>      : search for 'path/name' instead of 'name'
  -r             : search directories in reverse order
"
    }

    # Parse option -r
    typeset -i diridx=0
    local directories=
    local pipeline=
    local reverse="false"
    local bname=
    while getopts "a:d:p:r" opt
    do
	case "$opt" in
	    a) 
		directories=(${directories[@]} $(get_value_by_name "$OPTARG"))
		;;
	    d) 
		directories[$diridx]="$OPTARG"
		diridx=$diridx+1
		;;
	    p) 
		pipeline="$OPTARG"
		;;
	    r)
		reverse="true"
		;;
	    *)
		select_from_dir_help
		return 1
		;;
	esac
    done
    unset diridx opt
    shift $((OPTIND-1))
    OPTIND=0
    if [ -z $1 ]; then
	select_from_dir_help
	return 1
    else	
	bname=$1
    fi

    # Search directories
    typeset -i i=0
    if [ "$reverse" == "true" ]; then i=${#directories[@]}-1; fi
    local file=
    while [ $i -ge 0 ] && [ $i -lt ${#directories[@]} ]
    do
	dir="${directories[$i]}"
	if [ ! -z $pipeline ]; then dir="$dir/$pipeline"; fi
	if [ -d $dir ]; then
	    file="$dir/$bname"
	    if [ -s $file ] && [ -r $file ]; then
		break
	    else
		file=
	    fi
	fi
	if [ "$reverse" == "true" ]; then
	    i=i-1
	else
	    i=i+1
	fi
    done

    # Return value
    echo $file
}
