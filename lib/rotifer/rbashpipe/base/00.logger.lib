#!/bin/bash

#========================================================================
# Simpler logger
#========================================================================
function simplelog() { 
    if [ "${RBASHPIPE_DEBUG_LEVEL}" == "off" ]; then return; fi
    local type=$1
    shift
    local caller
    if [ -z "${FUNCNAME[1]}" ]; then
	caller=${FUNCNAME[0]}
    else
	caller=${FUNCNAME[1]}
    fi
    local message="`date` $type ($caller): $*"
    echo "$message" 1>&2
}

#========================================================================
# A simple debugger
#========================================================================
function simpledebug() {
    if [ "${RBASHPIPE_DEBUG_LEVEL}" == "off" ]; then return; fi

    # Parse option -n
    local name=RBASHPIPE_
    while getopts "n:" opt
    do
	case "$opt" in
	    n) 
		name="$OPTARG"
		;;
	esac
    done
    shift $((OPTIND-1))
    OPTIND=0

    # Find variables and store their values
    local tmp=
    local debugtxt="type\tname\tvalue"
    for tmp in `compgen -v ${name}`
    do
	local ref="${tmp}[*]"
	if [ "$tmp" == "RBASHPIPE_HELP_PAGE" ]; then continue; fi
	if is_Array $tmp; then
	    debugtxt="${debugtxt}\n"`echo -e "array\t$tmp\t${!tmp}"`
	else
	    debugtxt="${debugtxt}\n"`echo -e "scalar\t$tmp\t${!tmp}"`
	fi
    done

    # print
    simplelog DEBUG "

`echo -e "$debugtxt" | padtable -r ' : '`

Input:
$*
"
}

#========================================================================
# Print log messages
#========================================================================
function printlog() { 
    if [ "${RBASHPIPE_DEBUG_LEVEL}" == "off" ]; then return; fi
    function printlog_usage() {
	echo "`date` USAGE (${FUNCNAME[1]}): ${FUNCNAME[1]} [-a <file>] [-t <type>] <message>" 1>&2
    }

    local type="WARNING"
    local file=
    local opt
    while getopts "a:t:" opt
    do
	case "$opt" in
	    a)
		file="$OPTARG"
		i=i+2
		;;
	    t)
		type="$OPTARG"
		i=i+2
		;;
	    *)
		printlog_usage
		return 1
		;;
	esac
    done
    shift $((OPTIND-1))
    OPTIND=0

    # Compose message
    local caller
    if [ -z "${FUNCNAME[1]}" ]; then
	caller=${FUNCNAME[0]}
    else
	if [ "${FUNCNAME[1]}" == "source" ]; then
	    caller=`basename ${BASH_SOURCE[1]}`
	else
	    caller=${FUNCNAME[1]}
	fi
    fi

    # Print message
    local message="`date` $type ($caller): $*"
    if [ ! -z $file ]; then
	echo "$message" | tee -a $file 1>&2
    else
	echo "$message" 1>&2
    fi

    if [ "$type" == "FATAL" ]; then
	exit 1;
    fi
}
