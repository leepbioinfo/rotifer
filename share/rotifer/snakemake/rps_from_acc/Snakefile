import os 
from Bio import SeqIO

configfile: "config.yaml"
localrules: combine_results, combine_results_pfam, combine_final, combine_arch

input_file = config["input_fasta"]
input_fasta = config["input_fasta"]
hmmdb_pfam = config["hmmdb_pfam"]
hmmdb_profiledb = config["hmmdb_profiledb"]
batch_size = config["batch_size"]

#### conditionaly running 
run_pfam = config.get("run_pfam", True)
run_profiledb = config.get("run_profiledb", True)



def get_seq_ids():
    with open(input_file) as f:
        records = [line.strip() for line in f if line.strip()]

    os.makedirs("split", exist_ok=True)

    # Split the records into batches
    batched_records = [records[i:i + batch_size] for i in range(0, len(records), batch_size)]

    seq_ids = []
    for batch_num, batch in enumerate(batched_records, start=1):
        batch_filename = f"split/batch_{batch_num}.acc"
        with open(batch_filename, "w") as out:
            for pid in batch:
                out.write(pid + "\n")
                seq_ids.append(pid)

    return seq_ids, len(batched_records)
SEQ_IDS, NUM_BATCHES = get_seq_ids()

rule all:
	input:
		"final.pkl"


rule gi2fasta:
    input:
        fasta="split/batch_{batch_num}.acc"
    output:
        txt="split/batch_{batch_num}.faa"  # Temporary output for each batch
    resources:
        mem_mb=8000,
        threads=8
    shell:
        """
		gi2fasta -t 4 {input.fasta}  > {output.txt}.tmp
		test -s {output}.tmp
		mv {output.txt}.tmp {output.txt}
		"""
		
rule combine_fasta: 
    input:
        expand("split/batch_{batch_num}.faa", batch_num=range(1, NUM_BATCHES + 1))  # Collect all batch outputs
    output:
        txt="all.fa",  # Final combined output
    shell:
        "cat {input} > {output.txt}"

rule mmseqs:  
    input:
        txt="all.fa",  # Final combined output
    output:
        txt="mmseqs.c80e3",  # Final combined output
    threads: 96
    resources:
        mem_mb=128000
    shell:
        """
		mmseqs easy-cluster {input.txt}  {output.txt} tmp
		mv {output.txt}_cluster.tsv {output.txt}
		"""

rule rpsblast_ profiledb:
    input:
        fasta="split/batch_{batch_num}.faa"
    output:
        txt="results_profiledb/temp_batch_{batch_num}.txt"  # Temporary output for each batch
    resources:
        mem_mb=8000,
        threads=2
    shell:
        """
		rpsblast -query {input.fasta} -db {hmmdb_profiledb} |blast2table -c profiledb -s > {output.txt}.tmp
		test -s {output}.tmp
		mv {output.txt}.tmp {output.txt}
		"""

rule rpsblast_pfam:   
    input:
        fasta="split/batch_{batch_num}.faa"
    output:
        txt="results_pfam/temp_batch_{batch_num}.txt"  # Temporary output for each batch
    resources:
        mem_mb=8000,
        threads=2
    shell:
        """
		rpsblast -query {input.fasta} -db {hmmdb_pfam}|blast2table -c cdd  -s   > {output.txt}.tmp
		test -s {output}.tmp
		mv {output.txt}.tmp {output.txt}
		"""

rule phobius:  
    input:
        fasta="split/batch_{batch_num}.faa"
    output:
        txt="results_phobius/temp_batch_{batch_num}.txt"  # Temporary output for each batch
    resources:
        mem_mb=8000,
        threads=8
    shell:
        """
		 cat {input.fasta} \
    	| sed -E '/^>/ {{ s/^>([^[:space:]]+).*/>\\1/; b }}; s/[^ACDEFGHIKLMNPQRSTVWYBXZ]/X/g' \
    	| phobius \
    	| phobius2table -e 0.01 > {output.txt}.tmp
		test -s {output}.tmp
		mv {output.txt}.tmp {output.txt}
		"""

rule combine_archs: 
    input:
        pfam="results_pfam/temp_batch_{batch_num}.txt",
        profiledb="results_profiledb/temp_batch_{batch_num}.txt",
        phobius="results_phobius/temp_batch_{batch_num}.txt"
    output:
        profiledb="arch_profiledb/{batch_num}.arch",  # Final combined output
        pfam="arch_pfam/{batch_num}.arch",  # Final combined output
        combined="arch_combined/{batch_num}.arch"  # Final combined output
    shell:
        """
		cat {input.profiledb} {input.phobius} |domain2architecture  > {output.profiledb}
        cat {input.pfam} {input.phobius} |domain2architecture > {output.pfam}
        cat {input.pfam} {input.profiledb} {input.phobius}|domain2architecture > {output.combined}
		"""


rule combine_arch:
    input:
        pfam=expand("arch_pfam/{batch_num}.arch", batch_num=range(1, NUM_BATCHES + 1)),  # Collect all batch outputs
        profiledb=expand("arch_profiledb/{batch_num}.arch", batch_num=range(1, NUM_BATCHES + 1)),  # Collect all batch outputs
        combined=expand("arch_combined/{batch_num}.arch", batch_num=range(1, NUM_BATCHES + 1)),  # Collect all batch outputs
    output:
        pfam="pfam_final.arch",  # Final combined output
        profiledb="profiledb_final.arch",  # Final combined output
        combined="combined_final.arch",  # Final combined output
    shell:
        """
		cat {input.pfam} > {output.pfam}
		cat {input.profiledb} > {output.profiledb}
		cat {input.combined} > {output.combined}
		""" 

rule combine_final:
    input:
        arch = "combined_final.arch",
        pfam = "pfam_final.arch",
        profiledb = "profiledb_final.arch",
        cluster = "mmseqs.c80e3",
    output:
        txt = "final.pkl"
    script:
        "scripts/making_table.py"
 
