import os 
from Bio import SeqIO

configfile: "config.yaml"
print(config)
localrules: combine_results, combine_results_pfam, combine_final

input_fasta = config["input_fasta"]
hmmdb_pfam = config["hmmdb_pfam"]
hmmdb_profiledb = config["hmmdb_profiledb"]
batch_size = config["batch_size"]

#### conditionaly running 
run_pfam = config.get("run_pfam", True)
run_profiledb = config.get("run_profiledb", True)


def get_seq_ids():
    records = list(SeqIO.parse(input_fasta, "fasta"))
    os.makedirs("split", exist_ok=True)
    
    # Split the records into batches
    batched_records = [records[i:i + batch_size] for i in range(0, len(records), batch_size)]
    
    seq_ids = []
    for batch_num, batch in enumerate(batched_records, start=1):
        batch_filename = f"split/batch_{batch_num}.faa"
        with open(batch_filename, "w") as out:
            for rec in batch:
                SeqIO.write(rec, out, "fasta")
                seq_ids.append(rec.id)
    
    return seq_ids, len(batched_records)

SEQ_IDS, NUM_BATCHES = get_seq_ids()

if run_pfam and run_profiledb:
	rule all:
		input:
			"combined.arch"
elif run_pfam:
	rule all:
		input:
			"results_pfam/pfam.arch"
elif run_profiledb:
	rule all:
		input:
			"results_profiledb/profiledb.arch"

rule rpsblast_profiledb:
    input:
        fasta="split/batch_{batch_num}.faa"
    output:
        txt="results_profiledb/temp_batch_{batch_num}.txt"  # Temporary output for each batch
    log:
        err="logs_profiledb/hmmscan.batch_{batch_num}.err"
    resources:
        mem_mb=8000,
        threads=2
    shell:
        "rpsblast -query {input.fasta} -db {hmmdb_profiledb}  > {output.txt} 2>{log.err}"

rule combine_results:
    input:
        expand("results_profiledb/temp_batch_{batch_num}.txt", batch_num=range(1, NUM_BATCHES + 1))  # Collect all batch outputs
    output:
        txt="results_profiledb/all_output.txt",  # Final combined output
        arch="results_profiledb/profiledb.arch"  # Final combined output
    shell:
        "cat {input} |tee {output.txt}|rps2arch -fasta {input_fasta} > {output.arch}"

rule rpsblast_pfam: 
    input:
        fasta="split/batch_{batch_num}.faa"
    output:
        txt="results_pfam/temp_batch_{batch_num}.txt"  # Temporary output for each batch
    log:
        err="logs_pfam/hmmscan.batch_{batch_num}.err"
    resources:
        mem_mb=8000,
        threads=2
    shell:
        "rpsblast -query {input.fasta} -db {hmmdb_pfam}  > {output.txt} 2>{log.err}"

rule combine_results_pfam:
    input:
        expand("results_pfam/temp_batch_{batch_num}.txt", batch_num=range(1, NUM_BATCHES + 1))  # Collect all batch outputs
    output:
        txt="results_pfam/all_output.txt",  # Final combined output
        arch="results_pfam/pfam.arch"  # Final combined output
    shell:
        "cat {input} |tee {output.txt}|rps2arch -fasta {input_fasta} > {output.arch}"  # Concatenate all batch output files into one


rule combine_final: 
    input:
        pfam="results_pfam/all_output.txt",
        prof="results_profiledb/all_output.txt"
    output:
        txt="combined.arch"
    shell:
        "cat {input.pfam} {input.prof} | rps2arch -fasta {input_fasta} > {output.txt}"

